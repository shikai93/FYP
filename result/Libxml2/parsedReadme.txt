bakefile.sourceforge.net) is used as makefile generator.

bakefile.sourceforge.net).

libxml2

libxml2

Build->Set Active Configuration

bakefile_gen

libxml2.bkl

bakefile_gen -c

www.gnu.org/software/libiconv/ - there are pre-compiled Win32

t, you will first have to configure your compiler suite to run from the command-line - please refer to your compiler

s implementation of the ECMA scripting language. Almost every Windows machine can execute this through the Windows Scripting Host. If your system lacks the ability to execute JScript for some reason, you must perform the configuration manually and you are on your own with that. The second step is compiling the source and, optionally, installing it to the location of your choosing. 1.2 Configuring The Source -------------------------- The configuration script accepts numerous options. Some of these affect features which will be available in the compiled software, others affect the way the software is built and installed. To see a full list of options supported by the configuration script, run cscript configure.js help from the win32 subdirectory. The configuration script will present you the options it accepts and give a biref explanation of these. In every case you will have two sets of options. The first set is specific to the software you are building and the second one is specific to the Windows port. Once you have decided which options suit you, run the script with that options. Here is an example: cscript configure.js compiler=msvc prefix=c:\opt include=c:\opt\include lib=c:\opt\lib debug=yes The previous example will configure the process to use the Microsoft

s MSVC compiler, you would use the NMAKE utility. If you configured it to build with GNU C compiler, mingw edition, you would use the GNU make. Assuming you use MSVC, type nmake /f Makefile.msvc and if you use MinGW, you would type make -f Makefile.mingw and if you use Borland

t have Visual Studio .NET installed. 2.2 GNU C/C++, Mingw edition ---------------------------- When specifying paths to configure.js, please use slashes instead of backslashes for directory separation. Sometimes Mingw needs this. If this is the case, and you specify backslashes, then the compiler will complain about not finding necessary header files. 2.2 Borland C++ Builder ----------------------- To compile libxml2 with the BCB6 compiler and associated tools, just follow the basic instructions found in this file file. Be sure to specify the "compiler=bcb" option when running the configure script. To compile the library and test programs, just type make -fMakefile.bcb That should be all that

s COFF2OMF utility, or use IMPLIB to build a new import library from the DLL. Alternatively, it is possible to obtain the iconv source, and build the DLL using the Borland compiler. There is a minor problem with the header files for iconv - they expect a macro named "EILSEQ" in errno.h, but this is not defined in the Borland headers, and its absence can cause problems. To circumvent this problem, I define EILSEQ=2 in Makefile.bcb. The value "2" is the value for ENOFILE (file not found). This should not have any disastrous side effects beyond possibly displaying a misleading error message in certain situations. 2.2.2 Compatability problems with MSVC (and probably CYGWIN) A libxml2 DLL generated by BCB is callable from MSVC programs, but there is a minor problem with the names of the symbols exported from the library. The Borland compiler, by default, prepends an underscore character to global identifiers (functions and global variables) when generating object files. Hence the function "xmlAddChild" is added to the DLL with the name "_xmlAddChild". The MSVC compiler does not have this behaviour, and looks for the unadorned name. I currently circumvent this problem by writing a .def file which causes BOTH the adorned and unadorned names to be exported from the DLL. This behaviour may not be supported in the future. An even worse problem is that of generating an import library for the DLL. The Borland-generated DLL is in OMF format. MSVC expects libraries in COFF format, but they don

OMF2COFF

s IMPLIB utility. But it is possible to create an import lib from the .def file, using the command: LIB /DEF:libxml2.def If you don

