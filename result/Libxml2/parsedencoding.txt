encoding.c : implements the encoding conversion functions needed for XML Related specs: rfc2044 (UTF-8 and UTF-16) F. Yergeau Alis Technologies rfc2781 UTF-16, an encoding of ISO 10646, P. Hoffman, F. Yergeau [ISO-10646] UTF-8 and UTF-16 in Annexes [ISO-8859-1] ISO Latin-1 characters codes. [UNICODE] The Unicode Consortium, "The Unicode Standard -- Worldwide Character Encoding -- Version 1.0", Addison- Wesley, Volume 1, 1991, Volume 2, 1992. UTF-8 is described in Unicode Technical Report #4. [US-ASCII] Coded Character Set--7-bit American Standard Code for Information Interchange, ANSI X3.4-1986. See Copyright for the status of this software. daniel@veillard.com Original code for IsoLatin1 and UTF-16 by "Martin J. Duerst" <duerst@w3.org>

Define this to get encoding traces

xmlEncodingErrMemory: @extra: extra informations Handle an out of memory condition

xmlErrEncoding: @error: the error number @msg: the error message n encoding error

Conversions To/From UTF8 encoding

asciiToUTF8: @out: a pointer to an array of bytes to store the result @outlen: the length of @out @in: a pointer to an array of ASCII chars @inlen: the length of @in Take a block of ASCII chars in and try to convert it to an UTF-8 block of chars out. Returns 0 if success, or -1 otherwise The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictable. The value of @outlen after return is the number of octets consumed.

UTF8Toascii: @out: a pointer to an array of bytes to store the result @outlen: the length of @out @in: a pointer to an array of UTF-8 chars @inlen: the length of @in Take a block of UTF-8 chars in and try to convert it to an ASCII block of chars out. Returns 0 if success, -2 if the transcoding fails, or -1 otherwise The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictable. The value of @outlen after return is the number of octets consumed.

initialization nothing to do

trailing byte in leading position

no chance for this in Ascii

assertion: c is a single UTF-4 value

no chance for this in Ascii

LIBXML_OUTPUT_ENABLED

isolat1ToUTF8: @out: a pointer to an array of bytes to store the result @outlen: the length of @out @in: a pointer to an array of ISO Latin 1 chars @inlen: the length of @in Take a block of ISO Latin 1 chars in and try to convert it to an UTF-8 block of chars out. Returns the number of bytes written if success, or -1 otherwise The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictable. The value of @outlen after return is the number of octets consumed.

UTF8ToUTF8: @out: a pointer to an array of bytes to store the result @outlen: the length of @out @inb: a pointer to an array of UTF-8 chars @inlenb: the length of @in in UTF-8 chars No op copy operation for UTF8 handling. Returns the number of bytes written, or -1 if lack of space. The value of inlen after return is the number of octets consumed if the return value is positive, else unpredictable.

UTF8Toisolat1: @out: a pointer to an array of bytes to store the result @outlen: the length of @out @in: a pointer to an array of UTF-8 chars @inlen: the length of @in Take a block of UTF-8 chars in and try to convert it to an ISO Latin 1 block of chars out. Returns the number of bytes written if success, -2 if the transcoding fails, or -1 otherwise The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictable. The value of @outlen after return is the number of octets consumed.

initialization nothing to do

trailing byte in leading position

no chance for this in IsoLat1

assertion: c is a single UTF-4 value

no chance for this in IsoLat1

LIBXML_OUTPUT_ENABLED

UTF16LEToUTF8: @out: a pointer to an array of bytes to store the result @outlen: the length of @out @inb: a pointer to an array of UTF-16LE passwd as a byte array @inlenb: the length of @in in UTF-16LE chars Take a block of UTF-16LE ushorts in and try to convert it to an UTF-8 block of chars out. This function assumes the endian property is the same between the native type of this machine and the inputed one. Returns the number of bytes written, or -1 if lack of space, or -2 if the transcoding fails (if in is not a valid utf16 string) The value of inlen after return is the number of octets consumed if the return value is positive, else unpredictable.

surrogates

(in > inend) shouldn't happens

assertion: c is a single UTF-4 value

UTF8ToUTF16LE: @outb: a pointer to an array of bytes to store the result @outlen: the length of @outb @in: a pointer to an array of UTF-8 chars @inlen: the length of @in Take a block of UTF-8 chars in and try to convert it to an UTF-16LE block of chars out. Returns the number of bytes written, or -1 if lack of space, or -2 if the transcoding failed.

UTF16LE encoding has no BOM

trailing byte in leading position

no chance for this in UTF-16

assertion: c is a single UTF-4 value

UTF8ToUTF16: @outb: a pointer to an array of bytes to store the result @outlen: the length of @outb @in: a pointer to an array of UTF-8 chars @inlen: the length of @in Take a block of UTF-8 chars in and try to convert it to an UTF-16 block of chars out. Returns the number of bytes written, or -1 if lack of space, or -2 if the transcoding failed.

initialization, add the Byte Order Mark for UTF-16LE

LIBXML_OUTPUT_ENABLED

UTF16BEToUTF8: @out: a pointer to an array of bytes to store the result @outlen: the length of @out @inb: a pointer to an array of UTF-16 passed as a byte array @inlenb: the length of @in in UTF-16 chars Take a block of UTF-16 ushorts in and try to convert it to an UTF-8 block of chars out. This function assumes the endian property is the same between the native type of this machine and the inputed one. Returns the number of bytes written, or -1 if lack of space, or -2 if the transcoding fails (if in is not a valid utf16 string) The value of inlen after return is the number of octets consumed if the return value is positive, else unpredictable.

surrogates

(in > inend) shouldn't happens

assertion: c is a single UTF-4 value

UTF8ToUTF16BE: @outb: a pointer to an array of bytes to store the result @outlen: the length of @outb @in: a pointer to an array of UTF-8 chars @inlen: the length of @in Take a block of UTF-8 chars in and try to convert it to an UTF-16BE block of chars out. Returns the number of byte written, or -1 by lack of space, or -2 if the transcoding failed.

UTF-16BE has no BOM

trailing byte in leading position

no chance for this in UTF-16

assertion: c is a single UTF-4 value

LIBXML_OUTPUT_ENABLED

Generic encoding handling routines

xmlDetectCharEncoding: @in: a pointer to the first bytes of the XML entity, must be at least 2 bytes long (at least 4 if encoding is UTF4 variant). @len: pointer to the length of the buffer Guess the encoding of the entity using the first bytes of the entity content according to the non-normative appendix F of the XML-1.0 recommendation. Returns one of the XML_CHAR_ENCODING_... values.

Although not part of the recommendation, we also attempt an "auto-recognition" of UTF-16LE and UTF-16BE encodings.

Errata on XML-1.0 June 20 2001 We now allow an UTF8 encoded BOM

For UTF-16 we can recognize by the BOM

xmlCleanupEncodingAliases: Unregisters all aliases

xmlGetEncodingAlias: @alias: the alias name as parsed, in UTF-8 format (ASCII actually) Lookup an encoding name for the given alias. Returns NULL if not found, otherwise the original name

Walk down the list looking for a definition of the alias

xmlAddEncodingAlias: @name: the encoding name as parsed, in UTF-8 format (ASCII actually) @alias: the alias name as parsed, in UTF-8 format (ASCII actually) Registers an alias @alias for an encoding named @name. Existing alias will be overwritten. Returns 0 in case of success, -1 in case of error

Walk down the list looking for a definition of the alias

Replace the definition.

Add the definition

xmlDelEncodingAlias: @alias: the alias name as parsed, in UTF-8 format (ASCII actually) Unregisters an encoding alias @alias Returns 0 in case of success, -1 in case of error

Walk down the list looking for a definition of the alias

xmlParseCharEncoding: @name: the encoding name as parsed, in UTF-8 format (ASCII actually) Compare the string to the encoding schemes already known. Note that the comparison is case insensitive accordingly to the section [XML] 4.3.3 Character Encoding in Entities. Returns one of the XML_CHAR_ENCODING_... values or XML_CHAR_ENCODING_NONE if not recognized.

Do the alias resolution

NOTE: if we were able to parse this, the endianness of UTF16 is already found and in use

NOTE: if we were able to parse this, the endianness of UCS4 is already found and in use

xmlGetCharEncodingName: @enc: the encoding The "canonical" name for XML encoding. C.f. http://www.w3.org/TR/REC-xml#charencoding Section 4.3.3 Character Encoding in Entities Returns the canonical name for the given encoding

Char encoding handlers

the size should be growable, but it's not a big deal ...

The default is UTF-8 for XML, that's also the default used for the parser internals, so the default encoding handler is NULL

xmlNewCharEncodingHandler: @name: the encoding name, in UTF-8 format (ASCII actually) @input: the xmlCharEncodingInputFunc to read that encoding @output: the xmlCharEncodingOutputFunc to write that encoding Create and registers an xmlCharEncodingHandler. Returns the xmlCharEncodingHandlerPtr created (or NULL in case of error).

Do the alias resolution

Keep only the uppercase version of the encoding.

allocate and fill-up an handler block.

LIBXML_ICONV_ENABLED

registers and returns the handler.

xmlInitCharEncodingHandlers: Initialize the char encoding support, it registers the default encoding supported. NOTE: while public, this function usually doesn't need to be called in normal processing.

LIBXML_OUTPUT_ENABLED

xmlCleanupCharEncodingHandlers: Cleanup the memory allocated for the char encoding support, it unregisters all the encoding handlers and the aliases.

xmlRegisterCharEncodingHandler: @handler: the xmlCharEncodingHandlerPtr handler block Register the char encoding handler, surprising, isn't it ?

xmlGetCharEncodingHandler: @enc: an xmlCharEncoding value. Search in the registered set the handler able to read/write that encoding. Returns the handler or NULL if not found

We used to keep ISO Latin encodings native in the generated data. This led to so many problems that this has been removed. One can still change this back by registering no-ops encoders for those

xmlFindCharEncodingHandler: @name: a string describing the char encoding. Search in the registered set the handler able to read/write that encoding. Returns the handler or NULL if not found

LIBXML_ICONV_ENABLED

Do the alias resolution

Check first for directly registered encoding names

check whether iconv can handle this

LIBXML_ICONV_ENABLED

Fallback using the canonical names

If "none of the above", give up

ICONV based generic conversion functions

xmlIconvWrapper: @cd:iconv converter data structure @out: a pointer to an array of bytes to store the result @outlen: the length of @out @in: a pointer to an array of ISO Latin 1 chars @inlen: the length of @in Returns 0 if success, or -1 by lack of space, or -2 if the transcoding fails (for in is not valid utf8 string or the result of transformation can't fit into the encoding we want), or -3 if there the last byte can't form a single output char. The value of @inlen after return is the number of octets consumed as the return value is positive, else unpredictable. The value of @outlen after return is the number of ocetes consumed.

LIBXML_ICONV_ENABLED

The real API used by libxml for on-the-fly conversion

xmlCharEncFirstLineInt: @handler:char enconding transformation data structure @out: an xmlBuffer for the output. @in: an xmlBuffer for the input @len: number of bytes to convert for the first line, or -1 Front-end for the encoding handler input function, but handle only the very first line, i.e. limit itself to 45 chars. Returns the number of byte written if success, or -1 general error -2 if the transcoding fails (for in is not valid utf8 string or the result of transformation can't fit into the encoding we want), or

calculate space available

echo '<?xml version="1.0" encoding="UCS4"?>' | wc -c => 38 45 chars should be sufficient to reach the end of the encoding declaration without going too far inside the document content. on UTF-16 this means 90bytes, on UCS4 this means 180 The actual value depending on guessed encoding is passed as @len if provided

LIBXML_ICONV_ENABLED

DEBUG_ENCODING

Ignore when input buffer is not on a boundary

xmlCharEncFirstLine: @handler:char enconding transformation data structure @out: an xmlBuffer for the output. @in: an xmlBuffer for the input Front-end for the encoding handler input function, but handle only the very first line, i.e. limit itself to 45 chars. Returns the number of byte written if success, or -1 general error -2 if the transcoding fails (for in is not valid utf8 string or the result of transformation can't fit into the encoding we want), or

xmlCharEncInFunc: @handler:char encoding transformation data structure @out: an xmlBuffer for the output. @in: an xmlBuffer for the input Generic front-end for the encoding handler input function Returns the number of byte written if success, or -1 general error -2 if the transcoding fails (for in is not valid utf8 string or the result of transformation can't fit into the encoding we want), or

LIBXML_ICONV_ENABLED

Ignore when input buffer is not on a boundary

xmlCharEncOutFunc: @handler:char enconding transformation data structure @out: an xmlBuffer for the output. @in: an xmlBuffer for the input Generic front-end for the encoding handler output function a first call with @in == NULL has to be made firs to initiate the output in case of non-stateless encoding needing to initiate their state or the output (like the BOM in UTF16). In case of UTF8 sequence conversion errors for the given encoder, the content will be automatically remapped to a CharRef sequence. Returns the number of byte written if success, or -1 general error -2 if the transcoding fails (for in is not valid utf8 string or the result of transformation can't fit into the encoding we want), or

Gennady: count '/0'

First specific handling of in = NULL, i.e. the initialization call

Gennady: check return value

LIBXML_ICONV_ENABLED

Conversion itself.

Can be a limitation of iconv

LIBXML_ICONV_ENABLED

Attempt to handle error cases

Removes the UTF8 sequence, and replace it by a charref and continue the transcoding phase, hoping the error did not mangle the encoder state.

xmlCharEncCloseFunc: @handler:char enconding transformation data structure Generic front-end for encoding handler close function Returns 0 if success, or -1 in case of error

Iconv handlers can be used only once, free the whole block. and the associated icon resources.

LIBXML_ICONV_ENABLED

xmlByteConsumed: @ctxt: an XML parser context This function provides the current index of the parser relative to the start of the current entity. This function is computed in bytes from the beginning starting at zero and finishing at the size in byte of the file if parsing a file. The function is of constant cost if the input is UTF-8 but can be costly if run on non-UTF-8 input. Returns the index in bytes from the beginning of the entity or -1 in case the index could not be computed.

Encoding conversion, compute the number of unused original bytes from the input not consumed and substract that from the raw consumed value, this is not a cheap operation

could not find a converter

UTF8ToISO8859x: @out: a pointer to an array of bytes to store the result @outlen: the length of @out @in: a pointer to an array of UTF-8 chars @inlen: the length of @in @xlattable: the 2-level transcoding table Take a block of UTF-8 chars in and try to convert it to an ISO 8859- block of chars out. Returns 0 if success, -2 if the transcoding fails, or -1 otherwise The value of @inlen after return is the number of octets consumed as the return value is positive, else unpredictable. The value of @outlen after return is the number of ocetes consumed.

initialization nothing to do

trailing byte in leading position

trailing byte not in input buffer

not a trailing byte

not in character set

trailing bytes not in input buffer

not a trailing byte (c1)

not a trailing byte (c2)

not in character set

cannot transcode >= U+010000

ISO8859xToUTF8 @out: a pointer to an array of bytes to store the result @outlen: the length of @out @in: a pointer to an array of ISO Latin 1 chars @inlen: the length of @in Take a block of ISO 8859- chars in and try to convert it to an UTF-8 block of chars out. Returns 0 if success, or -1 otherwise The value of @inlen after return is the number of octets consumed The value of @outlen after return is the number of ocetes produced.

undefined code point

Lookup tables for ISO-8859-2..ISO-8859-16 transcoding

auto-generated functions for ISO-8859-2 .. ISO-8859-16

www.w3.org/TR/REC-xml#charencoding

The Unicode Standard -- * Worldwide Character Encoding -- Version 1.0

Martin J. Duerst

libxml.h

t happens */ break; } if (xmlLittleEndian) { d = *in++; } else { tmp = (unsigned char *) in; d = *tmp++; d = d | (((unsigned int)*tmp) << 8); in++; } if ((d & 0xFC00) == 0xDC00) { c &= 0x03FF; c <<= 10; c |= d & 0x03FF; c += 0x10000; } else { *outlen = out - outstart; *inlenb = processed - inb; return(-2); } } /* assertion: c is a single UTF-4 value */ if (out >= outend) break; if (c < 0x80) { *out++= c; bits= -6; } else if (c < 0x800) { *out++= ((c >> 6) & 0x1F) | 0xC0; bits= 0; } else if (c < 0x10000) { *out++= ((c >> 12) & 0x0F) | 0xE0; bits= 6; } else { *out++= ((c >> 18) & 0x07) | 0xF0; bits= 12; } for ( ; bits >= 0; bits-= 6) { if (out >= outend) break; *out++= ((c >> bits) & 0x3F) | 0x80; } processed = (const unsigned char*) in; } *outlen = out - outstart; *inlenb = processed - inb; return(*outlen); } #ifdef LIBXML_OUTPUT_ENABLED /** * UTF8ToUTF16LE: * @outb: a pointer to an array of bytes to store the result * @outlen: the length of @outb * @in: a pointer to an array of UTF-8 chars * @inlen: the length of @in * * Take a block of UTF-8 chars in and try to convert it to an UTF-16LE * block of chars out. * * Returns the number of bytes written, or -1 if lack of space, or -2 * if the transcoding failed. */ static int UTF8ToUTF16LE(unsigned char* outb, int *outlen, const unsigned char* in, int *inlen) { unsigned short* out = (unsigned short*) outb; const unsigned char* processed = in; const unsigned char *const instart = in; unsigned short* outstart= out; unsigned short* outend; const unsigned char* inend; unsigned int c, d; int trailing; unsigned char *tmp; unsigned short tmp1, tmp2; /* UTF16LE encoding has no BOM */ if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1); if (in == NULL) { *outlen = 0; *inlen = 0; return(0); } inend= in + *inlen; outend = out + (*outlen / 2); while (in < inend) { d= *in++; if (d < 0x80) { c= d; trailing= 0; } else if (d < 0xC0) { /* trailing byte in leading position */ *outlen = (out - outstart) * 2; *inlen = processed - instart; return(-2); } else if (d < 0xE0) { c= d & 0x1F; trailing= 1; } else if (d < 0xF0) { c= d & 0x0F; trailing= 2; } else if (d < 0xF8) { c= d & 0x07; trailing= 3; } else { /* no chance for this in UTF-16 */ *outlen = (out - outstart) * 2; *inlen = processed - instart; return(-2); } if (inend - in < trailing) { break; } for ( ; trailing; trailing--) { if ((in >= inend) || (((d= *in++) & 0xC0) != 0x80)) break; c <<= 6; c |= d & 0x3F; } /* assertion: c is a single UTF-4 value */ if (c < 0x10000) { if (out >= outend) break; if (xmlLittleEndian) { *out++ = c; } else { tmp = (unsigned char *) out; *tmp = c ; *(tmp + 1) = c >> 8 ; out++; } } else if (c < 0x110000) { if (out+1 >= outend) break; c -= 0x10000; if (xmlLittleEndian) { *out++ = 0xD800 | (c >> 10); *out++ = 0xDC00 | (c & 0x03FF); } else { tmp1 = 0xD800 | (c >> 10); tmp = (unsigned char *) out; *tmp = (unsigned char) tmp1; *(tmp + 1) = tmp1 >> 8; out++; tmp2 = 0xDC00 | (c & 0x03FF); tmp = (unsigned char *) out; *tmp = (unsigned char) tmp2; *(tmp + 1) = tmp2 >> 8; out++; } } else break; processed = in; } *outlen = (out - outstart) * 2; *inlen = processed - instart; return(*outlen); } /** * UTF8ToUTF16: * @outb: a pointer to an array of bytes to store the result * @outlen: the length of @outb * @in: a pointer to an array of UTF-8 chars * @inlen: the length of @in * * Take a block of UTF-8 chars in and try to convert it to an UTF-16 * block of chars out. * * Returns the number of bytes written, or -1 if lack of space, or -2 * if the transcoding failed. */ static int UTF8ToUTF16(unsigned char* outb, int *outlen, const unsigned char* in, int *inlen) { if (in == NULL) { /* * initialization, add the Byte Order Mark for UTF-16LE */ if (*outlen >= 2) { outb[0] = 0xFF; outb[1] = 0xFE; *outlen = 2; *inlen = 0; #ifdef DEBUG_ENCODING xmlGenericError(xmlGenericErrorContext, "Added FFFE Byte Order Mark\n"); #endif return(2); } *outlen = 0; *inlen = 0; return(0); } return (UTF8ToUTF16LE(outb, outlen, in, inlen)); } #endif /* LIBXML_OUTPUT_ENABLED */ /** * UTF16BEToUTF8: * @out: a pointer to an array of bytes to store the result * @outlen: the length of @out * @inb: a pointer to an array of UTF-16 passed as a byte array * @inlenb: the length of @in in UTF-16 chars * * Take a block of UTF-16 ushorts in and try to convert it to an UTF-8 * block of chars out. This function assumes the endian property * is the same between the native type of this machine and the * inputed one. * * Returns the number of bytes written, or -1 if lack of space, or -2 * if the transcoding fails (if *in is not a valid utf16 string) * The value of *inlen after return is the number of octets consumed * if the return value is positive, else unpredictable. */ static int UTF16BEToUTF8(unsigned char* out, int *outlen, const unsigned char* inb, int *inlenb) { unsigned char* outstart = out; const unsigned char* processed = inb; unsigned char* outend = out + *outlen; unsigned short* in = (unsigned short*) inb; unsigned short* inend; unsigned int c, d, inlen; unsigned char *tmp; int bits; if ((*inlenb % 2) == 1) (*inlenb)--; inlen = *inlenb / 2; inend= in + inlen; while (in < inend) { if (xmlLittleEndian) { tmp = (unsigned char *) in; c = *tmp++; c = c << 8; c = c | (unsigned int) *tmp; in++; } else { c= *in++; } if ((c & 0xFC00) == 0xD800) { /* surrogates */ if (in >= inend) { /* (in > inend) shouldn

auto-recognition



UTF-8

UTF8

UTF-16

UTF16

ISO-10646-UCS-2

UCS-2

UCS2

ISO-10646-UCS-4

UCS-4

UCS4

ISO-8859-1

ISO-LATIN-1

ISO LATIN 1

ISO-8859-2

ISO-LATIN-2

ISO LATIN 2

ISO-8859-3

ISO-8859-4

ISO-8859-5

ISO-8859-6

ISO-8859-7

ISO-8859-8

ISO-8859-9

ISO-2022-JP

SHIFT_JIS

EUC-JP

Unknown encoding %s\n

canonical

UTF-8

UTF-16

UTF-16

EBCDIC

ISO-10646-UCS-4

ISO-10646-UCS-4

ISO-10646-UCS-4

ISO-10646-UCS-4

ISO-10646-UCS-2

ISO-8859-1

ISO-8859-2

ISO-8859-3

ISO-8859-4

ISO-8859-5

ISO-8859-6

ISO-8859-7

ISO-8859-8

ISO-8859-9

ISO-2022-JP

Shift-JIS

EUC-JP

s not a big deal ... */ #define MAX_ENCODING_HANDLERS 50 static xmlCharEncodingHandlerPtr *handlers = NULL; static int nbCharEncodingHandler = 0; /* * The default is UTF-8 for XML, that

xmlNewCharEncodingHandler : no name !\n

xmlNewCharEncodingHandler : out of memory !\n

xmlNewCharEncodingHandler : out of memory !\n

Registered encoding handler for %s\n

t need to be called * in normal processing. */ void xmlInitCharEncodingHandlers(void) { unsigned short int tst = 0x1234; unsigned char *ptr = (unsigned char *) &tst; if (handlers != NULL) return; handlers = (xmlCharEncodingHandlerPtr *) xmlMalloc(MAX_ENCODING_HANDLERS * sizeof(xmlCharEncodingHandlerPtr)); if (*ptr == 0x12) xmlLittleEndian = 0; else if (*ptr == 0x34) xmlLittleEndian = 1; else { xmlEncodingErr(XML_ERR_INTERNAL_ERROR, "Odd problem at endianness detection\n", NULL); } if (handlers == NULL) { xmlEncodingErrMemory("xmlInitCharEncodingHandlers : out of memory !\n"); return; } xmlNewCharEncodingHandler("UTF-8", UTF8ToUTF8, UTF8ToUTF8); #ifdef LIBXML_OUTPUT_ENABLED xmlUTF16LEHandler = xmlNewCharEncodingHandler("UTF-16LE", UTF16LEToUTF8, UTF8ToUTF16LE); xmlUTF16BEHandler = xmlNewCharEncodingHandler("UTF-16BE", UTF16BEToUTF8, UTF8ToUTF16BE); xmlNewCharEncodingHandler("UTF-16", UTF16LEToUTF8, UTF8ToUTF16); xmlNewCharEncodingHandler("ISO-8859-1", isolat1ToUTF8, UTF8Toisolat1); xmlNewCharEncodingHandler("ASCII", asciiToUTF8, UTF8Toascii); xmlNewCharEncodingHandler("US-ASCII", asciiToUTF8, UTF8Toascii); #ifdef LIBXML_HTML_ENABLED xmlNewCharEncodingHandler("HTML", NULL, UTF8ToHtml); #endif #else xmlUTF16LEHandler = xmlNewCharEncodingHandler("UTF-16LE", UTF16LEToUTF8, NULL); xmlUTF16BEHandler = xmlNewCharEncodingHandler("UTF-16BE", UTF16BEToUTF8, NULL); xmlNewCharEncodingHandler("UTF-16", UTF16LEToUTF8, NULL); xmlNewCharEncodingHandler("ISO-8859-1", isolat1ToUTF8, NULL); xmlNewCharEncodingHandler("ASCII", asciiToUTF8, NULL); xmlNewCharEncodingHandler("US-ASCII", asciiToUTF8, NULL); #endif /* LIBXML_OUTPUT_ENABLED */ #ifndef LIBXML_ICONV_ENABLED #ifdef LIBXML_ISO8859X_ENABLED xmlRegisterCharEncodingHandlersISO8859x (); #endif #endif } /** * xmlCleanupCharEncodingHandlers: * * Cleanup the memory allocated for the char encoding support, it * unregisters all the encoding handlers and the aliases. */ void xmlCleanupCharEncodingHandlers(void) { xmlCleanupEncodingAliases(); if (handlers == NULL) return; for (;nbCharEncodingHandler > 0;) { nbCharEncodingHandler--; if (handlers[nbCharEncodingHandler] != NULL) { if (handlers[nbCharEncodingHandler]->name != NULL) xmlFree(handlers[nbCharEncodingHandler]->name); xmlFree(handlers[nbCharEncodingHandler]); } } xmlFree(handlers); handlers = NULL; nbCharEncodingHandler = 0; xmlDefaultCharEncodingHandler = NULL; } /** * xmlRegisterCharEncodingHandler: * @handler: the xmlCharEncodingHandlerPtr handler block * * Register the char encoding handler, surprising, isn

xmlRegisterCharEncodingHandler: NULL handler !\n

xmlRegisterCharEncodingHandler: Too many handler registered, see %s\n

MAX_ENCODING_HANDLERS

EBCDIC

ebcdic

EBCDIC-US

ISO-10646-UCS-4

UCS-4

UCS4

ISO-10646-UCS-4

UCS-4

UCS4

ISO-10646-UCS-2

UCS-2

UCS2

ISO-8859-1

ISO-8859-2

ISO-8859-3

ISO-8859-4

ISO-8859-5

ISO-8859-6

ISO-8859-7

ISO-8859-8

ISO-8859-9

ISO-2022-JP

SHIFT-JIS

SHIFT_JIS

Shift_JIS

EUC-JP

No handler found for encoding %d\n

Found registered handler for encoding %s\n

UTF-8

UTF-8

UTF-8

UTF-8

Found iconv handler for encoding %s\n

iconv : problems with filters for '%s'\n

No handler found for encoding %s\n

none of the above

t fit into the encoding we want), or * -3 if there the last byte can

t fit into the encoding we want), or */ int xmlCharEncFirstLineInt(xmlCharEncodingHandler *handler, xmlBufferPtr out, xmlBufferPtr in, int len) { int ret = -2; int written; int toconv; if (handler == NULL) return(-1); if (out == NULL) return(-1); if (in == NULL) return(-1); /* calculate space available */ written = out->size - out->use; toconv = in->use; /* * echo

1.0

UCS4

| wc -c => 38 * 45 chars should be sufficient to reach the end of the encoding * declaration without going too far inside the document content. * on UTF-16 this means 90bytes, on UCS4 this means 180 * The actual value depending on guessed encoding is passed as @len * if provided */ if (len >= 0) { if (toconv > len) toconv = len; } else { if (toconv > 180) toconv = 180; } if (toconv * 2 >= written) { xmlBufferGrow(out, toconv); written = out->size - out->use - 1; } if (handler->input != NULL) { ret = handler->input(&out->content[out->use], &written, in->content, &toconv); xmlBufferShrink(in, toconv); out->use += written; out->content[out->use] = 0; } #ifdef LIBXML_ICONV_ENABLED else if (handler->iconv_in != NULL) { ret = xmlIconvWrapper(handler->iconv_in, &out->content[out->use], &written, in->content, &toconv); xmlBufferShrink(in, toconv); out->use += written; out->content[out->use] = 0; if (ret == -1) ret = -3; } #endif /* LIBXML_ICONV_ENABLED */ #ifdef DEBUG_ENCODING switch (ret) { case 0: xmlGenericError(xmlGenericErrorContext, "converted %d bytes to %d bytes of input\n", toconv, written); break; case -1: xmlGenericError(xmlGenericErrorContext,"converted %d bytes to %d bytes of input, %d left\n", toconv, written, in->use); break; case -2: xmlGenericError(xmlGenericErrorContext, "input conversion failed due to input error\n"); break; case -3: xmlGenericError(xmlGenericErrorContext,"converted %d bytes to %d bytes of input, %d left\n", toconv, written, in->use); break; default: xmlGenericError(xmlGenericErrorContext,"Unknown input conversion failed %d\n", ret); } #endif /* DEBUG_ENCODING */ /* * Ignore when input buffer is not on a boundary */ if (ret == -3) ret = 0; if (ret == -1) ret = 0; return(ret); } /** * xmlCharEncFirstLine: * @handler: char enconding transformation data structure * @out: an xmlBuffer for the output. * @in: an xmlBuffer for the input * * Front-end for the encoding handler input function, but handle only * the very first line, i.e. limit itself to 45 chars. * * Returns the number of byte written if success, or * -1 general error * -2 if the transcoding fails (for *in is not valid utf8 string or * the result of transformation can

t fit into the encoding we want), or */ int xmlCharEncInFunc(xmlCharEncodingHandler * handler, xmlBufferPtr out, xmlBufferPtr in) { int ret = -2; int written; int toconv; if (handler == NULL) return (-1); if (out == NULL) return (-1); if (in == NULL) return (-1); toconv = in->use; if (toconv == 0) return (0); written = out->size - out->use; if (toconv * 2 >= written) { xmlBufferGrow(out, out->size + toconv * 2); written = out->size - out->use - 1; } if (handler->input != NULL) { ret = handler->input(&out->content[out->use], &written, in->content, &toconv); xmlBufferShrink(in, toconv); out->use += written; out->content[out->use] = 0; } #ifdef LIBXML_ICONV_ENABLED else if (handler->iconv_in != NULL) { ret = xmlIconvWrapper(handler->iconv_in, &out->content[out->use], &written, in->content, &toconv); xmlBufferShrink(in, toconv); out->use += written; out->content[out->use] = 0; if (ret == -1) ret = -3; } #endif /* LIBXML_ICONV_ENABLED */ switch (ret) { case 0: #ifdef DEBUG_ENCODING xmlGenericError(xmlGenericErrorContext, "converted %d bytes to %d bytes of input\n", toconv, written); #endif break; case -1: #ifdef DEBUG_ENCODING xmlGenericError(xmlGenericErrorContext, "converted %d bytes to %d bytes of input, %d left\n", toconv, written, in->use); #endif break; case -3: #ifdef DEBUG_ENCODING xmlGenericError(xmlGenericErrorContext, "converted %d bytes to %d bytes of input, %d left\n", toconv, written, in->use); #endif break; case -2: { char buf[50]; snprintf(&buf[0], 49, "0x%02X 0x%02X 0x%02X 0x%02X", in->content[0], in->content[1], in->content[2], in->content[3]); buf[49] = 0; xmlEncodingErr(XML_I18N_CONV_FAILED, "input conversion failed due to input error, bytes %s\n", buf); } } /* * Ignore when input buffer is not on a boundary */ if (ret == -3) ret = 0; return (written? written : ret); } /** * xmlCharEncOutFunc: * @handler: char enconding transformation data structure * @out: an xmlBuffer for the output. * @in: an xmlBuffer for the input * * Generic front-end for the encoding handler output function * a first call with @in == NULL has to be made firs to initiate the * output in case of non-stateless encoding needing to initiate their * state or the output (like the BOM in UTF16). * In case of UTF8 sequence conversion errors for the given encoder, * the content will be automatically remapped to a CharRef sequence. * * Returns the number of byte written if success, or * -1 general error * -2 if the transcoding fails (for *in is not valid utf8 string or * the result of transformation can

/0

initialized encoder\n

xmlCharEncOutFunc: no output function !\n

converted %d bytes to %d bytes of output\n

output conversion failed by lack of space\n

converted %d bytes to %d bytes of output %d left\n

handling output conversion error\n

Bytes: 0x%02X 0x%02X 0x%02X 0x%02X\n

&#%d;

0x%02X 0x%02X 0x%02X 0x%02X

output conversion failed due to conv error, bytes %s\n



failed to close the encoding handler\n

closed the encoding handler\n

\x00\x00\x01\x05\x02\x04\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\x00\x00\xa4\x00\x00\xa7\xa8\x00\x00\x00\x00\xad\x00\x00

\xb0\x00\x00\x00\xb4\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00

\x00\x00\xc3\xe3\xa1\xb1\xc6\xe6\x00\x00\x00\x00\xc8\xe8\xcf\xef

\xd0\xf0\x00\x00\x00\x00\x00\x00\xca\xea\xcc\xec\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc5\xe5\x00\x00\xa5\xb5\x00

\x00\x00\x00\x00\x00\x00\x00\xb7\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\xa2\xff\x00\xb2\x00\xbd\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\xa3\xb3\xd1\xf1\x00\x00\xd2\xf2\x00\x00\x00\x00\x00\x00\x00

\xd5\xf5\x00\x00\xc0\xe0\x00\x00\xd8\xf8\xa6\xb6\x00\x00\xaa\xba

\xa9\xb9\xde\xfe\xab\xbb\x00\x00\x00\x00\x00\x00\x00\x00\xd9\xf9

\xdb\xfb\x00\x00\x00\x00\x00\x00\x00\xac\xbc\xaf\xbf\xae\xbe\x00

\x00\xc1\xc2\x00\xc4\x00\x00\xc7\x00\xc9\x00\xcb\x00\xcd\xce\x00

\x00\x00\x00\xd3\xd4\x00\xd6\xd7\x00\x00\xda\x00\xdc\xdd\x00\xdf

\x00\xe1\xe2\x00\xe4\x00\x00\xe7\x00\xe9\x00\xeb\x00\xed\xee\x00

\x00\x00\x00\xf3\xf4\x00\xf6\xf7\x00\x00\xfa\x00\xfc\xfd\x00\x00

\x04\x00\x01\x06\x02\x05\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\x00\xa3\xa4\x00\x00\xa7\xa8\x00\x00\x00\x00\xad\x00\x00

\xb0\x00\xb2\xb3\xb4\xb5\x00\xb7\xb8\x00\x00\x00\x00\xbd\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\xc6\xe6\xc5\xe5\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd8\xf8\xab\xbb

\xd5\xf5\x00\x00\xa6\xb6\xa1\xb1\x00\x00\x00\x00\x00\x00\x00\x00

\xa9\xb9\x00\x00\xac\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\xa2\xff\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\xfe\xaa\xba

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdd\xfd\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xaf\xbf\x00\x00\x00

\xc0\xc1\xc2\x00\xc4\x00\x00\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf

\x00\xd1\xd2\xd3\xd4\x00\xd6\xd7\x00\xd9\xda\xdb\xdc\x00\x00\xdf

\xe0\xe1\xe2\x00\xe4\x00\x00\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef

\x00\xf1\xf2\xf3\xf4\x00\xf6\xf7\x00\xf9\xfa\xfb\xfc\x00\x00\x00

\x00\x00\x01\x05\x02\x03\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\x00\x00\xa4\x00\x00\xa7\xa8\x00\x00\x00\x00\xad\x00\xaf

\xb0\x00\x00\x00\xb4\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00

\xc0\xe0\x00\x00\xa1\xb1\x00\x00\x00\x00\x00\x00\xc8\xe8\x00\x00

\xd0\xf0\xaa\xba\x00\x00\xcc\xec\xca\xea\x00\x00\x00\x00\x00\x00

\x00\x00\xab\xbb\x00\x00\x00\x00\xa5\xb5\xcf\xef\x00\x00\xc7\xe7

\x00\x00\x00\x00\x00\x00\xd3\xf3\xa2\x00\x00\xa6\xb6\x00\x00\x00

\x00\x00\x00\x00\x00\xd1\xf1\x00\x00\x00\xbd\xbf\xd2\xf2\x00\x00

\x00\x00\x00\x00\x00\x00\xa3\xb3\x00\x00\x00\x00\x00\x00\x00\x00

\xa9\xb9\x00\x00\x00\x00\xac\xbc\xdd\xfd\xde\xfe\x00\x00\x00\x00

\x00\x00\xd9\xf9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xae\xbe\x00

\x00\x00\x00\x00\x00\x00\x00\xb7\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\xb2\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\xc1\xc2\xc3\xc4\xc5\xc6\x00\x00\xc9\x00\xcb\x00\xcd\xce\x00

\x00\x00\x00\x00\xd4\xd5\xd6\xd7\xd8\x00\xda\xdb\xdc\x00\x00\xdf

\x00\xe1\xe2\xe3\xe4\xe5\xe6\x00\x00\xe9\x00\xeb\x00\xed\xee\x00

\x00\x00\x00\x00\xf4\xf5\xf6\xf7\xf8\x00\xfa\xfb\xfc\x00\x00\x00

\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x02\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\x00\x00\x00\x00\x00\xfd\x00\x00\x00\x00\x00\xad\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\x00\xae\xaf

\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf

\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf

\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf

\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef

\x00\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\x00\xfe\xff

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x02\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x03\x04\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\x00\x00\xa4\x00\x00\x00\x00\x00\x00\x00\x00\xad\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbb\x00\x00\x00\xbf

\x00\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf

\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\x00\x00\x00\x00\x00

\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef

\xf0\xf1\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x04\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x06

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\x00\xa3\x00\x00\xa6\xa7\xa8\xa9\x00\xab\xac\xad\x00\x00

\xb0\xb1\xb2\xb3\x00\x00\x00\xb7\x00\x00\x00\xbb\x00\xbd\x00\x00

\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\xaf\x00\x00\xa1\xa2\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\xb4\xb5\xb6\x00\xb8\xb9\xba\x00\xbc\x00\xbe\xbf

\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf

\xd0\xd1\x00\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf

\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef

\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x02\x00\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\x00\xab\xac\xad\xae\xaf

\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\x00\xbb\xbc\xbd\xbe\x00

\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\xaa\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\xba\x00\x00\x00\x00\x00\x00\x00\x00

\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfd\xfe

\x00\x00\x00\x00\x00\x00\x00\xdf\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef

\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x01\x02\x03\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf

\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf

\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf

\x00\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\x00\x00\xdf

\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef

\x00\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\x00\x00\xff

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\xf0

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xdd\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\xfe

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x01\x06\x02\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\x00\x00\x00\x00\x00\xa7\x00\x00\x00\x00\x00\xad\x00\x00

\xb0\x00\x00\x00\x00\x00\x00\xb7\x00\x00\x00\x00\x00\x00\x00\x00

\xc0\xe0\x00\x00\xa1\xb1\x00\x00\x00\x00\x00\x00\xc8\xe8\x00\x00

\xa9\xb9\xa2\xb2\x00\x00\xcc\xec\xca\xea\x00\x00\x00\x00\x00\x00

\x00\x00\xa3\xb3\x00\x00\x00\x00\xa5\xb5\xa4\xb4\x00\x00\xc7\xe7

\x00\x00\x00\x00\x00\x00\xa6\xb6\xff\x00\x00\xa8\xb8\x00\x00\x00

\x00\x00\x00\x00\x00\xd1\xf1\x00\x00\x00\xaf\xbf\xd2\xf2\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xaa\xba\x00\x00\x00\x00\xab\xbb\xd7\xf7\xae\xbe\x00\x00\x00\x00

\x00\x00\xd9\xf9\x00\x00\x00\x00\x00\x00\x00\x00\x00\xac\xbc\x00

\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\xbd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\xc1\xc2\xc3\xc4\xc5\xc6\x00\x00\xc9\x00\xcb\x00\xcd\xce\xcf

\xd0\x00\x00\xd3\xd4\xd5\xd6\x00\xd8\x00\xda\xdb\xdc\xdd\xde\xdf

\x00\xe1\xe2\xe3\xe4\xe5\xe6\x00\x00\xe9\x00\xeb\x00\xed\xee\xef

\xf0\x00\x00\xf3\xf4\xf5\xf6\x00\xf8\x00\xfa\xfb\xfc\xfd\xfe\x00

\x04\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x03\x05\x00\x00\x00\x00\x00\x00

\x00\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf

\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf

\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf

\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\x00\x00\x00\x00\xdf

\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef

\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x01\x04\x06\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\xa2\xa3\xa4\x00\xa6\xa7\x00\xa9\x00\xab\xac\xad\xae\x00

\xb0\xb1\xb2\xb3\x00\xb5\xb6\xb7\x00\xb9\x00\xbb\xbc\xbd\xbe\x00

\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\xb4\xa1\xa5\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\xc4\xc5\xaf\x00\x00\xc9\x00\x00\x00\x00\x00\x00

\x00\x00\x00\xd3\x00\xd5\xd6\xd7\xa8\x00\x00\x00\xdc\x00\x00\xdf

\x00\x00\x00\x00\xe4\xe5\xbf\x00\x00\xe9\x00\x00\x00\x00\x00\x00

\x00\x00\x00\xf3\x00\xf5\xf6\xf7\xb8\x00\x00\x00\xfc\x00\x00\x00

\x00\xd9\xf9\xd1\xf1\xd2\xf2\x00\x00\x00\x00\x00\xd4\xf4\x00\x00

\x00\x00\x00\x00\x00\x00\xaa\xba\x00\x00\xda\xfa\x00\x00\x00\x00

\xd0\xf0\x00\x00\x00\x00\x00\x00\x00\x00\xdb\xfb\x00\x00\x00\x00

\x00\x00\xd8\xf8\x00\x00\x00\x00\x00\xca\xea\xdd\xfd\xde\xfe\x00

\xc2\xe2\x00\x00\xc0\xe0\xc3\xe3\x00\x00\x00\x00\xc8\xe8\x00\x00

\x00\x00\xc7\xe7\x00\x00\xcb\xeb\xc6\xe6\x00\x00\x00\x00\x00\x00

\x00\x00\xcc\xec\x00\x00\x00\x00\x00\x00\xce\xee\x00\x00\xc1\xe1

\x00\x00\x00\x00\x00\x00\xcd\xed\x00\x00\x00\xcf\xef\x00\x00\x00

\x00\x00\x01\x09\x04\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\x00\xa3\x00\x00\x00\xa7\x00\xa9\x00\x00\x00\xad\xae\x00

\x00\x00\x00\x00\x00\x00\xb6\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x03\x08\x05\x06\x00\x00\x00\x00

\x00\x00\xa1\xa2\x00\x00\x00\x00\x00\x00\xa6\xab\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb0\xb1

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\xa5\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xb2\xb3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xa8\xb8\xaa\xba\xbd\xbe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\xac\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\xd0\xf0\xde\xfe\xaf\x00\x00\x00\x00\x00\x00\x00

\xb4\xb5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\xb7\xb9\x00\x00\x00\x00\x00\x00\x00\x00

\xbb\xbf\x00\x00\x00\x00\x00\x00\x00\x00\xd7\xf7\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf

\x00\xd1\xd2\xd3\xd4\xd5\xd6\x00\xd8\xd9\xda\xdb\xdc\xdd\x00\xdf

\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef

\x00\xf1\xf2\xf3\xf4\xf5\xf6\x00\xf8\xf9\xfa\xfb\xfc\xfd\x00\xff

\x00\x00\x01\x05\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\xa1\xa2\xa3\x00\xa5\x00\xa7\x00\xa9\xaa\xab\xac\xad\xae\xaf

\xb0\xb1\xb2\xb3\x00\xb5\xb6\xb7\x00\xb9\xba\xbb\x00\x00\x00\xbf

\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\xbc\xbd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xa6\xa8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\xbe\x00\x00\x00\x00\xb4\xb8\x00

\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf

\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf

\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef

\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff

\x00\x00\x01\x08\x02\x03\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f

\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f

\xa0\x00\x00\x00\x00\x00\x00\xa7\x00\xa9\x00\xab\x00\xad\x00\x00

\xb0\xb1\x00\x00\x00\x00\xb6\xb7\x00\x00\x00\xbb\x00\x00\x00\x00

\x00\x00\xc3\xe3\xa1\xa2\xc5\xe5\x00\x00\x00\x00\xb2\xb9\x00\x00

\xd0\xf0\x00\x00\x00\x00\x00\x00\xdd\xfd\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\xa3\xb3\xd1\xf1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xd5\xf5\xbc\xbd\x00\x00\x00\x00\x00\x00\xd7\xf7\x00\x00\x00\x00

\xa6\xa8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xd8\xf8\x00\x00\x00\x00\x00\x00\xbe\xac\xae\xaf\xbf\xb4\xb8\x00

\x06\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb5\xa5\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\xaa\xba\xde\xfe\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00

\xc0\xc1\xc2\x00\xc4\x00\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf

\x00\x00\xd2\xd3\xd4\x00\xd6\x00\x00\xd9\xda\xdb\xdc\x00\x00\xdf

\xe0\xe1\xe2\x00\xe4\x00\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef

\x00\x00\xf2\xf3\xf4\x00\xf6\x00\x00\xf9\xfa\xfb\xfc\x00\x00\xff

ISO-8859-2

ISO-8859-3

ISO-8859-4

ISO-8859-5

ISO-8859-6

ISO-8859-7

ISO-8859-8

ISO-8859-9

ISO-8859-10

ISO-8859-11

ISO-8859-13

ISO-8859-14

ISO-8859-15

ISO-8859-16

elfgcchack.h

0x80)

0x80)

0xC0)

0xE0)

0x1F;

0xF0)

0x0F;

0xF8)

0x07;

0xC0)

0x80))

0x3F;

0x80)

0x80)

0x1F)

0xC0;

0x3F)

0x80;

0x80)

0x80)

0x80)

0xC0)

0xE0)

0x1F;

0xF0)

0x0F;

0xF8)

0x07;

0xC0)

0x80)

0x3F;

0xFF)

0xFC00)

0xD800)

0xFC00)

0xDC00)

0x03FF;

0x03FF;

0x10000;

0x80)

0x800)

0x1F)

0xC0;

0x10000)

0x0F)

0xE0;

0x07)

0xF0;

0x3F)

0x80;

0x80)

0xC0)

0xE0)

0x1F;

0xF0)

0x0F;

0xF8)

0x07;

0xC0)

0x80))

0x3F;

0x10000)

0x110000)

0x10000;

0xD800

0xDC00

0x03FF);

0xD800

0xDC00

0x03FF);

0xFF;

0xFE;

0xFC00)

0xD800)

0xFC00)

0xDC00)

0x03FF;

0x03FF;

0x10000;

0x80)

0x800)

0x1F)

0xC0;

0x10000)

0x0F)

0xE0;

0x07)

0xF0;

0x3F)

0x80;

0x80)

0xC0)

0xE0)

0x1F;

0xF0)

0x0F;

0xF8)

0x07;

0xC0)

0x80))

0x3F;

0x10000)

0x110000)

0x10000;

0xD800

0xDC00

0x03FF);

0xD800

0xDC00

0x03FF);

0x00)

0x00)

0x00)

0x3C))

0x3C)

0x00)

0x00)

0x00))

0x00)

0x00)

0x3C)

0x00))

0x00)

0x3C)

0x00)

0x00))

0x4C)

0x6F)

0xA7)

0x94))

0x3C)

0x3F)

0x78)

0x6D))

0x3C)

0x00)

0x3F)

0x00))

0x00)

0x3C)

0x00)

0x3F))

0xEF)

0xBB)

0xBF))

0xFE)

0xFF))

0xFF)

0xFE))

0x1234;

0x12)

0x34)

0x%02X

0x%02X

0x%02X

0x%02X",

0x%02X

0x%02X

0x%02X

0x%02X\n",

0x%02X

0x%02X

0x%02X

0x%02X",

0x80)

0xC0)

0xE0)

0xC0)

0x80)

0x3F;

0x1F;

0xF0)

0xC0)

0x80)

0xC0)

0x80)

0x3F;

0x3F;

0x0F;

0x80)

0x80];

0x800)

0x1F)

0xC0;

0x3F)

0x80;

0x0F)

0xE0;

0x3F)

0x80;

0x3F)

0x80;

0x80

0x80)

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x0104,

0x02d8,

0x0141,

0x00a4,

0x013d,

0x015a,

0x00a7,

0x00a8,

0x0160,

0x015e,

0x0164,

0x0179,

0x00ad,

0x017d,

0x017b,

0x00b0,

0x0105,

0x02db,

0x0142,

0x00b4,

0x013e,

0x015b,

0x02c7,

0x00b8,

0x0161,

0x015f,

0x0165,

0x017a,

0x02dd,

0x017e,

0x017c,

0x0154,

0x00c1,

0x00c2,

0x0102,

0x00c4,

0x0139,

0x0106,

0x00c7,

0x010c,

0x00c9,

0x0118,

0x00cb,

0x011a,

0x00cd,

0x00ce,

0x010e,

0x0110,

0x0143,

0x0147,

0x00d3,

0x00d4,

0x0150,

0x00d6,

0x00d7,

0x0158,

0x016e,

0x00da,

0x0170,

0x00dc,

0x00dd,

0x0162,

0x00df,

0x0155,

0x00e1,

0x00e2,

0x0103,

0x00e4,

0x013a,

0x0107,

0x00e7,

0x010d,

0x00e9,

0x0119,

0x00eb,

0x011b,

0x00ed,

0x00ee,

0x010f,

0x0111,

0x0144,

0x0148,

0x00f3,

0x00f4,

0x0151,

0x00f6,

0x00f7,

0x0159,

0x016f,

0x00fa,

0x0171,

0x00fc,

0x00fd,

0x0163,

0x02d9,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x0126,

0x02d8,

0x00a3,

0x00a4,

0x0000,

0x0124,

0x00a7,

0x00a8,

0x0130,

0x015e,

0x011e,

0x0134,

0x00ad,

0x0000,

0x017b,

0x00b0,

0x0127,

0x00b2,

0x00b3,

0x00b4,

0x00b5,

0x0125,

0x00b7,

0x00b8,

0x0131,

0x015f,

0x011f,

0x0135,

0x00bd,

0x0000,

0x017c,

0x00c0,

0x00c1,

0x00c2,

0x0000,

0x00c4,

0x010a,

0x0108,

0x00c7,

0x00c8,

0x00c9,

0x00ca,

0x00cb,

0x00cc,

0x00cd,

0x00ce,

0x00cf,

0x0000,

0x00d1,

0x00d2,

0x00d3,

0x00d4,

0x0120,

0x00d6,

0x00d7,

0x011c,

0x00d9,

0x00da,

0x00db,

0x00dc,

0x016c,

0x015c,

0x00df,

0x00e0,

0x00e1,

0x00e2,

0x0000,

0x00e4,

0x010b,

0x0109,

0x00e7,

0x00e8,

0x00e9,

0x00ea,

0x00eb,

0x00ec,

0x00ed,

0x00ee,

0x00ef,

0x0000,

0x00f1,

0x00f2,

0x00f3,

0x00f4,

0x0121,

0x00f6,

0x00f7,

0x011d,

0x00f9,

0x00fa,

0x00fb,

0x00fc,

0x016d,

0x015d,

0x02d9,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x0104,

0x0138,

0x0156,

0x00a4,

0x0128,

0x013b,

0x00a7,

0x00a8,

0x0160,

0x0112,

0x0122,

0x0166,

0x00ad,

0x017d,

0x00af,

0x00b0,

0x0105,

0x02db,

0x0157,

0x00b4,

0x0129,

0x013c,

0x02c7,

0x00b8,

0x0161,

0x0113,

0x0123,

0x0167,

0x014a,

0x017e,

0x014b,

0x0100,

0x00c1,

0x00c2,

0x00c3,

0x00c4,

0x00c5,

0x00c6,

0x012e,

0x010c,

0x00c9,

0x0118,

0x00cb,

0x0116,

0x00cd,

0x00ce,

0x012a,

0x0110,

0x0145,

0x014c,

0x0136,

0x00d4,

0x00d5,

0x00d6,

0x00d7,

0x00d8,

0x0172,

0x00da,

0x00db,

0x00dc,

0x0168,

0x016a,

0x00df,

0x0101,

0x00e1,

0x00e2,

0x00e3,

0x00e4,

0x00e5,

0x00e6,

0x012f,

0x010d,

0x00e9,

0x0119,

0x00eb,

0x0117,

0x00ed,

0x00ee,

0x012b,

0x0111,

0x0146,

0x014d,

0x0137,

0x00f4,

0x00f5,

0x00f6,

0x00f7,

0x00f8,

0x0173,

0x00fa,

0x00fb,

0x00fc,

0x0169,

0x016b,

0x02d9,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x0401,

0x0402,

0x0403,

0x0404,

0x0405,

0x0406,

0x0407,

0x0408,

0x0409,

0x040a,

0x040b,

0x040c,

0x00ad,

0x040e,

0x040f,

0x0410,

0x0411,

0x0412,

0x0413,

0x0414,

0x0415,

0x0416,

0x0417,

0x0418,

0x0419,

0x041a,

0x041b,

0x041c,

0x041d,

0x041e,

0x041f,

0x0420,

0x0421,

0x0422,

0x0423,

0x0424,

0x0425,

0x0426,

0x0427,

0x0428,

0x0429,

0x042a,

0x042b,

0x042c,

0x042d,

0x042e,

0x042f,

0x0430,

0x0431,

0x0432,

0x0433,

0x0434,

0x0435,

0x0436,

0x0437,

0x0438,

0x0439,

0x043a,

0x043b,

0x043c,

0x043d,

0x043e,

0x043f,

0x0440,

0x0441,

0x0442,

0x0443,

0x0444,

0x0445,

0x0446,

0x0447,

0x0448,

0x0449,

0x044a,

0x044b,

0x044c,

0x044d,

0x044e,

0x044f,

0x2116,

0x0451,

0x0452,

0x0453,

0x0454,

0x0455,

0x0456,

0x0457,

0x0458,

0x0459,

0x045a,

0x045b,

0x045c,

0x00a7,

0x045e,

0x045f,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x0000,

0x0000,

0x0000,

0x00a4,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x060c,

0x00ad,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x061b,

0x0000,

0x0000,

0x0000,

0x061f,

0x0000,

0x0621,

0x0622,

0x0623,

0x0624,

0x0625,

0x0626,

0x0627,

0x0628,

0x0629,

0x062a,

0x062b,

0x062c,

0x062d,

0x062e,

0x062f,

0x0630,

0x0631,

0x0632,

0x0633,

0x0634,

0x0635,

0x0636,

0x0637,

0x0638,

0x0639,

0x063a,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0640,

0x0641,

0x0642,

0x0643,

0x0644,

0x0645,

0x0646,

0x0647,

0x0648,

0x0649,

0x064a,

0x064b,

0x064c,

0x064d,

0x064e,

0x064f,

0x0650,

0x0651,

0x0652,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x2018,

0x2019,

0x00a3,

0x0000,

0x0000,

0x00a6,

0x00a7,

0x00a8,

0x00a9,

0x0000,

0x00ab,

0x00ac,

0x00ad,

0x0000,

0x2015,

0x00b0,

0x00b1,

0x00b2,

0x00b3,

0x0384,

0x0385,

0x0386,

0x00b7,

0x0388,

0x0389,

0x038a,

0x00bb,

0x038c,

0x00bd,

0x038e,

0x038f,

0x0390,

0x0391,

0x0392,

0x0393,

0x0394,

0x0395,

0x0396,

0x0397,

0x0398,

0x0399,

0x039a,

0x039b,

0x039c,

0x039d,

0x039e,

0x039f,

0x03a0,

0x03a1,

0x0000,

0x03a3,

0x03a4,

0x03a5,

0x03a6,

0x03a7,

0x03a8,

0x03a9,

0x03aa,

0x03ab,

0x03ac,

0x03ad,

0x03ae,

0x03af,

0x03b0,

0x03b1,

0x03b2,

0x03b3,

0x03b4,

0x03b5,

0x03b6,

0x03b7,

0x03b8,

0x03b9,

0x03ba,

0x03bb,

0x03bc,

0x03bd,

0x03be,

0x03bf,

0x03c0,

0x03c1,

0x03c2,

0x03c3,

0x03c4,

0x03c5,

0x03c6,

0x03c7,

0x03c8,

0x03c9,

0x03ca,

0x03cb,

0x03cc,

0x03cd,

0x03ce,

0x0000,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x0000,

0x00a2,

0x00a3,

0x00a4,

0x00a5,

0x00a6,

0x00a7,

0x00a8,

0x00a9,

0x00d7,

0x00ab,

0x00ac,

0x00ad,

0x00ae,

0x00af,

0x00b0,

0x00b1,

0x00b2,

0x00b3,

0x00b4,

0x00b5,

0x00b6,

0x00b7,

0x00b8,

0x00b9,

0x00f7,

0x00bb,

0x00bc,

0x00bd,

0x00be,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x0000,

0x2017,

0x05d0,

0x05d1,

0x05d2,

0x05d3,

0x05d4,

0x05d5,

0x05d6,

0x05d7,

0x05d8,

0x05d9,

0x05da,

0x05db,

0x05dc,

0x05dd,

0x05de,

0x05df,

0x05e0,

0x05e1,

0x05e2,

0x05e3,

0x05e4,

0x05e5,

0x05e6,

0x05e7,

0x05e8,

0x05e9,

0x05ea,

0x0000,

0x0000,

0x200e,

0x200f,

0x0000,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x00a1,

0x00a2,

0x00a3,

0x00a4,

0x00a5,

0x00a6,

0x00a7,

0x00a8,

0x00a9,

0x00aa,

0x00ab,

0x00ac,

0x00ad,

0x00ae,

0x00af,

0x00b0,

0x00b1,

0x00b2,

0x00b3,

0x00b4,

0x00b5,

0x00b6,

0x00b7,

0x00b8,

0x00b9,

0x00ba,

0x00bb,

0x00bc,

0x00bd,

0x00be,

0x00bf,

0x00c0,

0x00c1,

0x00c2,

0x00c3,

0x00c4,

0x00c5,

0x00c6,

0x00c7,

0x00c8,

0x00c9,

0x00ca,

0x00cb,

0x00cc,

0x00cd,

0x00ce,

0x00cf,

0x011e,

0x00d1,

0x00d2,

0x00d3,

0x00d4,

0x00d5,

0x00d6,

0x00d7,

0x00d8,

0x00d9,

0x00da,

0x00db,

0x00dc,

0x0130,

0x015e,

0x00df,

0x00e0,

0x00e1,

0x00e2,

0x00e3,

0x00e4,

0x00e5,

0x00e6,

0x00e7,

0x00e8,

0x00e9,

0x00ea,

0x00eb,

0x00ec,

0x00ed,

0x00ee,

0x00ef,

0x011f,

0x00f1,

0x00f2,

0x00f3,

0x00f4,

0x00f5,

0x00f6,

0x00f7,

0x00f8,

0x00f9,

0x00fa,

0x00fb,

0x00fc,

0x0131,

0x015f,

0x00ff,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x0104,

0x0112,

0x0122,

0x012a,

0x0128,

0x0136,

0x00a7,

0x013b,

0x0110,

0x0160,

0x0166,

0x017d,

0x00ad,

0x016a,

0x014a,

0x00b0,

0x0105,

0x0113,

0x0123,

0x012b,

0x0129,

0x0137,

0x00b7,

0x013c,

0x0111,

0x0161,

0x0167,

0x017e,

0x2015,

0x016b,

0x014b,

0x0100,

0x00c1,

0x00c2,

0x00c3,

0x00c4,

0x00c5,

0x00c6,

0x012e,

0x010c,

0x00c9,

0x0118,

0x00cb,

0x0116,

0x00cd,

0x00ce,

0x00cf,

0x00d0,

0x0145,

0x014c,

0x00d3,

0x00d4,

0x00d5,

0x00d6,

0x0168,

0x00d8,

0x0172,

0x00da,

0x00db,

0x00dc,

0x00dd,

0x00de,

0x00df,

0x0101,

0x00e1,

0x00e2,

0x00e3,

0x00e4,

0x00e5,

0x00e6,

0x012f,

0x010d,

0x00e9,

0x0119,

0x00eb,

0x0117,

0x00ed,

0x00ee,

0x00ef,

0x00f0,

0x0146,

0x014d,

0x00f3,

0x00f4,

0x00f5,

0x00f6,

0x0169,

0x00f8,

0x0173,

0x00fa,

0x00fb,

0x00fc,

0x00fd,

0x00fe,

0x0138,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x0e01,

0x0e02,

0x0e03,

0x0e04,

0x0e05,

0x0e06,

0x0e07,

0x0e08,

0x0e09,

0x0e0a,

0x0e0b,

0x0e0c,

0x0e0d,

0x0e0e,

0x0e0f,

0x0e10,

0x0e11,

0x0e12,

0x0e13,

0x0e14,

0x0e15,

0x0e16,

0x0e17,

0x0e18,

0x0e19,

0x0e1a,

0x0e1b,

0x0e1c,

0x0e1d,

0x0e1e,

0x0e1f,

0x0e20,

0x0e21,

0x0e22,

0x0e23,

0x0e24,

0x0e25,

0x0e26,

0x0e27,

0x0e28,

0x0e29,

0x0e2a,

0x0e2b,

0x0e2c,

0x0e2d,

0x0e2e,

0x0e2f,

0x0e30,

0x0e31,

0x0e32,

0x0e33,

0x0e34,

0x0e35,

0x0e36,

0x0e37,

0x0e38,

0x0e39,

0x0e3a,

0x0000,

0x0000,

0x0000,

0x0000,

0x0e3f,

0x0e40,

0x0e41,

0x0e42,

0x0e43,

0x0e44,

0x0e45,

0x0e46,

0x0e47,

0x0e48,

0x0e49,

0x0e4a,

0x0e4b,

0x0e4c,

0x0e4d,

0x0e4e,

0x0e4f,

0x0e50,

0x0e51,

0x0e52,

0x0e53,

0x0e54,

0x0e55,

0x0e56,

0x0e57,

0x0e58,

0x0e59,

0x0e5a,

0x0e5b,

0x0000,

0x0000,

0x0000,

0x0000,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x201d,

0x00a2,

0x00a3,

0x00a4,

0x201e,

0x00a6,

0x00a7,

0x00d8,

0x00a9,

0x0156,

0x00ab,

0x00ac,

0x00ad,

0x00ae,

0x00c6,

0x00b0,

0x00b1,

0x00b2,

0x00b3,

0x201c,

0x00b5,

0x00b6,

0x00b7,

0x00f8,

0x00b9,

0x0157,

0x00bb,

0x00bc,

0x00bd,

0x00be,

0x00e6,

0x0104,

0x012e,

0x0100,

0x0106,

0x00c4,

0x00c5,

0x0118,

0x0112,

0x010c,

0x00c9,

0x0179,

0x0116,

0x0122,

0x0136,

0x012a,

0x013b,

0x0160,

0x0143,

0x0145,

0x00d3,

0x014c,

0x00d5,

0x00d6,

0x00d7,

0x0172,

0x0141,

0x015a,

0x016a,

0x00dc,

0x017b,

0x017d,

0x00df,

0x0105,

0x012f,

0x0101,

0x0107,

0x00e4,

0x00e5,

0x0119,

0x0113,

0x010d,

0x00e9,

0x017a,

0x0117,

0x0123,

0x0137,

0x012b,

0x013c,

0x0161,

0x0144,

0x0146,

0x00f3,

0x014d,

0x00f5,

0x00f6,

0x00f7,

0x0173,

0x0142,

0x015b,

0x016b,

0x00fc,

0x017c,

0x017e,

0x2019,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x1e02,

0x1e03,

0x00a3,

0x010a,

0x010b,

0x1e0a,

0x00a7,

0x1e80,

0x00a9,

0x1e82,

0x1e0b,

0x1ef2,

0x00ad,

0x00ae,

0x0178,

0x1e1e,

0x1e1f,

0x0120,

0x0121,

0x1e40,

0x1e41,

0x00b6,

0x1e56,

0x1e81,

0x1e57,

0x1e83,

0x1e60,

0x1ef3,

0x1e84,

0x1e85,

0x1e61,

0x00c0,

0x00c1,

0x00c2,

0x00c3,

0x00c4,

0x00c5,

0x00c6,

0x00c7,

0x00c8,

0x00c9,

0x00ca,

0x00cb,

0x00cc,

0x00cd,

0x00ce,

0x00cf,

0x0174,

0x00d1,

0x00d2,

0x00d3,

0x00d4,

0x00d5,

0x00d6,

0x1e6a,

0x00d8,

0x00d9,

0x00da,

0x00db,

0x00dc,

0x00dd,

0x0176,

0x00df,

0x00e0,

0x00e1,

0x00e2,

0x00e3,

0x00e4,

0x00e5,

0x00e6,

0x00e7,

0x00e8,

0x00e9,

0x00ea,

0x00eb,

0x00ec,

0x00ed,

0x00ee,

0x00ef,

0x0175,

0x00f1,

0x00f2,

0x00f3,

0x00f4,

0x00f5,

0x00f6,

0x1e6b,

0x00f8,

0x00f9,

0x00fa,

0x00fb,

0x00fc,

0x00fd,

0x0177,

0x00ff,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x00a1,

0x00a2,

0x00a3,

0x20ac,

0x00a5,

0x0160,

0x00a7,

0x0161,

0x00a9,

0x00aa,

0x00ab,

0x00ac,

0x00ad,

0x00ae,

0x00af,

0x00b0,

0x00b1,

0x00b2,

0x00b3,

0x017d,

0x00b5,

0x00b6,

0x00b7,

0x017e,

0x00b9,

0x00ba,

0x00bb,

0x0152,

0x0153,

0x0178,

0x00bf,

0x00c0,

0x00c1,

0x00c2,

0x00c3,

0x00c4,

0x00c5,

0x00c6,

0x00c7,

0x00c8,

0x00c9,

0x00ca,

0x00cb,

0x00cc,

0x00cd,

0x00ce,

0x00cf,

0x00d0,

0x00d1,

0x00d2,

0x00d3,

0x00d4,

0x00d5,

0x00d6,

0x00d7,

0x00d8,

0x00d9,

0x00da,

0x00db,

0x00dc,

0x00dd,

0x00de,

0x00df,

0x00e0,

0x00e1,

0x00e2,

0x00e3,

0x00e4,

0x00e5,

0x00e6,

0x00e7,

0x00e8,

0x00e9,

0x00ea,

0x00eb,

0x00ec,

0x00ed,

0x00ee,

0x00ef,

0x00f0,

0x00f1,

0x00f2,

0x00f3,

0x00f4,

0x00f5,

0x00f6,

0x00f7,

0x00f8,

0x00f9,

0x00fa,

0x00fb,

0x00fc,

0x00fd,

0x00fe,

0x00ff,

0x0080,

0x0081,

0x0082,

0x0083,

0x0084,

0x0085,

0x0086,

0x0087,

0x0088,

0x0089,

0x008a,

0x008b,

0x008c,

0x008d,

0x008e,

0x008f,

0x0090,

0x0091,

0x0092,

0x0093,

0x0094,

0x0095,

0x0096,

0x0097,

0x0098,

0x0099,

0x009a,

0x009b,

0x009c,

0x009d,

0x009e,

0x009f,

0x00a0,

0x0104,

0x0105,

0x0141,

0x20ac,

0x201e,

0x0160,

0x00a7,

0x0161,

0x00a9,

0x0218,

0x00ab,

0x0179,

0x00ad,

0x017a,

0x017b,

0x00b0,

0x00b1,

0x010c,

0x0142,

0x017d,

0x201d,

0x00b6,

0x00b7,

0x017e,

0x010d,

0x0219,

0x00bb,

0x0152,

0x0153,

0x0178,

0x017c,

0x00c0,

0x00c1,

0x00c2,

0x0102,

0x00c4,

0x0106,

0x00c6,

0x00c7,

0x00c8,

0x00c9,

0x00ca,

0x00cb,

0x00cc,

0x00cd,

0x00ce,

0x00cf,

0x0110,

0x0143,

0x00d2,

0x00d3,

0x00d4,

0x0150,

0x00d6,

0x015a,

0x0170,

0x00d9,

0x00da,

0x00db,

0x00dc,

0x0118,

0x021a,

0x00df,

0x00e0,

0x00e1,

0x00e2,

0x0103,

0x00e4,

0x0107,

0x00e6,

0x00e7,

0x00e8,

0x00e9,

0x00ea,

0x00eb,

0x00ec,

0x00ed,

0x00ee,

0x00ef,

0x0111,

0x0144,

0x00f2,

0x00f3,

0x00f4,

0x0151,

0x00f6,

0x015b,

0x0171,

0x00f9,

0x00fa,

0x00fb,

0x00fc,

0x0119,

0x021b,

0x00ff,

Summary: interface for the encoding conversion functions Description: interface for the encoding conversion functions needed for XML basic encoding and iconv() support. Related specs are rfc2044 (UTF-8 and UTF-16) F. Yergeau Alis Technologies [ISO-10646] UTF-8 and UTF-16 in Annexes [ISO-8859-1] ISO Latin-1 characters codes. [UNICODE] The Unicode Consortium, "The Unicode Standard -- Worldwide Character Encoding -- Version 1.0", Addison- Wesley, Volume 1, 1991, Volume 2, 1992. UTF-8 is described in Unicode Technical Report #4. [US-ASCII] Coded Character Set--7-bit American Standard Code for Information Interchange, ANSI X3.4-1986. Copy: See Copyright for the status of this software. Author: Daniel Veillard

xmlCharEncoding: Predefined values for some standard encodings. Libxml does not do beforehand translation on UTF8 and ISOLatinX. It also supports ASCII, ISO-8859-1, and UTF16 (LE and BE) by default. Anything else would have to be translated to UTF8 before being given to the parser itself. The BOM for UTF16 and the encoding declaration are looked at and a converter is looked for at that point. If not found the parser stops here as asked by the XML REC. A converter can be registered by the user using xmlRegisterCharEncodingHandler but the current form doesn't allow stateful transcoding (a serious problem agreed !). If iconv has been found it will be used automatically and allow stateful transcoding, the simplest is then to be sure to enable iconv and to provide iconv libs for the encoding support needed. Note that the generic "UTF-16" is not a predefined value. Instead, only the specific UTF-16LE and UTF-16BE are present.

No char encoding detected

No char encoding detected

UTF-8

UTF-16 little endian

UTF-16 big endian

UCS-4 little endian

UCS-4 big endian

EBCDIC uh!

UCS-4 unusual ordering

UCS-4 unusual ordering

UCS-2

ISO-8859-1 ISO Latin 1

ISO-8859-2 ISO Latin 2

ISO-8859-3

ISO-8859-4

ISO-8859-5

ISO-8859-6

ISO-8859-7

ISO-8859-8

ISO-8859-9

ISO-2022-JP

Shift_JIS

EUC-JP

pure ASCII

xmlCharEncodingInputFunc: @out: a pointer to an array of bytes to store the UTF-8 result @outlen: the length of @out @in: a pointer to an array of chars in the original encoding @inlen: the length of @in Take a block of chars in the original encoding and try to convert it to an UTF-8 block of chars out. Returns the number of bytes written, -1 if lack of space, or -2 if the transcoding failed. The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable. The value of @outlen after return is the number of octets consumed.

xmlCharEncodingOutputFunc: @out: a pointer to an array of bytes to store the result @outlen: the length of @out @in: a pointer to an array of UTF-8 chars @inlen: the length of @in Take a block of UTF-8 chars in and try to convert it to another encoding. Note: a first call designed to produce heading info is called with in = NULL. If stateful this should also initialize the encoder state. Returns the number of bytes written, -1 if lack of space, or -2 if the transcoding failed. The value of @inlen after return is the number of octets consumed if the return value is positive, else unpredictiable. The value of @outlen after return is the number of octets produced.

Block defining the handlers for non UTF-8 encodings. If iconv is supported, there are two extra fields.

LIBXML_ICONV_ENABLED

Interfaces for encoding handlers.

Interfaces for encoding names and aliases.

Interfaces directly used by the parsers.

Export a few useful functions

LIBXML_OUTPUT_ENABLED

__XML_CHAR_ENCODING_H__

The Unicode Standard -- * Worldwide Character Encoding -- Version 1.0

C

UTF-16

C

