globals.c: definition and handling of the set of global variables of the library The bottom of this file is automatically generated by build_glob.py based on the description file global.data See Copyright for the status of this software. Gary Pennington <Gary.Pennington@uk.sun.com> daniel@veillard.com

#define DEBUG_GLOBALS

Helpful Macro

Mutex to protect "ForNewThreads" variables

xmlInitGlobals: Additional initialisation for multi-threading

xmlCleanupGlobals: Additional cleanup for multi-threading

All the user accessible global variables of the library

Memory allocation routines

xmlFree: @mem: an already allocated block of memory The variable holding the libxml free() implementation

xmlMalloc: @size: the size requested in bytes The variable holding the libxml malloc() implementation Returns a pointer to the newly allocated block or NULL in case of error

xmlMallocAtomic: @size: the size requested in bytes The variable holding the libxml malloc() implementation for atomic data (i.e. blocks not containings pointers), useful when using a garbage collecting allocator. Returns a pointer to the newly allocated block or NULL in case of error

xmlRealloc: @mem: an already allocated block of memory @size: the new size requested in bytes The variable holding the libxml realloc() implementation Returns a pointer to the newly reallocated block or NULL in case of error

xmlMemStrdup: @str: a zero terminated string The variable holding the libxml strdup() implementation Returns the copy of the string or NULL in case of error

DEBUG_MEMORY_LOCATION || DEBUG_MEMORY

xmlParserVersion: Constant string describing the internal version of the library

xmlBufferAllocScheme: Global setting, default allocation policy for buffers, default is XML_BUFFER_ALLOC_EXACT

xmlDefaultBufferSize: Global setting, default buffer size. Default value is BASE_BUFFER_SIZE

Parser defaults

oldXMLWDcompatibility: Global setting, DEPRECATED.

DEPRECATED

xmlParserDebugEntities: Global setting, asking the parser to print out debugging informations. while handling entities. Disabled by default

xmlDoValidityCheckingDefaultValue: Global setting, indicate that the parser should work in validating mode. Disabled by default.

xmlGetWarningsDefaultValue: Global setting, indicate that the parser should provide warnings. Activated by default.

xmlLoadExtDtdDefaultValue: Global setting, indicate that the parser should load DTD while not validating. Disabled by default.

xmlPedanticParserDefaultValue: Global setting, indicate that the parser be pedantic Disabled by default.

xmlLineNumbersDefaultValue: Global setting, indicate that the parser should store the line number in the content field of elements in the DOM tree. Disabled by default since this may not be safe for old classes of applicaton.

xmlKeepBlanksDefaultValue: Global setting, indicate that the parser should keep all blanks nodes found in the content Activated by default, this is actually needed to have the parser conformant to the XML Recommendation, however the option is kept for some applications since this was libxml1 default behaviour.

xmlSubstituteEntitiesDefaultValue: Global setting, indicate that the parser should not generate entity references but replace them with the actual content of the entity Disabled by default, this should be activated when using XPath since the XPath data model requires entities replacement and the XPath engine does not handle entities references transparently.

Error handling

xmlGenericErrorFunc xmlGenericError = xmlGenericErrorDefaultFunc;

Must initialize xmlGenericError in xmlInitParser

xmlGenericError: Global setting: function used for generic error callbacks

xmlStructuredError: Global setting: function used for structured error callbacks

xmlGenericErrorContext: Global setting passed to generic error callbacks

xmlStructuredErrorContext: Global setting passed to structured error callbacks

output defaults

xmlIndentTreeOutput: Global setting, asking the serializer to indent the output tree by default Enabled by default

xmlTreeIndentString: The string used to do one-level indent. By default is equal to " " (two spaces)

xmlSaveNoEmptyTags: Global setting, asking the serializer to not output empty tags as <empty/> but <empty></empty>. those two forms are undistinguishable once parsed. Disabled by default

xmlDefaultSAXHandler: Default SAX version1 handler for XML, builds the DOM tree

LIBXML_SAX1_ENABLED

xmlDefaultSAXLocator: The default SAX Locator { getPublicId, getSystemId, getLineNumber, getColumnNumber}

htmlDefaultSAXHandler: Default old SAX v1 handler for HTML, builds the DOM tree

LIBXML_HTML_ENABLED

docbDefaultSAXHandler: Default old SAX v1 handler for SGML DocBook, builds the DOM tree

LIBXML_DOCB_ENABLED

xmlInitializeGlobalState: @gs: a pointer to a newly allocated global state xmlInitializeGlobalState() initialize a global state with all the default values of the library.

Perform initialization as required by libxml

LIBXML_SAX1_ENABLED

DOC_DISABLE : we ignore missing doc for the xmlThrDef functions, those are really internal work

xmlRegisterNodeDefault: @func: function pointer to the new RegisterNodeFunc Registers a callback for node creation Returns the old value of the registration function

xmlDeregisterNodeDefault: @func: function pointer to the new DeregisterNodeFunc Registers a callback for node destruction Returns the previous value of the deregistration function

The following memory routines were apparently lost at some point, and were re-inserted at this point on June 10, 2004. Hope it's the right place for them :-)

Everything starting from the line below is Automatically generated by build_glob.py. Do not modify the previous line.

LIBXML_SAX1_ENABLED

libxml.h

ForNewThreads







Initializing globals at %lu for thread %d\n

elfgcchack.h

Summary: interface for all global variables of the library Description: all the global variables and thread handling for those variables is handled by this module. The bottom of this file is automatically generated by build_glob.py based on the description file global.data Copy: See Copyright for the status of this software. Author: Gary Pennington <Gary.Pennington@uk.sun.com>, Daniel Veillard

xmlParserInputBufferCreateFilenameFunc: @URI: the URI to read from @enc: the requested source encoding Signature for the function doing the lookup for a suitable input method corresponding to an URI. Returns the new xmlParserInputBufferPtr in case of success or NULL if no method was found.

xmlOutputBufferCreateFilenameFunc: @URI: the URI to write to @enc: the requested target encoding Signature for the function doing the lookup for a suitable output method corresponding to an URI. Returns the new xmlOutputBufferPtr in case of success or NULL if no method was found.

Externally global symbols which need to be protected for backwards compatibility support.

xmlRegisterNodeFunc: @node: the current node Signature for the registration callback of a created node

xmlDeregisterNodeFunc: @node: the current node Signature for the deregistration callback of a discarded node

DOC_DISABLE

In general the memory allocation entry points are not kept thread specific but this can be overridden by LIBXML_THREAD_ALLOC_ENABLED - xmlMalloc - xmlMallocAtomic - xmlRealloc - xmlMemStrdup - xmlFree

!LIBXML_THREAD_ALLOC_ENABLED

LIBXML_THREAD_ALLOC_ENABLED

Everything starting from the line below is Automatically generated by build_glob.py. Do not modify the previous line.

__XML_GLOBALS_H

C

C

