hash.c: chained hash tables Reference: Your favorite introductory book on algorithms Copyright (C) 2000 Bjorn Reese and Daniel Veillard. Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE AUTHORS AND CONTRIBUTORS ACCEPT NO RESPONSIBILITY IN ANY CONCEIVABLE MANNER. Author: breese@users.sourceforge.net

#define DEBUG_GROW

A single entry in the hash table

The entire hash table

xmlHashComputeKey: Calculate the hash key

xmlHashCreate: @size: the size of the hash table Create a new xmlHashTablePtr. Returns the newly created object, or NULL if an error occured.

xmlHashCreateDict: @size: the size of the hash table @dict: a dictionary to use for the hash Create a new xmlHashTablePtr which will use @dict as the internal dictionary Returns the newly created object, or NULL if an error occured.

xmlHashGrow: @table: the hash table @size: the new size of the hash table resize the hash table Returns 0 in case of success, -1 in case of failure

f the two loops are merged, there would be situations where a new entry needs to allocated and data copied into it from the main table. So instead, we run through the array twice, first copying all the elements in the main array (where we can't get conflicts) and then the rest, so we only free (and don't allocate)

put back the entry in the new table

xmlHashFree: @table: the hash table @f: the deallocator function for items in the hash Free the hash @table and its contents. The userdata is deallocated with @f if provided.

xmlHashAddEntry: @table: the hash table @name: the name of the userdata @userdata: a pointer to the userdata Add the @userdata to the hash @table. This can later be retrieved by using the @name. Duplicate names generate errors. Returns 0 the addition succeeded and -1 in case of error.

xmlHashAddEntry2: @table: the hash table @name: the name of the userdata @name2: a second name of the userdata @userdata: a pointer to the userdata Add the @userdata to the hash @table. This can later be retrieved by using the (@name, @name2) tuple. Duplicate tuples generate errors. Returns 0 the addition succeeded and -1 in case of error.

xmlHashUpdateEntry: @table: the hash table @name: the name of the userdata @userdata: a pointer to the userdata @f: the deallocator function for replaced item (if any) Add the @userdata to the hash @table. This can later be retrieved by using the @name. Existing entry for this @name will be removed and freed with @f if found. Returns 0 the addition succeeded and -1 in case of error.

xmlHashUpdateEntry2: @table: the hash table @name: the name of the userdata @name2: a second name of the userdata @userdata: a pointer to the userdata @f: the deallocator function for replaced item (if any) Add the @userdata to the hash @table. This can later be retrieved by using the (@name, @name2) tuple. Existing entry for this tuple will be removed and freed with @f if found. Returns 0 the addition succeeded and -1 in case of error.

xmlHashLookup: @table: the hash table @name: the name of the userdata Find the userdata specified by the @name. Returns the pointer to the userdata

xmlHashLookup2: @table: the hash table @name: the name of the userdata @name2: a second name of the userdata Find the userdata specified by the (@name, @name2) tuple. Returns the pointer to the userdata

xmlHashQLookup: @table: the hash table @prefix: the prefix of the userdata @name: the name of the userdata Find the userdata specified by the QName @prefix:@name/@name. Returns the pointer to the userdata

xmlHashQLookup2: @table: the hash table @prefix: the prefix of the userdata @name: the name of the userdata @prefix2: the second prefix of the userdata @name2: a second name of the userdata Find the userdata specified by the QNames tuple Returns the pointer to the userdata

xmlHashAddEntry3: @table: the hash table @name: the name of the userdata @name2: a second name of the userdata @name3: a third name of the userdata @userdata: a pointer to the userdata Add the @userdata to the hash @table. This can later be retrieved by using the tuple (@name, @name2, @name3). Duplicate entries generate errors. Returns 0 the addition succeeded and -1 in case of error.

If using a dict internalize if needed

Check for duplicate and insertion location.

xmlHashUpdateEntry3: @table: the hash table @name: the name of the userdata @name2: a second name of the userdata @name3: a third name of the userdata @userdata: a pointer to the userdata @f: the deallocator function for replaced item (if any) Add the @userdata to the hash @table. This can later be retrieved by using the tuple (@name, @name2, @name3). Existing entry for this tuple will be removed and freed with @f if found. Returns 0 the addition succeeded and -1 in case of error.

If using a dict internalize if needed

Check for duplicate and insertion location.

xmlHashLookup3: @table: the hash table @name: the name of the userdata @name2: a second name of the userdata @name3: a third name of the userdata Find the userdata specified by the (@name, @name2, @name3) tuple. Returns the a pointer to the userdata

xmlHashQLookup3: @table: the hash table @prefix: the prefix of the userdata @name: the name of the userdata @prefix2: the second prefix of the userdata @name2: a second name of the userdata @prefix3: the third prefix of the userdata @name3: a third name of the userdata Find the userdata specified by the (@name, @name2, @name3) tuple. Returns the a pointer to the userdata

xmlHashScan: @table: the hash table @f: the scanner function for items in the hash @data: extra data passed to f Scan the hash @table and applied @f to each value.

xmlHashScanFull: @table: the hash table @f: the scanner function for items in the hash @data: extra data passed to f Scan the hash @table and applied @f to each value.

table was modified by the callback, be careful

xmlHashScan3: @table: the hash table @name: the name of the userdata or NULL @name2: a second name of the userdata or NULL @name3: a third name of the userdata or NULL @f: the scanner function for items in the hash @data: extra data passed to f Scan the hash @table and applied @f to each value matching (@name, @name2, @name3) tuple. If one of the names is null, the comparison is considered to match.

xmlHashScanFull3: @table: the hash table @name: the name of the userdata or NULL @name2: a second name of the userdata or NULL @name3: a third name of the userdata or NULL @f: the scanner function for items in the hash @data: extra data passed to f Scan the hash @table and applied @f to each value matching (@name, @name2, @name3) tuple. If one of the names is null, the comparison is considered to match.

xmlHashCopy: @table: the hash table @f: the copier function for items in the hash Scan the hash @table and applied @f to each value. Returns the new table or NULL in case of error.

xmlHashSize: @table: the hash table Query the number of elements installed in the hash @table. Returns the number of elements in the hash table or -1 in case of error

xmlHashRemoveEntry: @table: the hash table @name: the name of the userdata @f: the deallocator function for removed item (if any) Find the userdata specified by the @name and remove it from the hash @table. Existing userdata for this tuple will be removed and freed with @f. Returns 0 if the removal succeeded and -1 in case of error or not found.

xmlHashRemoveEntry2: @table: the hash table @name: the name of the userdata @name2: a second name of the userdata @f: the deallocator function for removed item (if any) Find the userdata specified by the (@name, @name2) tuple and remove it from the hash @table. Existing userdata for this tuple will be removed and freed with @f. Returns 0 if the removal succeeded and -1 in case of error or not found.

xmlHashRemoveEntry3: @table: the hash table @name: the name of the userdata @name2: a second name of the userdata @name3: a third name of the userdata @f: the deallocator function for removed item (if any) Find the userdata specified by the (@name, @name2, @name3) tuple and remove it from the hash @table. Existing userdata for this tuple will be removed and freed with @f. Returns 0 if the removal succeeded and -1 in case of error or not found.



libxml.h

:

:

:

t get conflicts) and then the rest, so we only free (and don

xmlHashGrow : from %d to %d, %d elems\n

elfgcchack.h

Summary: Chained hash tables Description: This module implements the hash table support used in various places in the library. Copy: See Copyright for the status of this software. Author: Bjorn Reese <bjorn.reese@systematic.dk>

The hash table.

Recent version of gcc produce a warning when a function pointer is assigned to an object pointer, or vice versa. The following macro is a dirty hack to allow suppression of the warning. If your architecture has function pointers which are a different size than a void pointer, there may be some serious trouble within the library.

XML_CAST_FPTR: @fptr: pointer to a function Macro to do a casting from an object pointer to a function pointer without encountering a warning from gcc #define XML_CAST_FPTR(fptr) ((void )(&fptr)) This macro violated ISO C aliasing rules (gcc4 on s390 broke) so it is disabled now

function types:

xmlHashDeallocator: @payload: the data in the hash @name: the name associated Callback to free data from a hash.

xmlHashCopier: @payload: the data in the hash @name: the name associated Callback to copy data from a hash. Returns a copy of the data or NULL in case of error.

xmlHashScanner: @payload: the data in the hash @data: extra scannner data @name: the name associated Callback when scanning data in a hash with the simple scanner.

xmlHashScannerFull: @payload: the data in the hash @data: extra scannner data @name: the name associated @name2: the second name associated @name3: the third name associated Callback when scanning data in a hash with the full scanner.

Constructor and destructor.

Add a new entry to the hash table.

Remove an entry from the hash table.

Retrieve the userdata.

Helpers.

! __XML_HASH_H__

C

C

