section: InputOutput synopsis: Example of custom Input/Output purpose: Demonstrate the use of xmlRegisterInputCallbacks to build a custom I/O layer, this is used in an XInclude method context to show how dynamic document can be built in a clean way. usage: io1 test: io1 > io1.tmp ; diff io1.tmp io1.res ; rm -f io1.tmp author: Daniel Veillard copy: see Copyright for the status of this software.

sqlMatch: @URI: an URI to test Check for an sql: query Returns 1 if yes and 0 if another Input module should be used

sqlOpen: @URI: an URI to test Return a pointer to the sql: query handler, in this example simply the current pointer... Returns an Input context or NULL in case or error

sqlClose: @context: the read context Close the sql: query handler Returns 0 or -1 in case of error

sqlRead: @context: the read context @buffer: where to store data @len: number of bytes to read Implement an sql: query read. Returns the number of bytes read or -1 in case of error

this initialize the library and check potential ABI mismatches between the version it was compiled for and the actual shared library used.

register the new I/O handlers

parse include into a document

apply the XInclude process, this should trigger the I/O just registered.

save the output for checking to stdout

Free the document

Cleanup function for the XML library.

this is to debug memory for regression tests

www.w3.org/2003/XInclude\">\n\

<list><people>a</people><people>b</people></list>

sql:

sql:

<?xml version='1.0'?>\n\ <document xmlns:xi=\"http://www.w3.org/2003/XInclude\">\n\ <p>List of people:</p>\n\ <xi:include href=\"sql:select_name_from_people\"/>\n\ </document>\n

failed to register SQL handler\n

include.xml

failed to parse the including file\n

XInclude processing failed\n

XInclude support not compiled in\n

