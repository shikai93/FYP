rngparser.c: parser for the Relax-NG compact syntax. Based on: RELAX NG Compact Syntax Committee Specification 21 November 2002 http://www.oasis-open.org/committees/relax-ng/compact-20021121.html See Copyright for the status of this software. Daniel Veillard <veillard@redhat.com>

user specific data block

the callback in case of errors

the callback in case of warning

the result

the current insertion node

dictionnary and keywords

results

the resulting doc

the insertion point

pending attributes

IS_BLANK: @c: an UNICODE value (int) Macro to check the following production in the XML spec: [3] S ::= (#x20 | #x9 | #xD | #xA)+

IS_OP @c: an UNICODE value (int) Macro to check for operator value

xmlCRNGNextToken: ctxt: a compact RNG parser context Scan the schema to get the next token Return 0 if success and -1 in case of error

string, check for '"""'

string, check for "'''"

sounds like an error !

xmlParseCRNGGetToken: @ctxt: a compact RNG parser context @no: the number of the token from 1 for the first one and 2, 3 ... for read-ahead Token reading interface returns a pointer to the new token, or NULL in case of error or EOF

xmlParseCRNGDropTokens: @ctxt: a compact RNG parser context @nr: the number of token marked as read mark a number of token as read and consumed. Returns -1 in case of error and 0 otherwise

xmlParseCRNG_attribute: @ctxt: a compact RNG parser context @name: the attribute name @ns: the attribute namespace @value: the attribute value implements attribute of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_bindPrefix: @ctxt: a compact RNG parser context @prefix: the namespace prefix or NULL @namespace: the namespace name implements bindPrefix of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_bindDatatypePrefix: @ctxt: a compact RNG parser context @prefix: the datatype prefix @namespace: the datatype identifier implements bindDatatypePrefix of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_lookupPrefix: @ctxt: a compact RNG parser context @prefix: the namespace prefix or NULL implements lookupPrefix of the RELAX NG Compact Syntax Appendix A Returns the prefix in case of success or NULL in case of error

xmlParseCRNG_lookupDatatypePrefix: @ctxt: a compact RNG parser context @prefix: the namespace prefix or NULL implements lookupDatatypePrefix of the RELAX NG Compact Syntax Appendix A Returns the prefix in case of success or NULL in case of error

xmlParseCRNG_datatypeAttributes: @ctxt: a compact RNG parser context @prefix: the namespace prefix or NULL implements lookupPrefix of the RELAX NG Compact Syntax Appendix A Returns the prefix in case of success or NULL in case of error

xmlParseCRNG_XXX: @ctxt: a compact RNG parser context Parse XXX of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_params: @ctxt: a compact RNG parser context Parse params of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_exceptNameClass: @ctxt: a compact RNG parser context Parse exceptNameClass of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_innerNameClass: @ctxt: a compact RNG parser context Parse innerNameClass of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

probably an error

xmlParseCRNG_nameClass: @ctxt: a compact RNG parser context Parse nameClass of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_patternBlock: @ctxt: a compact RNG parser context Parse a pattern block of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_datatype: @ctxt: a compact RNG parser context Parse datatype of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

probably an error

xmlParseCRNG_primary: @ctxt: a compact RNG parser context Parse primary of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_particle: @ctxt: a compact RNG parser context Parse particle of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_pattern: @ctxt: a compact RNG parser context Parse pattern of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_component: @ctxt: a compact RNG parser context Parse component of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_grammar: @ctxt: a compact RNG parser context Parse grammar of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_topLevelBody: @ctxt: a compact RNG parser context Parse topLevelBody of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_namespacePrefix: @ctxt: a compact RNG parser context Parse namespacePrefix of the RELAX NG Compact Syntax Appendix A Returns the prefix or NULL in case of error

xmlParseCRNG_decl: @ctxt: a compact RNG parser context Parse decl of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_preamble: @ctxt: a compact RNG parser context Parse preamble of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlParseCRNG_topLevel: @ctxt: a compact RNG parser context Parse topLevel of the RELAX NG Compact Syntax Appendix A Returns 0 in case of success and -1 in case of error

xmlConvertCRNG: @schemas: pointer to the text of the compact schemas @len: length of the schemas in bytes (or 0) @encoding: encoding indicated by the context or NULL Compiles the schemas into the equivalent Relax-NG XML structure Returns the xmlDocPtr resulting from the compilation or NULL in case of error

xmlConvertCRNGTokenize(&ctxt);

xmlConvertCRNGFile: @URL: URL or filename for the resource @encoding: encoding indicated by the context or NULL Compiles the schemas into the equivalent Relax-NG XML structure Returns the xmlDocPtr resulting from the compilation or NULL in case of error

www.oasis-open.org/committees/relax-ng/compact-20021121.html

www.w3.org/XML/1998/namespace\"");

www.w3.org/XML/1998/namespace\" name must be bound to \"xml\" prefix");

www.w3.org/2001/XMLSchema-datatypes"))) {

www.w3.org/2001/XMLSchema-datatypes\"");

relaxng.org/ns/structure/1.0\"\n\

www.w3.org/2001/XMLSchema-datatypes\"\n\

Unimplemented block at %s:%d\n

Inherit string

Default string

#

%s:%d

error: %s\n

error %d\n

\n

\r

\n

\r

%s\n



^

%s\n

,

&

|

?

-

*

{

}

(

)

+

=

:

#

\n

\r

"

"""

"

"

"

\'

'''

:

=

|

&

*

:

\\

:

*

found\n

none

op

keyword

identifier

literal

cname

qname

nsname

doc

:%s\n

xml

The \"xml\" prefix must be bound to \"http://www.w3.org/XML/1998/namespace\"

xml

The \"http://www.w3.org/XML/1998/namespace\" name must be bound to \"xml\" prefix

Failed to create namespace hash table

Redefinition of default namespace

Redefinition of namespace

xsd

http://www.w3.org/2001/XMLSchema-datatypes

The \"xsd\" prefix must be bound to \"http://www.w3.org/2001/XMLSchema-datatypes\"

Failed to create namespace hash table

Redefinition of datatype

datatypeLibrary

type

-

except

(

)

Expecting \")\" here

*

anyName

name

ns

ns



nsName

ns

|

{

Expecting \"{\" here

}

Expecting \"}\" here





value

value

{

data

data

externalRef

name

(

)

Expecting \")\" here

*

zeroOrMore

+

oneOrMore

?

optional

choice

interleave

expecting \"=\" or \"&=\" or \"|=\" here

choice

interleave

expecting \"=\" or \"&=\" or \"|=\" here

name

=

Expecting a namespace prefix

xmlns

Namespace prefix \"xmlns\" is forbidden

Expecting keyword \"namespace\" after \"default\"

=

Expecting keyword \"=\" here

Expecting an URI or \"inherit\" value

=

Expecting keyword \"=\" here

Expecting an URI or \"inherit\" value

Expecting a datatype prefix identifier here

=

Expecting keyword \"=\" here

Expecting a literal value for the datatype identifier

attribute

default

datatypes

div

element

empty

external

grammar

include

inherit

list

mixed

namespace

notAllowed

parent

start

string

text

token

=

|=

&=

&=

|

,

&

choice

group

interleave

ref

define

# RELAX NG XML syntax specified in compact syntax.\n\ \n\ default namespace rng = \"http://relaxng.org/ns/structure/1.0\"\n\ namespace local = \"\"\n\ datatypes xsd = \"http://www.w3.org/2001/XMLSchema-datatypes\"\n\ \n\ start = pattern\n\ \n\ pattern =\n\ element element { (nameQName | nameClass), (common & pattern+) }\n\ | element attribute { (nameQName | nameClass), (common & pattern?) }\n\ | element group|interleave|choice|optional\n\ |zeroOrMore|oneOrMore|list|mixed { common & pattern+ }\n\ | element ref|parentRef { nameNCName, common }\n\ | element empty|notAllowed|text { common }\n\ | element data { type, param*, (common & exceptPattern?) }\n\ | element value { commonAttributes, type?, xsd:string }\n\ | element externalRef { href, common }\n\ | element grammar { common & grammarContent* }\n\ \n\ param = element param { commonAttributes, nameNCName, xsd:string }\n\ \n\ exceptPattern = element except { common & pattern+ }\n\ \n\ grammarContent =\n\ definition\n\ | element div { common & grammarContent* }\n\ | element include { href, (common & includeContent*) }\n\ \n\ includeContent =\n\ definition\n\ | element div { common & includeContent* }\n\ \n\ definition =\n\ element start { combine?, (common & pattern+) }\n\ | element define { nameNCName, combine?, (common & pattern+) }\n\ \n\ combine = attribute combine { \"choice\" | \"interleave\" }\n\ \n\ nameClass =\n\ element name { commonAttributes, xsd:QName }\n\ | element anyName { common & exceptNameClass? }\n\ | element nsName { common & exceptNameClass? }\n\ | element choice { common & nameClass+ }\n\ \n\ exceptNameClass = element except { common & nameClass+ }\n\ \n\ nameQName = attribute name { xsd:QName }\n\ nameNCName = attribute name { xsd:NCName }\n\ href = attribute href { xsd:anyURI }\n\ type = attribute type { xsd:NCName }\n\ \n\ common = commonAttributes, foreignElement*\n\ \n\ commonAttributes =\n\ attribute ns { xsd:string }?,\n\ attribute datatypeLibrary { xsd:anyURI }?,\n\ foreignAttribute*\n\ \n\ foreignElement = element * - rng:* { (anyAttribute | text | anyElement)* }\n\ foreignAttribute = attribute * - (rng:*|local:*) { text }\n\ anyElement = element * { (anyAttribute | text | anyElement)* }\n\ anyAttribute = attribute * { text }\n\

elfgcchack.h

0x20)

0x09)

0xA)

0x0D))

0x20)

0x09)

0xA)

0x0D)

