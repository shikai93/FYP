Summary: internal interfaces for XML Schemas Description: internal interfaces for the XML Schemas handling and schema validity checking The Schemas development is a Work In Progress. Some of those interfaces are not garanteed to be API or ABI stable ! Copy: See Copyright for the status of this software. Author: Daniel Veillard

XML Schemas defines multiple type of types.

A built-in datatype

Obsolete

Annotation

the annotation

XML_SCHEMAS_ANYATTR_SKIP: Skip unknown attribute from validation Obsolete, not used anymore.

XML_SCHEMAS_ANYATTR_LAX: Ignore validation non definition on attributes Obsolete, not used anymore.

XML_SCHEMAS_ANYATTR_STRICT: Apply strict validation rules on attributes Obsolete, not used anymore.

XML_SCHEMAS_ANY_SKIP: Skip unknown attribute from validation

XML_SCHEMAS_ANY_LAX: Used by wildcards. Validate if type found, don't worry if not found

XML_SCHEMAS_ANY_STRICT: Used by wildcards. Apply strict validation rules

XML_SCHEMAS_ATTR_USE_PROHIBITED: Used by wildcards. The attribute is prohibited.

XML_SCHEMAS_ATTR_USE_REQUIRED: The attribute is required.

XML_SCHEMAS_ATTR_USE_OPTIONAL: The attribute is optional.

XML_SCHEMAS_ATTR_GLOBAL: allow elements in no namespace

XML_SCHEMAS_ATTR_NSDEFAULT: allow elements in no namespace

XML_SCHEMAS_ATTR_INTERNAL_RESOLVED: this is set when the "type" and "ref" references have been resolved.

XML_SCHEMAS_ATTR_FIXED: the attribute has a fixed value

xmlSchemaAttribute: An attribute definition.

the next attribute (not used?)

the name of the declaration

Deprecated; not used

Deprecated; not used

Deprecated; not used

the local name of the type definition

the ns URI of the type definition

Deprecated; not used

Deprecated; not used

The initial value of the value constraint

the type definition

Deprecated; not used

The compiled value constraint

Deprecated; not used

xmlSchemaAttributeLink: Used to build a list of attribute uses on complexType definitions. WARNING: Deprecated; not used.

the next attribute link ...

the linked attribute

XML_SCHEMAS_WILDCARD_COMPLETE: If the wildcard is complete.

xmlSchemaCharValueLink: Used to build a list of namespaces on wildcards.

the next constraint link ...

the value

xmlSchemaWildcard. A wildcard.

The kind of type

Deprecated; not used

Deprecated; not used

Deprecated; not used

Indicates if the ns constraint is of ##any

The list of allowed namespaces

The negated namespace

XML_SCHEMAS_ATTRGROUP_WILDCARD_BUILDED: The attribute wildcard has been already builded.

XML_SCHEMAS_ATTRGROUP_GLOBAL: The attribute wildcard has been already builded.

XML_SCHEMAS_ATTRGROUP_MARKED: Marks the attr group as marked; used for circular checks.

XML_SCHEMAS_ATTRGROUP_REDEFINED: The attr group was redefined.

XML_SCHEMAS_ATTRGROUP_HAS_REFS: Whether this attr. group contains attr. group references.

An attribute group definition. xmlSchemaAttribute and xmlSchemaAttributeGroup start of structures must be kept similar

The kind of type

the next attribute if in a group ...

Deprecated; not used

Deprecated; not used

Deprecated; not used

Deprecated; not used

Deprecated; not used

xmlSchemaTypeLink: Used to build a list of types (e.g. member types of simpleType with variety "union").

the next type link ...

the linked type

xmlSchemaFacetLink: Used to build a list of facets.

the next facet link ...

the linked facet

XML_SCHEMAS_TYPE_MIXED: the element content type is mixed

XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION: the simple or complex type has a derivation method of "extension".

XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION: the simple or complex type has a derivation method of "restriction".

XML_SCHEMAS_TYPE_GLOBAL: the type is global

XML_SCHEMAS_TYPE_OWNED_ATTR_WILDCARD: the complexType owns an attribute wildcard, i.e. it can be freed by the complexType

Obsolete.

XML_SCHEMAS_TYPE_VARIETY_ABSENT: the simpleType has a variety of "absent". TODO: Actually not necessary :-/, since if none of the variety flags occur then it's automatically absent.

XML_SCHEMAS_TYPE_VARIETY_LIST: the simpleType has a variety of "list".

XML_SCHEMAS_TYPE_VARIETY_UNION: the simpleType has a variety of "union".

XML_SCHEMAS_TYPE_VARIETY_ATOMIC: the simpleType has a variety of "union".

XML_SCHEMAS_TYPE_FINAL_EXTENSION: the complexType has a final of "extension".

XML_SCHEMAS_TYPE_FINAL_RESTRICTION: the simpleType/complexType has a final of "restriction".

XML_SCHEMAS_TYPE_FINAL_LIST: the simpleType has a final of "list".

XML_SCHEMAS_TYPE_FINAL_UNION: the simpleType has a final of "union".

XML_SCHEMAS_TYPE_FINAL_DEFAULT: the simpleType has a final of "default".

XML_SCHEMAS_TYPE_BUILTIN_PRIMITIVE: Marks the item as a builtin primitive.

XML_SCHEMAS_TYPE_MARKED: Marks the item as marked; used for circular checks.

XML_SCHEMAS_TYPE_BLOCK_DEFAULT: the complexType did not specify 'block' so use the default of the <schema> item.

XML_SCHEMAS_TYPE_BLOCK_EXTENSION: the complexType has a 'block' of "extension".

XML_SCHEMAS_TYPE_BLOCK_RESTRICTION: the complexType has a 'block' of "restriction".

XML_SCHEMAS_TYPE_ABSTRACT: the simple/complexType is abstract.

XML_SCHEMAS_TYPE_FACETSNEEDVALUE: indicates if the facets need a computed value

XML_SCHEMAS_TYPE_INTERNAL_RESOLVED: indicates that the type was typefixed

XML_SCHEMAS_TYPE_INTERNAL_INVALID: indicates that the type is invalid

XML_SCHEMAS_TYPE_WHITESPACE_PRESERVE: a whitespace-facet value of "preserve"

XML_SCHEMAS_TYPE_WHITESPACE_REPLACE: a whitespace-facet value of "replace"

XML_SCHEMAS_TYPE_WHITESPACE_COLLAPSE: a whitespace-facet value of "collapse"

XML_SCHEMAS_TYPE_HAS_FACETS: has facets

XML_SCHEMAS_TYPE_NORMVALUENEEDED: indicates if the facets (pattern) need a normalized value

XML_SCHEMAS_TYPE_FIXUP_1: First stage of fixup was done.

XML_SCHEMAS_TYPE_REDEFINED: The type was redefined.

XML_SCHEMAS_TYPE_REDEFINING: The type redefines an other type.

#define XML_SCHEMAS_TYPE_REDEFINING 1 << 31

_xmlSchemaType: Schemas type definition.

The kind of type

the next type if in a sequence ...

Deprecated; not used

Deprecated; not used

Deprecated; not used

Deprecated; not used

Deprecated; not used

Deprecated; not used

Base type's local name

Base type's target namespace

The base type component

Local facets

Deprecated; not used

Obsolete

Deprecated; not used

Type of built-in types.

member-types if a union type.

All facets (incl. inherited)

Deprecated; not used

Used for the simple content of complex types. Could we use @subtypes for this?

Holds the automaton of the content model

xmlSchemaElement: An element definition. xmlSchemaType, xmlSchemaFacet and xmlSchemaElement start of structures must be kept similar

XML_SCHEMAS_ELEM_NILLABLE: the element is nillable

XML_SCHEMAS_ELEM_GLOBAL: the element is global

XML_SCHEMAS_ELEM_DEFAULT: the element has a default value

XML_SCHEMAS_ELEM_FIXED: the element has a fixed value

XML_SCHEMAS_ELEM_ABSTRACT: the element is abstract

XML_SCHEMAS_ELEM_TOPLEVEL: the element is top level obsolete: use XML_SCHEMAS_ELEM_GLOBAL instead

XML_SCHEMAS_ELEM_REF: the element is a reference to a type

XML_SCHEMAS_ELEM_NSDEFAULT: allow elements in no namespace Obsolete, not used anymore.

XML_SCHEMAS_ELEM_INTERNAL_RESOLVED: this is set when "type", "ref", "substitutionGroup" references have been resolved.

XML_SCHEMAS_ELEM_CIRCULAR: a helper flag for the search of circular references.

XML_SCHEMAS_ELEM_BLOCK_ABSENT: the "block" attribute is absent

XML_SCHEMAS_ELEM_BLOCK_EXTENSION: disallowed substitutions are absent

XML_SCHEMAS_ELEM_BLOCK_RESTRICTION: disallowed substitutions: "restriction"

XML_SCHEMAS_ELEM_BLOCK_SUBSTITUTION: disallowed substitutions: "substituion"

XML_SCHEMAS_ELEM_FINAL_ABSENT: substitution group exclusions are absent

XML_SCHEMAS_ELEM_FINAL_EXTENSION: substitution group exclusions: "extension"

XML_SCHEMAS_ELEM_FINAL_RESTRICTION: substitution group exclusions: "restriction"

XML_SCHEMAS_ELEM_SUBST_GROUP_HEAD: the declaration is a substitution group head

XML_SCHEMAS_ELEM_INTERNAL_CHECKED: this is set when the elem decl has been checked against all constraints

The kind of type

Not used?

Deprecated; not used

Deprecated; not used

Deprecated; not used

the type definition

Deprecated; not used

Deprecated; not used

The original value of the value constraint.

This will now be used for the substitution group affiliation

Obsolete for WXS, maybe used for RelaxNG

Deprecated; not used

The compiled value contraint.

The identity-constraint defs

XML_SCHEMAS_FACET_UNKNOWN: unknown facet handling

XML_SCHEMAS_FACET_PRESERVE: preserve the type of the facet

XML_SCHEMAS_FACET_REPLACE: replace the type of the facet

XML_SCHEMAS_FACET_COLLAPSE: collapse the types of the facet

A facet definition.

The kind of type

the next type if in a sequence ...

The original value

Obsolete

XML_SCHEMAS_FACET_PRESERVE, etc.

The compiled value

The regex for patterns

A notation definition.

The kind of type

TODO: Actually all those flags used for the schema should sit on the schema parser context, since they are used only during parsing an XML schema document, and not available on the component level as per spec.

XML_SCHEMAS_QUALIF_ELEM: Reflects elementFormDefault == qualified in an XML schema document.

XML_SCHEMAS_QUALIF_ATTR: Reflects attributeFormDefault == qualified in an XML schema document.

XML_SCHEMAS_FINAL_DEFAULT_EXTENSION: the schema has "extension" in the set of finalDefault.

XML_SCHEMAS_FINAL_DEFAULT_RESTRICTION: the schema has "restriction" in the set of finalDefault.

XML_SCHEMAS_FINAL_DEFAULT_LIST: the cshema has "list" in the set of finalDefault.

XML_SCHEMAS_FINAL_DEFAULT_UNION: the schema has "union" in the set of finalDefault.

XML_SCHEMAS_BLOCK_DEFAULT_EXTENSION: the schema has "extension" in the set of blockDefault.

XML_SCHEMAS_BLOCK_DEFAULT_RESTRICTION: the schema has "restriction" in the set of blockDefault.

XML_SCHEMAS_BLOCK_DEFAULT_SUBSTITUTION: the schema has "substitution" in the set of blockDefault.

XML_SCHEMAS_INCLUDING_CONVERT_NS: the schema is currently including an other schema with no target namespace.

_xmlSchema: A Schemas definition

schema name

the target namespace

Obsolete

unused by the library for users or bindings

the includes, this is opaque for now

whether to free the document

used to give ononymous components unique names

All identity-constraint defs.

Obsolete

LIBXML_SCHEMAS_ENABLED

__XML_SCHEMA_INTERNALS_H__

C

t worry if not found */ #define XML_SCHEMAS_ANY_LAX 2 /** * XML_SCHEMAS_ANY_STRICT: * * Used by wildcards. * Apply strict validation rules */ #define XML_SCHEMAS_ANY_STRICT 3 /** * XML_SCHEMAS_ATTR_USE_PROHIBITED: * * Used by wildcards. * The attribute is prohibited. */ #define XML_SCHEMAS_ATTR_USE_PROHIBITED 0 /** * XML_SCHEMAS_ATTR_USE_REQUIRED: * * The attribute is required. */ #define XML_SCHEMAS_ATTR_USE_REQUIRED 1 /** * XML_SCHEMAS_ATTR_USE_OPTIONAL: * * The attribute is optional. */ #define XML_SCHEMAS_ATTR_USE_OPTIONAL 2 /** * XML_SCHEMAS_ATTR_GLOBAL: * * allow elements in no namespace */ #define XML_SCHEMAS_ATTR_GLOBAL 1 << 0 /** * XML_SCHEMAS_ATTR_NSDEFAULT: * * allow elements in no namespace */ #define XML_SCHEMAS_ATTR_NSDEFAULT 1 << 7 /** * XML_SCHEMAS_ATTR_INTERNAL_RESOLVED: * * this is set when the "type" and "ref" references * have been resolved. */ #define XML_SCHEMAS_ATTR_INTERNAL_RESOLVED 1 << 8 /** * XML_SCHEMAS_ATTR_FIXED: * * the attribute has a fixed value */ #define XML_SCHEMAS_ATTR_FIXED 1 << 9 /** * xmlSchemaAttribute: * An attribute definition. */ typedef struct _xmlSchemaAttribute xmlSchemaAttribute; typedef xmlSchemaAttribute *xmlSchemaAttributePtr; struct _xmlSchemaAttribute { xmlSchemaTypeType type; struct _xmlSchemaAttribute *next; /* the next attribute (not used?) */ const xmlChar *name; /* the name of the declaration */ const xmlChar *id; /* Deprecated; not used */ const xmlChar *ref; /* Deprecated; not used */ const xmlChar *refNs; /* Deprecated; not used */ const xmlChar *typeName; /* the local name of the type definition */ const xmlChar *typeNs; /* the ns URI of the type definition */ xmlSchemaAnnotPtr annot; xmlSchemaTypePtr base; /* Deprecated; not used */ int occurs; /* Deprecated; not used */ const xmlChar *defValue; /* The initial value of the value constraint */ xmlSchemaTypePtr subtypes; /* the type definition */ xmlNodePtr node; const xmlChar *targetNamespace; int flags; const xmlChar *refPrefix; /* Deprecated; not used */ xmlSchemaValPtr defVal; /* The compiled value constraint */ xmlSchemaAttributePtr refDecl; /* Deprecated; not used */ }; /** * xmlSchemaAttributeLink: * Used to build a list of attribute uses on complexType definitions. * WARNING: Deprecated; not used. */ typedef struct _xmlSchemaAttributeLink xmlSchemaAttributeLink; typedef xmlSchemaAttributeLink *xmlSchemaAttributeLinkPtr; struct _xmlSchemaAttributeLink { struct _xmlSchemaAttributeLink *next;/* the next attribute link ... */ struct _xmlSchemaAttribute *attr;/* the linked attribute */ }; /** * XML_SCHEMAS_WILDCARD_COMPLETE: * * If the wildcard is complete. */ #define XML_SCHEMAS_WILDCARD_COMPLETE 1 << 0 /** * xmlSchemaCharValueLink: * Used to build a list of namespaces on wildcards. */ typedef struct _xmlSchemaWildcardNs xmlSchemaWildcardNs; typedef xmlSchemaWildcardNs *xmlSchemaWildcardNsPtr; struct _xmlSchemaWildcardNs { struct _xmlSchemaWildcardNs *next;/* the next constraint link ... */ const xmlChar *value;/* the value */ }; /** * xmlSchemaWildcard. * A wildcard. */ typedef struct _xmlSchemaWildcard xmlSchemaWildcard; typedef xmlSchemaWildcard *xmlSchemaWildcardPtr; struct _xmlSchemaWildcard { xmlSchemaTypeType type; /* The kind of type */ const xmlChar *id; /* Deprecated; not used */ xmlSchemaAnnotPtr annot; xmlNodePtr node; int minOccurs; /* Deprecated; not used */ int maxOccurs; /* Deprecated; not used */ int processContents; int any; /* Indicates if the ns constraint is of ##any */ xmlSchemaWildcardNsPtr nsSet; /* The list of allowed namespaces */ xmlSchemaWildcardNsPtr negNsSet; /* The negated namespace */ int flags; }; /** * XML_SCHEMAS_ATTRGROUP_WILDCARD_BUILDED: * * The attribute wildcard has been already builded. */ #define XML_SCHEMAS_ATTRGROUP_WILDCARD_BUILDED 1 << 0 /** * XML_SCHEMAS_ATTRGROUP_GLOBAL: * * The attribute wildcard has been already builded. */ #define XML_SCHEMAS_ATTRGROUP_GLOBAL 1 << 1 /** * XML_SCHEMAS_ATTRGROUP_MARKED: * * Marks the attr group as marked; used for circular checks. */ #define XML_SCHEMAS_ATTRGROUP_MARKED 1 << 2 /** * XML_SCHEMAS_ATTRGROUP_REDEFINED: * * The attr group was redefined. */ #define XML_SCHEMAS_ATTRGROUP_REDEFINED 1 << 3 /** * XML_SCHEMAS_ATTRGROUP_HAS_REFS: * * Whether this attr. group contains attr. group references. */ #define XML_SCHEMAS_ATTRGROUP_HAS_REFS 1 << 4 /** * An attribute group definition. * * xmlSchemaAttribute and xmlSchemaAttributeGroup start of structures * must be kept similar */ typedef struct _xmlSchemaAttributeGroup xmlSchemaAttributeGroup; typedef xmlSchemaAttributeGroup *xmlSchemaAttributeGroupPtr; struct _xmlSchemaAttributeGroup { xmlSchemaTypeType type; /* The kind of type */ struct _xmlSchemaAttribute *next;/* the next attribute if in a group ... */ const xmlChar *name; const xmlChar *id; const xmlChar *ref; /* Deprecated; not used */ const xmlChar *refNs; /* Deprecated; not used */ xmlSchemaAnnotPtr annot; xmlSchemaAttributePtr attributes; /* Deprecated; not used */ xmlNodePtr node; int flags; xmlSchemaWildcardPtr attributeWildcard; const xmlChar *refPrefix; /* Deprecated; not used */ xmlSchemaAttributeGroupPtr refItem; /* Deprecated; not used */ const xmlChar *targetNamespace; void *attrUses; }; /** * xmlSchemaTypeLink: * Used to build a list of types (e.g. member types of * simpleType with variety "union"). */ typedef struct _xmlSchemaTypeLink xmlSchemaTypeLink; typedef xmlSchemaTypeLink *xmlSchemaTypeLinkPtr; struct _xmlSchemaTypeLink { struct _xmlSchemaTypeLink *next;/* the next type link ... */ xmlSchemaTypePtr type;/* the linked type */ }; /** * xmlSchemaFacetLink: * Used to build a list of facets. */ typedef struct _xmlSchemaFacetLink xmlSchemaFacetLink; typedef xmlSchemaFacetLink *xmlSchemaFacetLinkPtr; struct _xmlSchemaFacetLink { struct _xmlSchemaFacetLink *next;/* the next facet link ... */ xmlSchemaFacetPtr facet;/* the linked facet */ }; /** * XML_SCHEMAS_TYPE_MIXED: * * the element content type is mixed */ #define XML_SCHEMAS_TYPE_MIXED 1 << 0 /** * XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION: * * the simple or complex type has a derivation method of "extension". */ #define XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION 1 << 1 /** * XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION: * * the simple or complex type has a derivation method of "restriction". */ #define XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION 1 << 2 /** * XML_SCHEMAS_TYPE_GLOBAL: * * the type is global */ #define XML_SCHEMAS_TYPE_GLOBAL 1 << 3 /** * XML_SCHEMAS_TYPE_OWNED_ATTR_WILDCARD: * * the complexType owns an attribute wildcard, i.e. * it can be freed by the complexType */ #define XML_SCHEMAS_TYPE_OWNED_ATTR_WILDCARD 1 << 4 /* Obsolete. */ /** * XML_SCHEMAS_TYPE_VARIETY_ABSENT: * * the simpleType has a variety of "absent". * TODO: Actually not necessary :-/, since if * none of the variety flags occur then it

list

union

union

extension

restriction

list

union

default

block

block

extension

block

restriction

preserve

replace

collapse

s local name */ const xmlChar *baseNs; /* Base type

type

ref

substitutionGroup

block

restriction

substituion

extension

restriction

extension

restriction

list

union

extension

restriction

substitution

