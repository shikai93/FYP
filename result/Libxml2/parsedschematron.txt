schematron.c : implementation of the Schematron schema validity checking See Copyright for the status of this software. Daniel Veillard <daniel@veillard.com>

TODO: + double check the semantic, especially - multiple rules applying in a single pattern/node - the semantic of libxml2 patterns vs. XSLT production referenced by the spec. + export of results in SVRL + full parsing and coverage of the spec, conformance of the input to the spec + divergences between the draft and the ISO proposed standard :-( + hook and test include + try and compare with the XSLT version

TODO: macro to flag unimplemented blocks

_xmlSchematronTest: A Schematrons test, either an assert or a report

the next test in the list

the test type

the node in the tree

the expression to test

the compiled expression

the message to report

_xmlSchematronRule: A Schematrons rule

the next rule in the list

the next rule in the pattern list

the node in the tree

the context evaluation rule

the list of tests

the compiled pattern associated

the message to report

_xmlSchematronPattern: A Schematrons pattern

the next pattern in the list

the list of rules

the name of the pattern

_xmlSchematron: A Schematrons definition

schema name

was the document passed by the user

pointer to the parsed document

specific to this schematron

unused by the library

the dictionnary used internally

the title if any

the number of namespaces

the number of patterns

the patterns found

the rules gathered

number of namespaces in the array

size of the array

the array of namespaces

xmlSchematronValidCtxt: A Schematrons validation context

an or of xmlSchematronValidOptions

if using XML_SCHEMATRON_OUT_FILE

if using XML_SCHEMATRON_OUT_BUFFER

if using XML_SCHEMATRON_OUT_IO

error reporting data

user specific data block

the callback in case of errors

callback in case of warning

the structured function

Whether the doc should be freed

dictionnary for interned string names

the XPath context used for compilation

number of namespaces in the array

size of the array

the array of namespaces

number of includes in the array

size of the array

the array of includes

error reporting data

user specific data block

the callback in case of errors

callback in case of warning

the structured function

Error reporting

xmlSchematronPErrMemory: @node: a context node @extra: extra informations Handle an out of memory condition

xmlSchematronPErr: @ctxt: the parsing context @node: the context node @error: the error code @msg: the error message @str1: extra data @str2: extra data Handle a parser error

xmlSchematronVTypeErrMemory: @node: a context node @extra: extra informations Handle an out of memory condition

Parsing and compilation of the Schematrontrons

xmlSchematronAddTest: @ctxt: the schema parsing context @type: the type of test @rule: the parent rule @node: the node hosting the test @test: the associated test @report: the associated report string Add a test to a schematron Returns the new pointer or NULL in case of error

try first to compile the test expression

xmlSchematronFreeTests: @tests: a list of tests Free a list of tests.

xmlSchematronAddRule: @ctxt: the schema parsing context @schema: a schema structure @node: the node hosting the rule @context: the associated context string @report: the associated report string Add a rule to a schematron Returns the new pointer or NULL in case of error

Try first to compile the pattern

xmlSchematronFreeRules: @rules: a list of rules Free a list of rules.

xmlSchematronAddPattern: @ctxt: the schema parsing context @schema: a schema structure @node: the node hosting the pattern @id: the id or name of the pattern Add a pattern to a schematron Returns the new pointer or NULL in case of error

xmlSchematronFreePatterns: @patterns: a list of patterns Free a list of patterns.

xmlSchematronNewSchematron: @ctxt: a schema validation context Allocate a new Schematron structure. Returns the newly allocated structure or NULL in case or error

xmlSchematronFree: @schema: a schema structure Deallocate a Schematron structure.

xmlSchematronNewParserCtxt: @URL: the location of the schema Create an XML Schematrons parse context for that file/resource expected to contain an XML Schematrons file. Returns the parser context or NULL in case of error

xmlSchematronNewMemParserCtxt: @buffer: a pointer to a char array containing the schemas @size: the size of the array Create an XML Schematrons parse context for that memory buffer expected to contain an XML Schematrons file. Returns the parser context or NULL in case of error

xmlSchematronNewDocParserCtxt: @doc: a preparsed document tree Create an XML Schematrons parse context for that document. NB. The document may be modified during the parsing process. Returns the parser context or NULL in case of error

The application has responsibility for the document

xmlSchematronFreeParserCtxt: @ctxt: the schema parser context Free the resources associated to the schema parser context

xmlSchematronPushInclude: @ctxt: the schema parser context @doc: the included document @cur: the current include node Add an included document

xmlSchematronPopInclude: @ctxt: the schema parser context Pop an include level. The included document is being freed Returns the node immediately following the include or NULL if the include list was empty.

xmlSchematronAddNamespace: @ctxt: the schema parser context @prefix: the namespace prefix @ns: the namespace name Add a namespace definition in the context

xmlSchematronParseRule: @ctxt: a schema validation context @rule: the rule node parse a rule element

TODO will need dynamic processing instead

TODO will need dynamic processing instead

xmlSchematronParsePattern: @ctxt: a schema validation context @pat: the pattern node parse a pattern element

xmlSchematronLoadInclude: @ctxt: a schema validation context @cur: the include element Load the include document, Push the current pointer Returns the updated node pointer

do the URI base composition, load and find the root

Success, push the include for rollback on exit

xmlSchematronParse: @ctxt: a schema validation context parse a schema definition resource and build an internal XML Shema struture which can be used to validate instances. Returns the internal XML Schematron structure built from the resource or NULL in case of error

First step is to parse the input document into an DOM/Infoset

Then extract the root and Schematron parse it

scan the schema elements

the original document must be kept for reporting

Schematrontron Reports handler

xmlSchematronReportOutput: @ctxt: the validation context @cur: the current node tested @msg: the message output Output part of the report to whatever channel the user selected

TODO

xmlSchematronFormatReport: @ctxt: the validation context @test: the test node @cur: the current node tested Build the string being reported to the user. Returns a report string or NULL in case of error. The string needs to be deallocated by teh caller

remove superfluous \n

xmlSchematronReportSuccess: @ctxt: the validation context @test: the compiled test @cur: the current node tested @success: boolean value for the result called from the validation engine when an assert or report test have been done.

if quiet and not SVRL report only failures

xmlSchematronReportPattern: @ctxt: the validation context @pattern: the current pattern called from the validation engine when starting to check a pattern

Error gives pattern name as part of error

Validation against a Schematrontron

xmlSchematronSetValidStructuredErrors: @ctxt: a Schematron validation context @serror: the structured error function @ctx: the functions context Set the structured error callback

xmlSchematronNewValidCtxt: @schema: a precompiled XML Schematrons @options: a set of xmlSchematronValidOptions Create an XML Schematrons validation context based on the given schema. Returns the validation context or NULL in case of error

xmlSchematronFreeValidCtxt: @ctxt: the schema validation context Free the resources associated to the schema validation context

Do not descend on entities declarations

Skip DTDs

xmlSchematronRunTest: @ctxt: the schema validation context @test: the current test @instance: the document instace tree @cur: the current node in the instance Validate a rule against a tree instance at a given position Returns 1 in case of success, 0 if error and -1 in case of internal error

xmlSchematronValidateDoc: @ctxt: the schema validation context @instance: the document instace tree Validate a tree instance against the schematron Returns 0 in case of success, -1 in case of internal error and an error count otherwise.

we are just trying to assert the validity of the document, speed primes over the output, run in a single pass

Process all contexts one at a time

TODO convert the pattern rule to a direct XPath and compute directly instead of using the pattern matching over the full document... Check the exact semantic

LIBXML_SCHEMATRON_ENABLED

www.ascc.net/xml/schematron"

purl.oclc.org/dsdl/schematron"

libxml.h

http://www.ascc.net/xml/schematron

http://purl.oclc.org/dsdl/schematron

Unimplemented block at %s:%d\n

Failed to compile test expression %s

allocating schema test

Failed to compile context expression %s

allocating schema rule

allocating schema pattern

allocating schema

allocating schema parser context

allocating schema parser XPath context

allocating schema parser context

allocating schema parser XPath context

allocating schema parser context

allocating schema parser XPath context

allocating parser includes

allocating parser includes

allocating parser namespaces

allocating parser namespaces

context

rule has no context attribute

rule has an empty context attribute

assert

test

assert has no test attribute

assert has an empty test attribute

report

test

assert has no test attribute

assert has an empty test attribute

Expecting an assert or a report element instead of %s

rule has no assert nor report element

id

name

rule

Expecting a rule element instead of %s

Pattern has no rule element

href

Include has no href attribute

could not load include '%s'.\n

could not find root from include '%s'.\n

xmlSchematronParse: could not load '%s'.\n

xmlSchematronParse: could not parse.\n

in_memory_buffer

in_memory_buffer

xmlSchematronParse: could not parse.\n

The schema has no document element.\n

schema

The XML document '%s' is not a XML schematron document

title

ns

prefix

uri

ns element has no uri

ns element has no prefix

pattern

Expecting a pattern element instead of %s

The schematron document '%s' has no pattern

%s

name

path

:



\n

\r

\t



\n

\r

\t



node failed assert

node failed report

%s line %ld: %s\n

%s

Pattern: %s\n

allocating validation context

allocating schema parser XPath context

tst.sct

failed to build schematron parser\n

failed to compile schematron\n

tst.sct

failed to parse instance\n

failed to build schematron validator\n

elfgcchack.h

Summary: XML Schemastron implementation Description: interface to the XML Schematron validity checking. Copy: See Copyright for the status of this software. Author: Daniel Veillard

quiet no report

build a textual report

output SVRL

output via xmlStructuredErrorFunc

output to a file descriptor

output to a buffer

output to I/O mechanism

The schemas related types are kept internal

xmlSchematronValidityErrorFunc: @ctx: the validation context @msg: the message @...: extra arguments Signature of an error callback from a Schematron validation

xmlSchematronValidityWarningFunc: @ctx: the validation context @msg: the message @...: extra arguments Signature of a warning callback from a Schematron validation

A schemas validation context

Interfaces for parsing.

XMLPUBFUN void XMLCALL xmlSchematronSetParserErrors(xmlSchematronParserCtxtPtr ctxt, xmlSchematronValidityErrorFunc err, xmlSchematronValidityWarningFunc warn, void ctx); XMLPUBFUN int XMLCALL xmlSchematronGetParserErrors(xmlSchematronParserCtxtPtr ctxt, xmlSchematronValidityErrorFunc err, xmlSchematronValidityWarningFunc warn, void ctx); XMLPUBFUN int XMLCALL xmlSchematronIsValid(xmlSchematronValidCtxtPtr ctxt);

Interfaces for validating

XMLPUBFUN void XMLCALL xmlSchematronSetValidErrors(xmlSchematronValidCtxtPtr ctxt, xmlSchematronValidityErrorFunc err, xmlSchematronValidityWarningFunc warn, void ctx); XMLPUBFUN int XMLCALL xmlSchematronGetValidErrors(xmlSchematronValidCtxtPtr ctxt, xmlSchematronValidityErrorFunc err, xmlSchematronValidityWarningFunc warn, void ctx); XMLPUBFUN int XMLCALL xmlSchematronSetValidOptions(xmlSchematronValidCtxtPtr ctxt, int options); XMLPUBFUN int XMLCALL xmlSchematronValidCtxtGetOptions(xmlSchematronValidCtxtPtr ctxt); XMLPUBFUN int XMLCALL xmlSchematronValidateOneElement (xmlSchematronValidCtxtPtr ctxt, xmlNodePtr elem);

LIBXML_SCHEMATRON_ENABLED

__XML_SCHEMATRON_H__

C

