tree.c : implementation of access function for an XML tree. References: XHTML 1.0 W3C REC: http://www.w3.org/TR/2002/REC-xhtml1-20020801/ See Copyright for the status of this software. daniel@veillard.com

for memset() only !

Forward declarations

Tree memory error handler

xmlTreeErrMemory: @extra: extra informations Handle an out of memory condition

xmlTreeErr: @code: the error number @extra: extra informations Handle an out of memory condition

A few static variables and macros

#undef xmlStringText

#undef xmlStringTextNoenc

#undef xmlStringComment

#define DEBUG_BUFFER

#define DEBUG_TREE

Functions to move to entities.c once the API freeze is smoothen and they can be made public.

xmlGetEntityFromDtd: @dtd: A pointer to the DTD to search @name: The entity name Do an entity lookup in the DTD entity hash table and return the corresponding entity, if found. Returns A pointer to the entity structure or NULL if not found.

return(xmlGetEntityFromTable(table, name));

xmlGetParameterEntityFromDtd: @dtd: A pointer to the DTD to search @name: The entity name Do an entity lookup in the DTD pararmeter entity hash table and return the corresponding entity, if found. Returns A pointer to the entity structure or NULL if not found.

return(xmlGetEntityFromTable(table, name));

LIBXML_TREE_ENABLED

QName handling helper

xmlBuildQName: @ncname: the Name @prefix: the prefix @memory: preallocated memory @len: preallocated memory length Builds the QName @prefix:@ncname in @memory if there is enough space and prefix is not NULL nor empty, otherwise allocate a new string. If prefix is NULL or empty it returns ncname. Returns the new string which must be freed by the caller if different from @memory and @ncname or NULL in case of error

xmlSplitQName2: @name: the full QName @prefix: a xmlChar parse an XML qualified name string [NS 5] QName ::= (Prefix ':')? LocalPart [NS 6] Prefix ::= NCName [NS 7] LocalPart ::= NCName Returns NULL if not a QName, otherwise the local part, and prefix is updated to get the Prefix if any.

xml: prefix is not really a namespace

nasty but valid

we are not trying to validate but just to cut, and yes it will work even if this is as set of UTF-8 encoded chars

xmlSplitQName3: @name: the full QName @len: an int parse an XML qualified name string,i returns NULL if it is not a Qualified Name, otherwise, update len with the lenght in byte of the prefix and return a pointer to the start of the name without the prefix

nasty but valid

we are not trying to validate but just to cut, and yes it will work even if this is as set of UTF-8 encoded chars

Check Name, NCName and QName strings

xmlValidateNCName: @value: the value to check @space: allow spaces in front and end of the string Check that a value conforms to the lexical space of NCName Returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error.

First quick algorithm for ASCII range

Second check for chars outside the ASCII range

xmlValidateQName: @value: the value to check @space: allow spaces in front and end of the string Check that a value conforms to the lexical space of QName Returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error.

First quick algorithm for ASCII range

Second check for chars outside the ASCII range

xmlValidateName: @value: the value to check @space: allow spaces in front and end of the string Check that a value conforms to the lexical space of Name Returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error.

First quick algorithm for ASCII range

Second check for chars outside the ASCII range

xmlValidateNMToken: @value: the value to check @space: allow spaces in front and end of the string Check that a value conforms to the lexical space of NMToken Returns 0 if this validates, a positive error code number otherwise and -1 in case of internal or API error.

First quick algorithm for ASCII range

Second check for chars outside the ASCII range

LIBXML_TREE_ENABLED

Allocation and deallocation of basic structures

xmlSetBufferAllocationScheme: @scheme: allocation method to use Set the buffer allocation method. Types are XML_BUFFER_ALLOC_EXACT - use exact sizes, keeps memory usage down XML_BUFFER_ALLOC_DOUBLEIT - double buffer when extra needed, improves performance

xmlGetBufferAllocationScheme: Types are XML_BUFFER_ALLOC_EXACT - use exact sizes, keeps memory usage down XML_BUFFER_ALLOC_DOUBLEIT - double buffer when extra needed, improves performance Returns the current allocation scheme

xmlNewNs: @node: the element carrying the namespace @href: the URI associated @prefix: the prefix for the namespace Creation of a new Namespace. This function will refuse to create a namespace with a similar prefix than an existing one present on this node. We use href==NULL in the case of an element creation where the namespace was not defined. Returns a new namespace pointer or NULL

Allocate a new Namespace and fill the fields.

Add it at the end to preserve parsing order ... and checks for existing use of the prefix

xmlSetNs: @node: a node in the document @ns: a namespace pointer Associate a namespace to a node, a posteriori.

xmlFreeNs: @cur: the namespace pointer Free up the structures associated to a namespace

xmlFreeNsList: @cur: the first namespace pointer Free up all the structures associated to the chained namespaces.

xmlNewDtd: @doc: the document pointer @name: the DTD name @ExternalID: the external ID @SystemID: the system ID Creation of a new DTD for the external subset. To create an internal subset, use xmlCreateIntSubset(). Returns a pointer to the new DTD structure

!!!

!!!

Allocate a new DTD and fill the fields.

xmlGetIntSubset: @doc: the document pointer Get the internal subset of a document Returns a pointer to the DTD structure or NULL if not found

xmlCreateIntSubset: @doc: the document pointer @name: the DTD name @ExternalID: the external (PUBLIC) ID @SystemID: the system ID Create the internal subset of a document Returns a pointer to the new DTD structure

Allocate a new DTD and fill the fields.

DICT_FREE: @str: a string Free a string if it is not owned by the "dict" dictionnary in the current scope

DICT_COPY: @str: a string Copy a string using a "dict" dictionnary in the current scope, if availabe.

DICT_CONST_COPY: @str: a string Copy a string using a "dict" dictionnary in the current scope, if availabe.

xmlFreeDtd: @cur: the DTD structure to free up Free a DTD structure.

Cleanup all nodes which are not part of the specific lists of notations, elements, attributes and entities.

TODO !!!

xmlNewDoc: @version: xmlChar string giving the version of XML "1.0" Creates a new XML document Returns a new document

Allocate a new document and fill the fields.

not initialized

The in memory encoding is always UTF8 This field will never change and would be obsolete if not for binary compatibility.

xmlFreeDoc: @cur: pointer to the document Free up all the structures used by a document, tree included.

Do this before freeing the children list to avoid ID lookups

xmlStringLenGetNodeList: @doc: the document @value: the value of the text @len: the length of the string value Parse the value string and build the node list associated. Should produce a flat tree with only TEXTs and ENTITY_REFs. Returns a pointer to the first child

Save the current text.

Non input consuming loop

Non input consuming loops

Read the entity string

Predefined entities don't generate nodes

Create a new REFERENCE_REF node

Handle the last piece of text.

xmlStringGetNodeList: @doc: the document @value: the value of the attribute Parse the value string and build the node list associated. Should produce a flat tree with only TEXTs and ENTITY_REFs. Returns a pointer to the first child

Save the current text.

Non input consuming loop

Non input consuming loops

Read the entity string

Predefined entities don't generate nodes

Create a new REFERENCE_REF node

Handle the last piece of text.

xmlNodeListGetString: @doc: the document @list: a Node list @inLine: should we replace entity contents or show their external form Build the string equivalent to the text contained in the Node list made of TEXTs and ENTITY_REFs Returns a pointer to the string copy, the caller must free it with xmlFree().

an entity content can be any "well balanced chunk", i.e. the result of the content [43] production: http://www.w3.org/TR/REC-xml#NT-content. So it can contain text, CDATA section or nested entity reference nodes (among others). -> we recursive call xmlNodeListGetString() which handles these types

xmlNodeListGetRawString: @doc: the document @list: a Node list @inLine: should we replace entity contents or show their external form Builds the string equivalent to the text contained in the Node list made of TEXTs and ENTITY_REFs, contrary to xmlNodeListGetString() this function doesn't do any character encoding handling. Returns a pointer to the string copy, the caller must free it with xmlFree().

an entity content can be any "well balanced chunk", i.e. the result of the content [43] production: http://www.w3.org/TR/REC-xml#NT-content. So it can contain text, CDATA section or nested entity reference nodes (among others). -> we recursive call xmlNodeListGetRawString() which handles these types

LIBXML_TREE_ENABLED

Allocate a new property and fill the fields.

Add it at the end to preserve parsing order ...

xmlNewProp: @node: the holding node @name: the name of the attribute @value: the value of the attribute Create a new property carried by a node. Returns a pointer to the attribute

LIBXML_TREE_ENABLED

xmlNewNsProp: @node: the holding node @ns: the namespace @name: the name of the attribute @value: the value of the attribute Create a new property tagged with a namespace and carried by a node. Returns a pointer to the attribute

xmlNewNsPropEatName: @node: the holding node @ns: the namespace @name: the name of the attribute @value: the value of the attribute Create a new property tagged with a namespace and carried by a node. Returns a pointer to the attribute

xmlNewDocProp: @doc: the document @name: the name of the attribute @value: the value of the attribute Create a new property carried by a document. Returns a pointer to the attribute

Allocate a new property and fill the fields.

xmlFreePropList: @cur: the first property in the list Free a property and all its siblings, all the children are freed too.

xmlFreeProp: @cur: an attribute Free one attribute, all the content is freed too

Check for ID removal -> leading to invalid references !

xmlRemoveProp: @cur: an attribute Unlink and free one attribute, all the content is freed too Note this doesn't work for namespace definition attributes Returns 0 if success and -1 in case of error.

xmlNewDocPI: @doc: the target document @name: the processing instruction name @content: the PI content Creation of a processing instruction element. Returns a pointer to the new node object.

Allocate a new node and fill the fields.

xmlNewPI: @name: the processing instruction name @content: the PI content Creation of a processing instruction element. Use xmlDocNewPI preferably to get string interning Returns a pointer to the new node object.

xmlNewNode: @ns: namespace if any @name: the node name Creation of a new node element. @ns is optional (NULL). Returns a pointer to the new node object. Uses xmlStrdup() to make copy of @name.

Allocate a new node and fill the fields.

xmlNewNodeEatName: @ns: namespace if any @name: the node name Creation of a new node element. @ns is optional (NULL). Returns a pointer to the new node object, with pointer @name as new node's name. Use xmlNewNode() if a copy of @name string is is needed as new node's name.

Allocate a new node and fill the fields.

we can't check here that name comes from the doc dictionnary

xmlNewDocNode: @doc: the document @ns: namespace if any @name: the node name @content: the XML text content if any Creation of a new node element within a document. @ns and @content are optional (NULL). NOTE: @content is supposed to be a piece of XML CDATA, so it allow entities references, but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant(). Use xmlNewDocRawNode() if you don't need entities support. Returns a pointer to the new node object.

xmlNewDocNodeEatName: @doc: the document @ns: namespace if any @name: the node name @content: the XML text content if any Creation of a new node element within a document. @ns and @content are optional (NULL). NOTE: @content is supposed to be a piece of XML CDATA, so it allow entities references, but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant(). Use xmlNewDocRawNode() if you don't need entities support. Returns a pointer to the new node object.

if name don't come from the doc dictionnary free it here

xmlNewDocRawNode: @doc: the document @ns: namespace if any @name: the node name @content: the text content if any Creation of a new node element within a document. @ns and @content are optional (NULL). Returns a pointer to the new node object.

xmlNewDocFragment: @doc: the document owning the fragment Creation of a new Fragment node. Returns a pointer to the new node object.

Allocate a new DocumentFragment node and fill the fields.

LIBXML_TREE_ENABLED

xmlNewText: @content: the text content Creation of a new text node. Returns a pointer to the new node object.

Allocate a new node and fill the fields.

xmlNewTextChild: @parent: the parent node @ns: a namespace if any @name: the name of the child @content: the text content of the child if any. Creation of a new child element, added at the end of @parent children list. @ns and @content parameters are optional (NULL). If @ns is NULL, the newly created element inherits the namespace of @parent. If @content is non NULL, a child TEXT node will be created containing the string @content. NOTE: Use xmlNewChild() if @content will contain entities that need to be preserved. Use this function, xmlNewTextChild(), if you need to ensure that reserved XML chars that might appear in @content, such as the ampersand, greater-than or less-than signs, are automatically replaced by their XML escaped entity representations. Returns a pointer to the new node object.

Allocate a new node

add the new element at the end of the children list.

LIBXML_TREE_ENABLED

xmlNewCharRef: @doc: the document @name: the char ref string, starting with # or "&# ... ;" Creation of a new character reference node. Returns a pointer to the new node object.

Allocate a new node and fill the fields.

xmlNewReference: @doc: the document @name: the reference name, or the reference string with & and ; Creation of a new reference node. Returns a pointer to the new node object.

Allocate a new node and fill the fields.

The parent pointer in entity is a DTD pointer and thus is NOT updated. Not sure if this is 100% correct. -George

xmlNewDocText: @doc: the document @content: the text content Creation of a new text node within a document. Returns a pointer to the new node object.

xmlNewTextLen: @content: the text content @len: the text len. Creation of a new text node with an extra parameter for the content's length Returns a pointer to the new node object.

Allocate a new node and fill the fields.

xmlNewDocTextLen: @doc: the document @content: the text content @len: the text len. Creation of a new text node with an extra content length parameter. The text node pertain to a given document. Returns a pointer to the new node object.

xmlNewComment: @content: the comment content Creation of a new node containing a comment. Returns a pointer to the new node object.

Allocate a new node and fill the fields.

xmlNewCDataBlock: @doc: the document @content: the CDATA block content content @len: the length of the block Creation of a new node containing a CDATA block. Returns a pointer to the new node object.

Allocate a new node and fill the fields.

xmlNewDocComment: @doc: the document @content: the comment content Creation of a new node containing a comment within a document. Returns a pointer to the new node object.

xmlSetTreeDoc: @tree: the top element @doc: the document update all nodes under the tree to point to the right document

xmlSetListDoc: @list: the first element @doc: the document update all nodes in the list to point to the right document

xmlNewChild: @parent: the parent node @ns: a namespace if any @name: the name of the child @content: the XML content of the child if any. Creation of a new child element, added at the end of @parent children list. @ns and @content parameters are optional (NULL). If @ns is NULL, the newly created element inherits the namespace of @parent. If @content is non NULL, a child list containing the TEXTs and ENTITY_REFs node will be created. NOTE: @content is supposed to be a piece of XML CDATA, so it allows entity references. XML special chars must be escaped first by using xmlEncodeEntitiesReentrant(), or xmlNewTextChild() should be used. Returns a pointer to the new node object.

Allocate a new node

add the new element at the end of the children list.

LIBXML_TREE_ENABLED

xmlAddPropSibling: @prev: the attribute to which @prop is added after @cur: the base attribute passed to calling function @prop: the new attribute Add a new attribute after @prev using @cur as base attribute. When inserting before @cur, @prev is passed as @cur->prev. When inserting after @cur, @prev is passed as @cur. If an existing attribute is found it is detroyed prior to adding @prop. Returns the attribute being inserted or NULL in case of error.

check if an attribute with the same name exists

different instance, destroy it (attributes must be unique)

xmlAddNextSibling: @cur: the child node @elem: the new node Add a new node @elem as the next sibling of @cur If the new node was already inserted in a document it is first unlinked from its existing context. As a result of text merging @elem may be freed. If the new node is ATTRIBUTE, it is added into properties instead of children. If there is an attribute with equal name, it is first destroyed. Returns the new node or NULL in case of error.

xmlAddPrevSibling: @cur: the child node @elem: the new node Add a new node @elem as the previous sibling of @cur merging adjacent TEXT nodes (@elem may be freed) If the new node was already inserted in a document it is first unlinked from its existing context. If the new node is ATTRIBUTE, it is added into properties instead of children. If there is an attribute with equal name, it is first destroyed. Returns the new node or NULL in case of error.

LIBXML_TREE_ENABLED

xmlAddSibling: @cur: the child node @elem: the new node Add a new element @elem to the list of siblings of @cur merging adjacent TEXT nodes (@elem may be freed) If the new element was already inserted in a document it is first unlinked from its existing context. Returns the new element or NULL in case of error.

Constant time is we can rely on the ->parent->last to find the last sibling.

xmlAddChildList: @parent: the parent node @cur: the first node in the list Add a list of node at the end of the child list of the parent merging adjacent TEXT nodes (@cur may be freed) Returns the last child or NULL in case of error.

add the first element at the end of the children list.

If cur and parent->last both are TEXT nodes, then merge them.

if it's the only child, nothing more to be done.

the parent may not be linked to a doc !

xmlAddChild: @parent: the parent node @cur: the child node Add a new node to @parent, at the end of the child (or property) list merging adjacent TEXT nodes (in which case @cur is freed) If the new node is ATTRIBUTE, it is added into properties instead of children. If there is an attribute with equal name, it is first destroyed. Returns the child or NULL in case of error.

If cur is a TEXT node, merge its content with adjacent TEXT nodes cur is then freed.

add the new element at the end of the children list.

this check prevents a loop on tree-traversions if a developer tries to add a node to its parent multiple times

Coalescing

check if an attribute with the same name exists

different instance, destroy it (attributes must be unique)

find the end

xmlGetLastChild: @parent: the parent node Search the last child of a node. Returns the last child or NULL if none.

5 interfaces from DOM ElementTraversal

xmlChildElementCount: @parent: the parent node Finds the current number of child nodes of that element which are element nodes. Note the handling of entities references is different than in the W3C DOM element traversal spec since we don't have back reference from entities content to entities references. Returns the count of element child or 0 if not available

xmlFirstElementChild: @parent: the parent node Finds the first child node of that element which is a Element node Note the handling of entities references is different than in the W3C DOM element traversal spec since we don't have back reference from entities content to entities references. Returns the first element child or NULL if not available

xmlLastElementChild: @parent: the parent node Finds the last child node of that element which is a Element node Note the handling of entities references is different than in the W3C DOM element traversal spec since we don't have back reference from entities content to entities references. Returns the last element child or NULL if not available

xmlPreviousElementSibling: @node: the current node Finds the first closest previous sibling of the node which is an element node. Note the handling of entities references is different than in the W3C DOM element traversal spec since we don't have back reference from entities content to entities references. Returns the previous element sibling or NULL if not available

xmlNextElementSibling: @node: the current node Finds the first closest next sibling of the node which is an element node. Note the handling of entities references is different than in the W3C DOM element traversal spec since we don't have back reference from entities content to entities references. Returns the next element sibling or NULL if not available

LIBXML_TREE_ENABLED

xmlFreeNodeList: @cur: the first node in the list Free a node and all its siblings, this is a recursive behaviour, all the children are freed too.

When a node is a text node or a comment, it uses a global static variable for the name of the node. Otherwise the node name might come from the document's dictionnary

xmlFreeNode: @cur: the node Free a node, this is a recursive behaviour, all the children are freed too. This doesn't unlink the child from the list, use xmlUnlinkNode() first.

use xmlFreeDtd for DTD nodes

When a node is a text node or a comment, it uses a global static variable for the name of the node. Otherwise the node name might come from the document's dictionnary

xmlUnlinkNode: @cur: the node Unlink a node from it's current context, the node is not freed

xmlReplaceNode: @old: the old node @cur: the node Unlink the old node from its current context, prune the new one at the same place. If @cur was already inserted in a document it is first unlinked from its existing context. Returns the @old node

LIBXML_TREE_ENABLED

Copy operations

xmlCopyNamespace: @cur: the namespace Do a copy of the namespace. Returns: a new #xmlNsPtr, or NULL in case of error.

xmlCopyNamespaceList: @cur: the first namespace Do a copy of an namespace list. Returns: a new #xmlNsPtr, or NULL in case of error.

Humm, we are copying an element whose namespace is defined out of the new tree scope. Search it in the original tree and add it at the top of the new tree

correct possibly cycling above the document elt

we have to find something appropriate here since we cant be sure, that the namespce we found is identified by the prefix

this is the nice case

we are in trouble: we need a new reconcilied namespace. This is expensive

tmp->parent = (xmlNodePtr)ret;

Try to handle IDs

xmlCopyProp: @target: the element where the attribute will be grafted @cur: the attribute Do a copy of the attribute. Returns: a new #xmlAttrPtr, or NULL in case of error.

xmlCopyPropList: @target: the element where the attributes will be grafted @cur: the first attribute Do a copy of an attribute list. Returns: a new #xmlAttrPtr, or NULL in case of error.

NOTE about the CopyNode operations ! They are split into external and internal parts for one tricky reason: namespaces. Doing a direct copy of a node say RPM:Copyright without changing the namespace pointer to something else can produce stale links. One way to do it is to keep a reference counter but this doesn't work as soon as one move the element or the subtree out of the scope of the existing namespace. The actual solution seems to add a copy of the namespace at the top of the copied tree if not available in the subtree. Hence two functions, the public front-end call the inner ones The argument "recursive" normally indicates a recursive copy of the node with values 0 (no) and 1 (yes). For XInclude, however, we allow a value of 2 to indicate copy properties and namespace info, but don't recurse on children.

LIBXML_TREE_ENABLED

Allocate a new node and fill the fields.

this is a tricky part for the node register thing: in case ret does get coalesced in xmlAddChild the deregister-node callback is called; so we register ret now already

node could have coalesced

Humm, we are copying an element whose namespace is defined out of the new tree scope. Search it in the original tree and add it at the top of the new tree

reference the existing namespace definition in our own tree.

The copied node will go into a separate document, so to avoid dangling references to the ENTITY_DECL node we cannot keep the reference. Try to find it in the target document.

if parent != NULL we already registered the node above

LIBXML_TREE_ENABLED

the test is required if xmlStaticCopyNode coalesced 2 text nodes

xmlCopyNode: @node: the node @extended: if 1 do a recursive copy (properties, namespaces and children when applicable) if 2 copy properties and namespaces (when applicable) Do a copy of the node. Returns: a new #xmlNodePtr, or NULL in case of error.

xmlDocCopyNode: @node: the node @doc: the document @extended: if 1 do a recursive copy (properties, namespaces and children when applicable) if 2 copy properties and namespaces (when applicable) Do a copy of the node to a given document. Returns: a new #xmlNodePtr, or NULL in case of error.

xmlDocCopyNodeList: @doc: the target document @node: the first node in the list. Do a recursive copy of the node list. Returns: a new #xmlNodePtr, or NULL in case of error.

xmlCopyNodeList: @node: the first node in the list. Do a recursive copy of the node list. Use xmlDocCopyNodeList() if possible to ensure string interning. Returns: a new #xmlNodePtr, or NULL in case of error.

xmlCopyDtd: @dtd: the dtd Do a copy of the dtd. Returns: a new #xmlDtdPtr, or NULL in case of error.

xmlCopyDoc: @doc: the document @recursive: if not zero do a recursive copy. Do a copy of the document info. If recursive, the content tree will be copied too as well as DTD, namespaces and entities. Returns: a new #xmlDocPtr, or NULL in case of error.

LIBXML_TREE_ENABLED

Content access functions

xmlGetLineNo: @node: valid node Get line number of @node. This requires activation of this option before invoking the parser by calling xmlLineNumbersDefault(1) Returns the line number if successful, -1 otherwise

xmlGetNodePath: @node: a node Build a structure based Path for the given node Returns the new path or NULL in case of error. The caller must free the returned string

We cannot express named elements in the default namespace, so use "".

Thumbler index computation TODO: the ocurence test seems bogus for namespaced names

Thumbler index computation

Thumbler index computation

Evaluate if this is the only text- or CDATA-section-node; if yes, then we'll get "text()", otherwise "text()[1]".

Thumbler index computation

Make sure there is enough room

LIBXML_TREE_ENABLED

xmlDocGetRootElement: @doc: the document Get the root element of the document (doc->children is a list containing possibly comments, PIs, etc ...). Returns the #xmlNodePtr for the root or NULL

xmlDocSetRootElement: @doc: the document @root: the new document root element, if root is NULL no action is taken, to remove a node from a document use xmlUnlinkNode(root) instead. Set the root element of the document (doc->children is a list containing possibly comments, PIs, etc ...). Returns the old root element if any was found, NULL if root was NULL

xmlNodeSetLang: @cur: the node being changed @lang: the language description Set the language of a node, i.e. the values of the xml:lang attribute.

LIBXML_TREE_ENABLED

xmlNodeGetLang: @cur: the node being checked Searches the language of a node, i.e. the values of the xml:lang attribute or the one carried by the nearest ancestor. Returns a pointer to the lang value, or NULL if not found It's up to the caller to free the memory with xmlFree().

xmlNodeSetSpacePreserve: @cur: the node being changed @val: the xml:space value ("0": default, 1: "preserve") Set (or reset) the space preserving behaviour of a node, i.e. the value of the xml:space attribute.

LIBXML_TREE_ENABLED

xmlNodeGetSpacePreserve: @cur: the node being checked Searches the space preserving behaviour of a node, i.e. the values of the xml:space attribute or the one carried by the nearest ancestor. Returns -1 if xml:space is not inherited, 0 if "default", 1 if "preserve"

xmlNodeSetName: @cur: the node being changed @name: the new tag name Set (or reset) the name of a node.

xmlNodeSetBase: @cur: the node being changed @uri: the new base URI Set (or reset) the base URI of a node, i.e. the value of the xml:base attribute.

LIBXML_TREE_ENABLED

xmlNodeGetBase: @doc: the document the node pertains to @cur: the node being checked Searches for the BASE URL. The code should work on both XML and HTML document even if base mechanisms are completely different. It returns the base as defined in RFC 2396 sections 5.1.1. Base URI within Document Content and 5.1.2. Base URI from the Encapsulating Entity However it does not return the document base (5.1.3), use xmlDocumentGetBase() for this Returns a pointer to the base URL, or NULL if not found It's up to the caller to free the memory with xmlFree().

xmlNodeBufGetContent: @buffer: a buffer @cur: the node being read Read the value of a node @cur, this can be either the text carried directly by this node if it's a TEXT node or the aggregate string of the values carried by this node child's (TEXT and ENTITY_REF). Entity references are substituted. Fills up the buffer @buffer with this value Returns 0 in case of success and -1 in case of error.

Skip to next node

lookup entity declaration

an entity content can be any "well balanced chunk", i.e. the result of the content [43] production: http://www.w3.org/TR/REC-xml#NT-content -> we iterate through child nodes and recursive call xmlNodeGetContent() which handles all possible node types

xmlNodeGetContent: @cur: the node being read Read the value of a node, this can be either the text carried directly by this node if it's a TEXT node or the aggregate string of the values carried by this node child's (TEXT and ENTITY_REF). Entity references are substituted. Returns a new #xmlChar or NULL if no content is available. It's up to the caller to free the memory with xmlFree().

lookup entity declaration

TODO !!!

TODO !!!

TODO !!!

xmlNodeSetContent: @cur: the node being modified @content: the new value of the content Replace the content of a node. NOTE: @content is supposed to be a piece of XML CDATA, so it allows entity references, but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant() resp. xmlEncodeSpecialChars().

TODO !!!

TODO !!!

TODO !!!

xmlNodeSetContentLen: @cur: the node being modified @content: the new value of the content @len: the size of @content Replace the content of a node. NOTE: @content is supposed to be a piece of XML CDATA, so it allows entity references, but XML special chars need to be escaped first by using xmlEncodeEntitiesReentrant() resp. xmlEncodeSpecialChars().

TODO !!!

TODO !!!

TODO !!!

LIBXML_TREE_ENABLED

xmlNodeAddContentLen: @cur: the node being modified @content: extra content @len: the size of @content Append the extra substring to the node content. NOTE: In contrast to xmlNodeSetContentLen(), @content is supposed to be raw text, so unescaped XML special chars are allowed, entity references are not supported.

xmlNodeAddContent: @cur: the node being modified @content: extra content Append the extra substring to the node content. NOTE: In contrast to xmlNodeSetContent(), @content is supposed to be raw text, so unescaped XML special chars are allowed, entity references are not supported.

xmlTextMerge: @first: the first text node @second: the second text node being merged Merge two text nodes into one Returns the first text node augmented

xmlGetNsList: @doc: the document @node: the current node Search all the namespace applying to a given element. Returns an NULL terminated array of all the #xmlNsPtr found that need to be freed by the caller or NULL if no namespace if defined

LIBXML_TREE_ENABLED

xmlTreeEnsureXMLDecl: @doc: the doc Ensures that there is an XML namespace declaration on the doc. Returns the XML ns-struct or NULL on API and internal errors.

xmlSearchNs: @doc: the document @node: the current node @nameSpace: the namespace prefix Search a Ns registered under a given name space for a document. recurse on the parents until it finds the defined namespace or return NULL otherwise. @nameSpace can be NULL, this is a search for the default namespace. We don't allow to cross entities boundaries. If you don't declare the namespace within those you will be in troubles !!! A warning is generated to cover this case. Returns the namespace pointer or NULL.

The XML-1.0 namespace is normally held on the root element. In this case exceptionally create it on the node element.

Return the XML namespace declaration held by the doc.

xmlNsInScope: @doc: the document @node: the current node @ancestor: the ancestor carrying the namespace @prefix: the namespace prefix Verify that the given namespace held on @ancestor is still in scope on node. Returns 1 if true, 0 if false and -1 in case of error.

xmlSearchNsByHref: @doc: the document @node: the current node @href: the namespace value Search a Ns aliasing a given URI. Recurse on the parents until it finds the defined namespace or return NULL otherwise. Returns the namespace pointer or NULL.

Only the document can hold the XML spec namespace.

The XML-1.0 namespace is normally held on the root element. In this case exceptionally create it on the node element.

Return the XML namespace declaration held by the doc.

xmlNewReconciliedNs: @doc: the document @tree: a node expected to hold the new namespace @ns: the original namespace This function tries to locate a namespace definition in a tree ancestors, or create a new namespace definition node similar to @ns trying to reuse the same prefix. However if the given prefix is null (default namespace) or reused within the subtree defined by @tree or on one of its ancestors then a new prefix is generated. Returns the (new) namespace definition or NULL in case of error

Search an existing namespace definition inherited.

Find a close prefix which is not already in use. Let's strip namespace prefixes longer than 20 chars !

OK, now we are ready to create a new one.

xmlReconciliateNs: @doc: the document @tree: a node defining the subtree to reconciliate This function checks that all the namespaces declared within the given tree are properly declared. This is needed for example after Copy or Cut and then paste operations. The subtree may still hold pointers to namespace declarations outside the subtree or invalid/masked. As much as possible the function try to reuse the existing namespaces found in the new environment. If not possible the new namespaces are redeclared on @tree at the top of the given subtree. Returns the number of namespace declarations created or -1 in case of error.

Reconciliate the node namespace

initialize the cache if needed

OK we need to recreate a new namespace definition

:-( what if else ???

check if we need to grow the cache buffers.

now check for namespace hold by attributes on the node.

initialize the cache if needed

OK we need to recreate a new namespace definition

:-( what if else ???

check if we need to grow the cache buffers.

Browse the full subtree, deep first

deep first

then siblings

go up to parents->next if needed

exit condition

LIBXML_TREE_ENABLED

We want the attr to be in no namespace.

We want the attr to be in the specified namespace.

Check if there is a default/fixed attribute declaration in the internal or external subset.

We need the QName of the element for the DTD-lookup.

The common and nice case: Attr in no namespace.

The ugly case: Search using the prefixes of in-scope ns-decls corresponding to @nsName.

Only default/fixed attrs are relevant.

LIBXML_TREE_ENABLED

Note that we return at least the empty string. TODO: Do we really always want that?

Optimization for the common case: only 1 text node.

xmlHasProp: @node: the node @name: the attribute name Search an attribute associated to a node This function also looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off. Returns the attribute or the attribute declaration or NULL if neither was found.

Check on the properties attached to the node

Check if there is a default declaration in the internal or external subsets

return attribute declaration only if a default value is given (that includes #FIXED declarations)

xmlHasNsProp: @node: the node @name: the attribute name @nameSpace: the URI of the namespace Search for an attribute associated to a node This attribute has to be anchored in the namespace specified. This does the entity substitution. This function looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off. Note that a namespace of NULL indicates to use the default namespace. Returns the attribute or the attribute declaration or NULL if neither was found.

xmlGetProp: @node: the node @name: the attribute name Search and get the value of an attribute associated to a node This does the entity substitution. This function looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off. NOTE: this function acts independently of namespaces associated to the attribute. Use xmlGetNsProp() or xmlGetNoNsProp() for namespace aware processing. Returns the attribute value or NULL if not found. It's up to the caller to free the memory with xmlFree().

xmlGetNoNsProp: @node: the node @name: the attribute name Search and get the value of an attribute associated to a node This does the entity substitution. This function looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off. This function is similar to xmlGetProp except it will accept only an attribute in no namespace. Returns the attribute value or NULL if not found. It's up to the caller to free the memory with xmlFree().

xmlGetNsProp: @node: the node @name: the attribute name @nameSpace: the URI of the namespace Search and get the value of an attribute associated to a node This attribute has to be anchored in the namespace specified. This does the entity substitution. This function looks in DTD attribute declaration for #FIXED or default declaration values unless DTD use has been turned off. Returns the attribute value or NULL if not found. It's up to the caller to free the memory with xmlFree().

xmlUnsetProp: @node: the node @name: the attribute name Remove an attribute carried by a node. This handles only attributes in no namespace. Returns 0 if successful, -1 if not found

xmlUnsetNsProp: @node: the node @ns: the namespace definition @name: the attribute name Remove an attribute carried by a node. Returns 0 if successful, -1 if not found

xmlSetProp: @node: the node @name: the attribute name (a QName) @value: the attribute value Set (or reset) an attribute carried by a node. If @name has a prefix, then the corresponding namespace-binding will be used, if in scope; it is an error it there's no such ns-binding for the prefix in scope. Returns the attribute pointer.

handle QNames

xmlSetNsProp: @node: the node @ns: the namespace definition @name: the attribute name @value: the attribute value Set (or reset) an attribute carried by a node. The ns structure must be in scope, this is not checked Returns the attribute pointer.

Modify the attribute's value.

No equal attr found; create a new one.

LIBXML_TREE_ENABLED

xmlNodeIsText: @node: the node Is this node a Text node ? Returns 1 yes, 0 no

xmlIsBlankNode: @node: the node Checks whether this node is an empty or whitespace only (and possibly ignorable) text-node. Returns 1 yes, 0 no

xmlTextConcat: @node: the node @content: the content @len: @content length Concat the given string at the end of the existing node content Returns -1 in case of error, 0 otherwise

need to check if content is currently in the dictionary

Output : to a FILE or in memory

xmlBufferCreate: routine to create an XML buffer. returns the new structure.

xmlBufferCreateSize: @size: initial size of buffer routine to create an XML buffer. returns the new structure.

+1 for ending null

xmlBufferCreateStatic: @mem: the memory area @size: the size in byte routine to create an XML buffer from an immutable memory area. The area won't be modified nor copied, and is expected to be present until the end of the buffer lifetime. returns the new structure.

xmlBufferSetAllocationScheme: @buf: the buffer to tune @scheme: allocation scheme to use Sets the allocation scheme for this buffer

xmlBufferFree: @buf: the buffer to free Frees an XML buffer. It frees both the content and the structure which encapsulate it.

xmlBufferEmpty: @buf: the buffer empty a buffer.

xmlBufferShrink: @buf: the buffer to dump @len: the number of xmlChar to remove Remove the beginning of an XML buffer. Returns the number of #xmlChar removed, or -1 in case of failure.

we just move the content pointer, but also make sure the perceived buffer size has shrinked accordingly

sometimes though it maybe be better to really shrink on IO buffers

xmlBufferGrow: @buf: the buffer @len: the minimum free size to allocate Grow the available space of an XML buffer. Returns the new available space or -1 in case of error

Windows has a BIG problem on realloc timing, so we try to double the buffer size (if that's enough) (bug 146697) Apparently BSD too, and it's probably best for linux too On an embedded system this may be something to change

xmlBufferDump: @file: the file output @buf: the buffer to dump Dumps an XML buffer to a FILE . Returns the number of #xmlChar written

xmlBufferContent: @buf: the buffer Function to extract the content of a buffer Returns the internal content

xmlBufferLength: @buf: the buffer Function to get the length of a buffer Returns the length of data in the internal content

xmlBufferResize: @buf: the buffer to resize @size: the desired size Resize a buffer to accommodate minimum size of @size. Returns 0 in case of problems, 1 otherwise

Don't resize if we don't have to

figure out new size

ake care of empty cas

move data back to start

if we are reallocating a buffer far from being full, it's better to make a new allocation and copy only the used range and free the old one.

xmlBufferAdd: @buf: the buffer to dump @str: the #xmlChar string @len: the number of #xmlChar to add Add a string range to an XML buffer. if len == -1, the length of str is recomputed. Returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error.

xmlBufferAddHead: @buf: the buffer @str: the #xmlChar string @len: the number of #xmlChar to add Add a string range to the beginning of an XML buffer. if len == -1, the length of @str is recomputed. Returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error.

We can add it in the space previously shrinked

xmlBufferCat: @buf: the buffer to add to @str: the #xmlChar string Append a zero terminated string to an XML buffer. Returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error.

xmlBufferCCat: @buf: the buffer to dump @str: the C char string Append a zero terminated C string to an XML buffer. Returns 0 successful, a positive error code number otherwise and -1 in case of internal or API error.

xmlBufferWriteCHAR: @buf: the XML buffer @string: the string to add routine which manages and grows an output buffer. This one adds xmlChars at the end of the buffer.

xmlBufferWriteChar: @buf: the XML buffer output @string: the string to add routine which manage and grows an output buffer. This one add C chars at the end of the array.

xmlBufferWriteQuotedString: @buf: the XML buffer output @string: the string to add routine which manage and grows an output buffer. This one writes a quoted or double quoted #xmlChar string, checking first if it holds quote or double-quotes internally

xmlGetDocCompressMode: @doc: the document get the compression ratio for a document, ZLIB based Returns 0 (uncompressed) to 9 (max compression)

xmlSetDocCompressMode: @doc: the document @mode: the compression ratio set the compression ratio for a document, ZLIB based Correct values: 0 (uncompressed) to 9 (max compression)

xmlGetCompressMode: get the default compression mode used, ZLIB based. Returns 0 (uncompressed) to 9 (max compression)

xmlSetCompressMode: @mode: the compression ratio set the default compression mode used, ZLIB based Correct values: 0 (uncompressed) to 9 (max compression)

old ns decl reference

new ns decl reference

Shadowed at this depth

depth: >= 0 == @node's ns-decls -1 == @parent's ns-decls -2 == the doc->oldNs XML ns-decl -3 == the doc->oldNs storage ns-decls -4 == ns-decls provided via custom ns-handling

xmlDOMWrapNsMapFree: @map: the ns-map Frees the ns-map

xmlDOMWrapNsMapAddItem: @map: the ns-map @oldNs: the old ns-struct @newNs: the new ns-struct @depth: depth and ns-kind information Adds an ns-mapping item.

Create the ns-map.

Reuse an item from the pool.

Create a new item.

First ever.

Append.

Set on first position.

xmlDOMWrapStoreNs: @doc: the doc @nsName: the namespace name @prefix: the prefix Creates or reuses an xmlNs struct on doc->oldNs with the given prefix and namespace name. Returns the aquired ns struct or NULL in case of an API or internal error.

Reuse.

Create.

xmlDOMWrapNewCtxt: Allocates and initializes a new DOM-wrapper context. Returns the xmlDOMWrapCtxtPtr or NULL in case of an internal errror.

xmlDOMWrapFreeCtxt: @ctxt: the DOM-wrapper context Frees the DOM-wrapper context.

TODO: Store the namespace map in the context.

xmlTreeLookupNsListByPrefix: @nsList: a list of ns-structs @prefix: the searched prefix Searches for a ns-decl with the given prefix in @nsList. Returns the ns-decl if found, NULL if not found and on API errors.

xmlDOMWrapNSNormGatherInScopeNs: @map: the namespace map @node: the node to start with Puts in-scope namespaces into the ns-map. Returns 0 on success, -1 on API or internal errors.

Get in-scope ns-decls of @parent.

Skip shadowed prefixes.

Insert mapping.

XML_TREE_ADOPT_STR: If we have a dest-dict, put @str in the dict; otherwise copy it, when it was in the source-dict.

XML_TREE_ADOPT_STR_2: If @str was in the source-dict, then put it in dest-dict or copy it.

xmlDOMWrapNSNormAddNsMapItem2: For internal use. Adds a ns-decl mapping. Returns 0 on success, -1 on internal errors.

xmlDOMWrapRemoveNode: @ctxt: a DOM wrapper context @doc: the doc @node: the node to be removed. @options: set of options, unused at the moment Unlinks the given node from its owner. This will substitute ns-references to node->nsDef for ns-references to doc->oldNs, thus ensuring the removed branch to be autark wrt ns-references. NOTE: This function was not intensively tested. Returns 0 on success, 1 if the node is not supported, -1 on API and internal errors.

TODO: 0 or -1 ?

Save out-of-scope ns-references in doc->oldNs.

No break on purpose.

Find a mapping.

User defined.

Add to doc's oldNs.

Add mapping.

xmlSearchNsByNamespaceStrict: @doc: the document @node: the start node @nsName: the searched namespace name @retNs: the resulting ns-decl @prefixed: if the found ns-decl must have a prefix (for attributes) Dynamically searches for a ns-declaration which matches the given @nsName in the ancestor-or-self axis of @node. Returns 1 if a ns-decl was found, 0 if not and -1 on API and internal errors.

Check the last level of ns-decls for a shadowing prefix.

Shadowed.

Ns-name comparison.

At this point the prefix can only be shadowed, if we are the the (at least) 3rd level of ns-decls.

TODO: Should we try to find a matching ns-name only once? This here keeps on searching. I think we should try further since, there might be an other matching ns-decl with an unshadowed prefix.

xmlSearchNsByPrefixStrict: @doc: the document @node: the start node @prefix: the searched namespace prefix @retNs: the resulting ns-decl Dynamically searches for a ns-declaration which matches the given @nsName in the ancestor-or-self axis of @node. Returns 1 if a ns-decl was found, 0 if not and -1 on API and internal errors.

Disabled namespaces, e.g. xmlns:abc="".

xmlDOMWrapNSNormDeclareNsForced: @doc: the doc @elem: the element-node to declare on @nsName: the namespace-name of the ns-decl @prefix: the preferred prefix of the ns-decl @checkShadow: ensure that the new ns-decl doesn't shadow ancestor ns-decls Declares a new namespace on @elem. It tries to use the given @prefix; if a ns-decl with the given prefix is already existent on @elem, it will generate an other prefix. Returns 1 if a ns-decl was found, 0 if not and -1 on API and internal errors.

Create a ns-decl on @anchor.

Lookup whether the prefix is unused in elem's ns-decls.

Does it shadow ancestor ns-decls?

xmlDOMWrapNSNormAquireNormalizedNs: @doc: the doc @elem: the element-node to declare namespaces on @ns: the ns-struct to use for the search @retNs: the found/created ns-struct @nsMap: the ns-map @depth: the current tree depth @ancestorsOnly: search in ancestor ns-decls only @prefixed: if the searched ns-decl must have a prefix (for attributes) Searches for a matching ns-name in the ns-decls of @nsMap, if not found it will either declare it on @elem, or store it in doc->oldNs. If a new ns-decl needs to be declared on @elem, it tries to use the @ns->prefix for it, if this prefix is already in use on @elem, it will change the prefix or the new ns-decl. Returns 0 if succeeded, -1 otherwise and on API/internal errors.

Handle XML namespace.

Insert XML namespace mapping.

If the search should be done in ancestors only and no @elem (the first ancestor) was specified, then skip the search.

Try to find an equal ns-name in in-scope ns-decls.

ancestorsOnly: This should be turned on to gain speed, if one knows that the branch itself was already ns-wellformed and no stale references existed. I.e. it searches in the ancestor axis only.

Skip shadowed prefixes.

Skip xmlns="" or xmlns:foo="".

Ensure a prefix if wanted.

Equal ns name

Set the mapping.

No luck, the namespace is out of scope or shadowed.

Store ns-decls in "oldNs" of the document-node.

Insert mapping.

Does it shadow ancestor ns-decls?

Shadows.

xmlDOMWrapReconcileNamespaces: @ctxt: DOM wrapper context, unused at the moment @elem: the element-node @options: option flags Ensures that ns-references point to ns-decls hold on element-nodes. Ensures that the tree is namespace wellformed by creating additional ns-decls where needed. Note that, since prefixes of already existent ns-decls can be shadowed by this process, it could break QNames in attribute values or element content. NOTE: This function was not intensively tested. Returns 0 if succeeded, -1 otherwise and on API/internal errors.

topmi = NULL,

@ancestorsOnly should be set by an option flag.

Namespace declarations.

Gather ancestor in-scope ns-decls.

Lookup the ns ancestor-axis for equal ns-decls in scope.

A redundant ns-decl was found. Add it to the list of redundant ns-decls.

Remove the ns-decl from the element-node.

Skip ns-references handling if the referenced ns-decl is declared on the same element.

Does it shadow any ns-decl?

Push mapping.

No break on purpose.

No ns, no fun.

Adjust the reference if this was a redundant ns-decl.

Adopt ns-references.

Search for a mapping.

Aquire a normalized ns-decl and add it to the map.

Process attributes.

Process content of element-nodes only.

Pop mappings.

Unshadow.

xmlDOMWrapAdoptBranch: @ctxt: the optional context for custom processing @sourceDoc: the optional sourceDoc @node: the element-node to start with @destDoc: the destination doc for adoption @destParent: the optional new parent of @node in @destDoc @options: option flags Ensures that ns-references point to @destDoc: either to elements->nsDef entries if @destParent is given, or to @destDoc->oldNs otherwise. If @destParent is given, it ensures that the tree is namespace wellformed by creating additional ns-decls where needed. Note that, since prefixes of already existent ns-decls can be shadowed by this process, it could break QNames in attribute values or element content. NOTE: This function was not intensively tested. Returns 0 if succeeded, -1 otherwise and on API/internal errors.

gather @parent's ns-decls.

@ancestorsOnly should be set per option.

Optimize string adoption for equal or none dicts.

Get the ns-map from the context if available.

Disable search for ns-decls in the parent-axis of the desination element, if: 1) there's no destination parent 2) custom ns-reference handling is used

Paranoid source-doc sanity check.

We'll assume XIncluded nodes if the doc differs. TODO: Do we need to reconciliate XIncluded nodes? This here skips XIncluded nodes and tries to handle broken sequences.

TODO

Namespace declarations. - ns->href and ns->prefix are never in the dict, so we need not move the values over to the destination dict. - Note that for custom handling of ns-references, the ns-decls need not be stored in the ns-map, since they won't be referenced by node->ns.

Gather @parent's in-scope ns-decls.

NOTE: ns->prefix and ns->href are never in the dict. XML_TREE_ADOPT_STR(ns->prefix) XML_TREE_ADOPT_STR(ns->href)

Does it shadow any ns-decl?

Push mapping.

No break on purpose.

No namespace, no fun.

Adopt ns-references.

Search for a mapping.

No matching namespace in scope. We need a new one.

User-defined behaviour.

Insert mapping if ns is available; it's the users fault if not.

Aquire a normalized ns-decl and add it to the map.

ns-decls on curElem or on destDoc->oldNs

ns-decls must be prefixed for attributes.

Further node properties. TODO: Is this all?

Walk attributes.

Process first attribute node.

Attributes.

This puts the content in the dest dict, only if it was previously in the source dict.

Remove reference to the entitity-node.

Assign new entity-node if available.

Walk the tree.

TODO: Do we expect nsDefs on XML_XINCLUDE_START?

Pop mappings.

Unshadow.

Cleanup.

Just cleanup the map but don't free.

xmlDOMWrapCloneNode: @ctxt: the optional context for custom processing @sourceDoc: the optional sourceDoc @node: the node to start with @resNode: the clone of the given @node @destDoc: the destination doc @destParent: the optional new parent of @node in @destDoc @deep: descend into child if set @options: option flags References of out-of scope ns-decls are remapped to point to @destDoc: 1) If @destParent is given, then nsDef entries on element-nodes are used 2) If no @destParent is given, then @destDoc->oldNs entries are used. This is the case when you don't know already where the cloned branch will be added to. If @destParent is given, it ensures that the tree is namespace wellformed by creating additional ns-decls where needed. Note that, since prefixes of already existent ns-decls can be shadowed by this process, it could break QNames in attribute values or element content. TODO: 1) What to do with XInclude? Currently this returns an error for XInclude. Returns 0 if the operation succeeded, 1 if a node of unsupported (or not yet supported) type was given, -1 on API/internal errors.

int adoptStr = 1;

gather @parent's ns-decls.

@ancestorsOnly: TODO: @ancestorsOnly should be set per option.

The destination dict

TODO: Initially we support only element-nodes.

Check node->doc sanity.

Might be an XIncluded node.

Reuse the namespace map of the context.

We'll assume XIncluded nodes if the doc differs. TODO: Do we need to reconciliate XIncluded nodes? TODO: This here returns -1 in this case.

Create a new node.

TODO: What to do with XInclude?

Nodes of xmlNode structure.

Set hierachical links.

Attributes (xmlAttr).

Set hierachical links. TODO: Change this to add to the end of attributes.

TODO QUESTION: Any other nodes expected?

Clone the name of the node if any.

NOTE: Although xmlStringTextNoenc is never assigned to a node in tree.c, it might be set in Libxslt via "xsl:disable-output-escaping".

TODO

Namespace declarations.

Gather @parent's in-scope ns-decls.

Clone namespace declarations.

Create a new xmlNs.

Note that for custom handling of ns-references, the ns-decls need not be stored in the ns-map, since they won't be referenced by node->ns.

Does it shadow any ns-decl?

Mark as shadowed at the current depth.

Push mapping.

cur->ns will be processed further down.

IDs will be processed further down.

cur->ns will be processed further down.

Note that this will also cover the values of attributes.

TODO: What to do here?

Different doc: Assign new entity-node if available.

Same doc: Use the current node's entity declaration and value.

handle_ns_reference:

The following will take care of references to ns-decls and is intended only for element- and attribute-nodes.

Adopt ns-references.

Search for a mapping.

This is the nice case: a mapping was found.

No matching namespace in scope. We need a new one.

User-defined behaviour.

Add user's mapping.

Aquire a normalized ns-decl and add it to the map.

ns-decls on curElem or on destDoc->oldNs

if we need to search only in the ancestor-axis

ns-decls must be prefixed for attributes.

Some post-processing. Handle ID attributes.

TODO: error message.

The following will traverse the tree Walk the element's attributes before descending into child-nodes.

Descend into child-nodes.

At this point we are done with the node, its content and an element-nodes's attribute-nodes.

TODO: Do we expect nsDefs on XML_XINCLUDE_START?

Pop mappings.

Unshadow.

Set clone->last.

Process parent --> next;

This is for attributes only.

Process parent-element --> children.

Cleanup.

Just cleanup the map but don't free.

TODO: Should we try a cleanup of the cloned node in case of a fatal error?

xmlDOMWrapAdoptAttr: @ctxt: the optional context for custom processing @sourceDoc: the optional source document of attr @attr: the attribute-node to be adopted @destDoc: the destination doc for adoption @destParent: the optional new parent of @attr in @destDoc @options: option flags @attr is adopted by @destDoc. Ensures that ns-references point to @destDoc: either to elements->nsDef entries if @destParent is given, or to @destDoc->oldNs otherwise. Returns 0 if succeeded, -1 otherwise and on API/internal errors.

TODO: User defined.

XML Namespace.

Store in @destDoc->oldNs.

Declare on @destParent.

Walk content.

Remove reference to the entitity-node.

Assign new entity-node if available.

xmlDOMWrapAdoptNode: @ctxt: the optional context for custom processing @sourceDoc: the optional sourceDoc @node: the node to start with @destDoc: the destination doc @destParent: the optional new parent of @node in @destDoc @options: option flags References of out-of scope ns-decls are remapped to point to @destDoc: 1) If @destParent is given, then nsDef entries on element-nodes are used 2) If no @destParent is given, then @destDoc->oldNs entries are used This is the case when you have an unliked node and just want to move it to the context of If @destParent is given, it ensures that the tree is namespace wellformed by creating additional ns-decls where needed. Note that, since prefixes of already existent ns-decls can be shadowed by this process, it could break QNames in attribute values or element content. NOTE: This function was not intensively tested. Returns 0 if the operation succeeded, 1 if a node of unsupported type was given, 2 if a node of not yet supported type was given and -1 on API/internal errors.

Check node->doc sanity.

Might be an XIncluded node.

TODO: Support document-fragment-nodes.

Unlink only if @node was not already added to @destParent.

Optimize string adoption.

Remove reference to the entitity-node.

Assign new entity-node if available.

www.w3.org/TR/2002/REC-xhtml1-20020801/

www.w3.org/TR/REC-xml#NT-content.

www.w3.org/TR/REC-xml#NT-content.

", 7)) ||

", 6)) ||

www.w3.org/TR/REC-xml#NT-content

libxml.h

invalid hexadecimal character value\n

invalid decimal character value\n

unterminated entity reference %15s\n

string is not in UTF-8\n

unexpected error number\n

t

e

x

t

t

e

x

t

n

o

e

n

c

c

o

m

m

e

n

t

x

m

l

building QName

:

:

x

m

l

:

:

:

QName split

QName split

:

:

a

z

A

Z

_

a

z

A

Z

0

9

_

-

.

_

.

-

_

a

z

A

Z

_

a

z

A

Z

0

9

_

-

.

:

a

z

A

Z

_

a

z

A

Z

0

9

_

-

.

_

.

-

_

:

_

.

-

_

a

z

A

Z

_

:

a

z

A

Z

0

9

_

-

.

:

_

:

.

:

-

_

a

z

A

Z

0

9

_

-

.

:

a

z

A

Z

0

9

_

-

.

:

.

:

-

_

.

:

-

_

xml

building namespace

xmlSetNs: node == NULL\n

xmlFreeNs : ns == NULL\n

xmlFreeNsList : ns == NULL\n

xmlNewDtd(%s): document %s already have a DTD %s\n

building DTD

xmlCreateIntSubset(): document %s already have an internal subset\n

building internal subset

building internal subset

building internal subset

building internal subset

dict

dict

dict

1.0

1.0

building doc

building doc

xmlFreeDoc : document == NULL\n

&

#

x

;

0

9

0

a

f

a

A

F

A

;

#

;

0

9

0

;

;

t generate nodes */ val = xmlStrndup(q, cur - q); ent = xmlGetDocEntity(doc, val); if ((ent != NULL) && (ent->etype == XML_INTERNAL_PREDEFINED_ENTITY)) { if (last == NULL) { node = xmlNewDocText(doc, ent->content); last = ret = node; } else if (last->type != XML_TEXT_NODE) { node = xmlNewDocText(doc, ent->content); last = xmlAddNextSibling(last, node); } else xmlNodeAddContent(last, ent->content); } else { /* * Create a new REFERENCE_REF node */ node = xmlNewReference(doc, val); if (node == NULL) { if (val != NULL) xmlFree(val); return(ret); } else if ((ent != NULL) && (ent->children == NULL)) { xmlNodePtr temp; ent->children = xmlStringGetNodeList(doc, (const xmlChar*)node->content); ent->owner = 1; temp = ent->children; while (temp) { temp->parent = (xmlNodePtr)ent; ent->last = temp; temp = temp->next; } } if (last == NULL) { last = ret = node; } else { last = xmlAddNextSibling(last, node); } } xmlFree(val); } cur++; q = cur; } if (charval != 0) { xmlChar buf[10]; int l; l = xmlCopyCharMultiByte(buf, charval); buf[l] = 0; node = xmlNewDocText(doc, buf); if (node != NULL) { if (last == NULL) { last = ret = node; } else { last = xmlAddNextSibling(last, node); } } charval = 0; } } else cur++; } if ((cur != q) || (ret == NULL)) { /* * Handle the last piece of text. */ if ((last != NULL) && (last->type == XML_TEXT_NODE)) { xmlNodeAddContentLen(last, q, cur - q); } else { node = xmlNewDocTextLen(doc, q, cur - q); if (node == NULL) return(ret); if (last == NULL) { ret = node; } else { xmlAddNextSibling(last, node); } } } return(ret); } /** * xmlStringGetNodeList: * @doc: the document * @value: the value of the attribute * * Parse the value string and build the node list associated. Should * produce a flat tree with only TEXTs and ENTITY_REFs. * Returns a pointer to the first child */ xmlNodePtr xmlStringGetNodeList(xmlDocPtr doc, const xmlChar *value) { xmlNodePtr ret = NULL, last = NULL; xmlNodePtr node; xmlChar *val; const xmlChar *cur = value; const xmlChar *q; xmlEntityPtr ent; if (value == NULL) return(NULL); q = cur; while (*cur != 0) { if (cur[0] ==

) { int charval = 0; xmlChar tmp; /* * Save the current text. */ if (cur != q) { if ((last != NULL) && (last->type == XML_TEXT_NODE)) { xmlNodeAddContentLen(last, q, cur - q); } else { node = xmlNewDocTextLen(doc, q, cur - q); if (node == NULL) return(ret); if (last == NULL) last = ret = node; else { last->next = node; node->prev = last; last = node; } } } q = cur; if ((cur[1] ==

) && (cur[2] ==

)) { cur += 3; tmp = *cur; while (tmp !=

) { /* Non input consuming loop */ if ((tmp >=

) && (tmp <=

)) charval = charval * 16 + (tmp -

); else if ((tmp >=

) && (tmp <=

)) charval = charval * 16 + (tmp -

) + 10; else if ((tmp >=

) && (tmp <=

)) charval = charval * 16 + (tmp -

) + 10; else { xmlTreeErr(XML_TREE_INVALID_HEX, (xmlNodePtr) doc, NULL); charval = 0; break; } cur++; tmp = *cur; } if (tmp ==

) cur++; q = cur; } else if (cur[1] ==

) { cur += 2; tmp = *cur; while (tmp !=

) { /* Non input consuming loops */ if ((tmp >=

) && (tmp <=

)) charval = charval * 10 + (tmp -

); else { xmlTreeErr(XML_TREE_INVALID_DEC, (xmlNodePtr) doc, NULL); charval = 0; break; } cur++; tmp = *cur; } if (tmp ==

) cur++; q = cur; } else { /* * Read the entity string */ cur++; q = cur; while ((*cur != 0) && (*cur !=

)) cur++; if (*cur == 0) { xmlTreeErr(XML_TREE_UNTERMINATED_ENTITY, (xmlNodePtr) doc, (const char *) q); return(ret); } if (cur != q) { /* * Predefined entities don

well balanced chunk

&

;

xmlGetNodeListString : invalid node type %d\n

t do any character encoding handling. * * Returns a pointer to the string copy, the caller must free it with xmlFree(). */ xmlChar * xmlNodeListGetRawString(xmlDocPtr doc, xmlNodePtr list, int inLine) { xmlNodePtr node = list; xmlChar *ret = NULL; xmlEntityPtr ent; if (list == NULL) return (NULL); while (node != NULL) { if ((node->type == XML_TEXT_NODE) || (node->type == XML_CDATA_SECTION_NODE)) { if (inLine) { ret = xmlStrcat(ret, node->content); } else { xmlChar *buffer; buffer = xmlEncodeSpecialChars(doc, node->content); if (buffer != NULL) { ret = xmlStrcat(ret, buffer); xmlFree(buffer); } } } else if (node->type == XML_ENTITY_REF_NODE) { if (inLine) { ent = xmlGetDocEntity(doc, node->name); if (ent != NULL) { xmlChar *buffer; /* an entity content can be any "well balanced chunk", * i.e. the result of the content [43] production: * http://www.w3.org/TR/REC-xml#NT-content. * So it can contain text, CDATA section or nested * entity reference nodes (among others). * -> we recursive call xmlNodeListGetRawString() * which handles these types */ buffer = xmlNodeListGetRawString(doc, ent->children, 1); if (buffer != NULL) { ret = xmlStrcat(ret, buffer); xmlFree(buffer); } } else { ret = xmlStrcat(ret, node->content); } } else { xmlChar buf[2]; buf[0] =

; buf[1] = 0; ret = xmlStrncat(ret, buf, 1); ret = xmlStrcat(ret, node->name); buf[0] =

; buf[1] = 0; ret = xmlStrncat(ret, buf, 1); } } #if 0 else { xmlGenericError(xmlGenericErrorContext, "xmlGetNodeListString : invalid node type %d\n", node->type); } #endif node = node->next; } return (ret); } #endif /* LIBXML_TREE_ENABLED */ static xmlAttrPtr xmlNewPropInternal(xmlNodePtr node, xmlNsPtr ns, const xmlChar * name, const xmlChar * value, int eatname) { xmlAttrPtr cur; xmlDocPtr doc = NULL; if ((node != NULL) && (node->type != XML_ELEMENT_NODE)) { if ((eatname == 1) && ((node->doc == NULL) || (!(xmlDictOwns(node->doc->dict, name))))) xmlFree((xmlChar *) name); return (NULL); } /* * Allocate a new property and fill the fields. */ cur = (xmlAttrPtr) xmlMalloc(sizeof(xmlAttr)); if (cur == NULL) { if ((eatname == 1) && ((node == NULL) || (node->doc == NULL) || (!(xmlDictOwns(node->doc->dict, name))))) xmlFree((xmlChar *) name); xmlTreeErrMemory("building attribute"); return (NULL); } memset(cur, 0, sizeof(xmlAttr)); cur->type = XML_ATTRIBUTE_NODE; cur->parent = node; if (node != NULL) { doc = node->doc; cur->doc = doc; } cur->ns = ns; if (eatname == 0) { if ((doc != NULL) && (doc->dict != NULL)) cur->name = (xmlChar *) xmlDictLookup(doc->dict, name, -1); else cur->name = xmlStrdup(name); } else cur->name = name; if (value != NULL) { xmlNodePtr tmp; if(!xmlCheckUTF8(value)) { xmlTreeErr(XML_TREE_NOT_UTF8, (xmlNodePtr) doc, NULL); if (doc != NULL) doc->encoding = xmlStrdup(BAD_CAST "ISO-8859-1"); } cur->children = xmlNewDocText(doc, value); cur->last = NULL; tmp = cur->children; while (tmp != NULL) { tmp->parent = (xmlNodePtr) cur; if (tmp->next == NULL) cur->last = tmp; tmp = tmp->next; } } /* * Add it at the end to preserve parsing order ... */ if (node != NULL) { if (node->properties == NULL) { node->properties = cur; } else { xmlAttrPtr prev = node->properties; while (prev->next != NULL) prev = prev->next; prev->next = cur; cur->prev = prev; } } if ((value != NULL) && (node != NULL) && (xmlIsID(node->doc, node, cur) == 1)) xmlAddID(NULL, node->doc, value, cur); if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue)) xmlRegisterNodeDefaultValue((xmlNodePtr) cur); return (cur); } #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_HTML_ENABLED) || \ defined(LIBXML_SCHEMAS_ENABLED) /** * xmlNewProp: * @node: the holding node * @name: the name of the attribute * @value: the value of the attribute * * Create a new property carried by a node. * Returns a pointer to the attribute */ xmlAttrPtr xmlNewProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value) { if (name == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNewProp : name == NULL\n"); #endif return(NULL); } return xmlNewPropInternal(node, NULL, name, value, 0); } #endif /* LIBXML_TREE_ENABLED */ /** * xmlNewNsProp: * @node: the holding node * @ns: the namespace * @name: the name of the attribute * @value: the value of the attribute * * Create a new property tagged with a namespace and carried by a node. * Returns a pointer to the attribute */ xmlAttrPtr xmlNewNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name, const xmlChar *value) { if (name == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNewNsProp : name == NULL\n"); #endif return(NULL); } return xmlNewPropInternal(node, ns, name, value, 0); } /** * xmlNewNsPropEatName: * @node: the holding node * @ns: the namespace * @name: the name of the attribute * @value: the value of the attribute * * Create a new property tagged with a namespace and carried by a node. * Returns a pointer to the attribute */ xmlAttrPtr xmlNewNsPropEatName(xmlNodePtr node, xmlNsPtr ns, xmlChar *name, const xmlChar *value) { if (name == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNewNsPropEatName : name == NULL\n"); #endif return(NULL); } return xmlNewPropInternal(node, ns, name, value, 1); } /** * xmlNewDocProp: * @doc: the document * @name: the name of the attribute * @value: the value of the attribute * * Create a new property carried by a document. * Returns a pointer to the attribute */ xmlAttrPtr xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value) { xmlAttrPtr cur; if (name == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNewDocProp : name == NULL\n"); #endif return(NULL); } /* * Allocate a new property and fill the fields. */ cur = (xmlAttrPtr) xmlMalloc(sizeof(xmlAttr)); if (cur == NULL) { xmlTreeErrMemory("building attribute"); return(NULL); } memset(cur, 0, sizeof(xmlAttr)); cur->type = XML_ATTRIBUTE_NODE; if ((doc != NULL) && (doc->dict != NULL)) cur->name = xmlDictLookup(doc->dict, name, -1); else cur->name = xmlStrdup(name); cur->doc = doc; if (value != NULL) { xmlNodePtr tmp; cur->children = xmlStringGetNodeList(doc, value); cur->last = NULL; tmp = cur->children; while (tmp != NULL) { tmp->parent = (xmlNodePtr) cur; if (tmp->next == NULL) cur->last = tmp; tmp = tmp->next; } } if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue)) xmlRegisterNodeDefaultValue((xmlNodePtr)cur); return(cur); } /** * xmlFreePropList: * @cur: the first property in the list * * Free a property and all its siblings, all the children are freed too. */ void xmlFreePropList(xmlAttrPtr cur) { xmlAttrPtr next; if (cur == NULL) return; while (cur != NULL) { next = cur->next; xmlFreeProp(cur); cur = next; } } /** * xmlFreeProp: * @cur: an attribute * * Free one attribute, all the content is freed too */ void xmlFreeProp(xmlAttrPtr cur) { xmlDictPtr dict = NULL; if (cur == NULL) return; if (cur->doc != NULL) dict = cur->doc->dict; if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue)) xmlDeregisterNodeDefaultValue((xmlNodePtr)cur); /* Check for ID removal -> leading to invalid references ! */ if ((cur->doc != NULL) && (cur->atype == XML_ATTRIBUTE_ID)) { xmlRemoveID(cur->doc, cur); } if (cur->children != NULL) xmlFreeNodeList(cur->children); DICT_FREE(cur->name) xmlFree(cur); } /** * xmlRemoveProp: * @cur: an attribute * * Unlink and free one attribute, all the content is freed too * Note this doesn

xmlRemoveProp : cur == NULL\n

xmlRemoveProp : cur->parent == NULL\n

xmlRemoveProp : attribute not owned by its node\n

xmlNewPI : name == NULL\n

building PI

xmlNewNode : name == NULL\n

building node

s name. Use xmlNewNode() if a copy of @name string is * is needed as new node

xmlNewNode : name == NULL\n

building node

t check here that name comes from the doc dictionnary */ return(NULL); } memset(cur, 0, sizeof(xmlNode)); cur->type = XML_ELEMENT_NODE; cur->name = name; cur->ns = ns; if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue)) xmlRegisterNodeDefaultValue((xmlNodePtr)cur); return(cur); } /** * xmlNewDocNode: * @doc: the document * @ns: namespace if any * @name: the node name * @content: the XML text content if any * * Creation of a new node element within a document. @ns and @content * are optional (NULL). * NOTE: @content is supposed to be a piece of XML CDATA, so it allow entities * references, but XML special chars need to be escaped first by using * xmlEncodeEntitiesReentrant(). Use xmlNewDocRawNode() if you don

t * need entities support. * * Returns a pointer to the new node object. */ xmlNodePtr xmlNewDocNodeEatName(xmlDocPtr doc, xmlNsPtr ns, xmlChar *name, const xmlChar *content) { xmlNodePtr cur; cur = xmlNewNodeEatName(ns, name); if (cur != NULL) { cur->doc = doc; if (content != NULL) { cur->children = xmlStringGetNodeList(doc, content); UPDATE_LAST_CHILD_AND_PARENT(cur) } } else { /* if name don

building fragment

building text

xmlNewTextChild : parent == NULL\n

xmlNewTextChild : name == NULL\n

&# ... ;

building character reference

&

;

building reference

&

;

s length * Returns a pointer to the new node object. */ xmlNodePtr xmlNewTextLen(const xmlChar *content, int len) { xmlNodePtr cur; /* * Allocate a new node and fill the fields. */ cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode)); if (cur == NULL) { xmlTreeErrMemory("building text"); return(NULL); } memset(cur, 0, sizeof(xmlNode)); cur->type = XML_TEXT_NODE; cur->name = xmlStringText; if (content != NULL) { cur->content = xmlStrndup(content, len); } if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue)) xmlRegisterNodeDefaultValue(cur); return(cur); } /** * xmlNewDocTextLen: * @doc: the document * @content: the text content * @len: the text len. * * Creation of a new text node with an extra content length parameter. The * text node pertain to a given document. * Returns a pointer to the new node object. */ xmlNodePtr xmlNewDocTextLen(xmlDocPtr doc, const xmlChar *content, int len) { xmlNodePtr cur; cur = xmlNewTextLen(content, len); if (cur != NULL) cur->doc = doc; return(cur); } /** * xmlNewComment: * @content: the comment content * * Creation of a new node containing a comment. * Returns a pointer to the new node object. */ xmlNodePtr xmlNewComment(const xmlChar *content) { xmlNodePtr cur; /* * Allocate a new node and fill the fields. */ cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode)); if (cur == NULL) { xmlTreeErrMemory("building comment"); return(NULL); } memset(cur, 0, sizeof(xmlNode)); cur->type = XML_COMMENT_NODE; cur->name = xmlStringComment; if (content != NULL) { cur->content = xmlStrdup(content); } if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue)) xmlRegisterNodeDefaultValue(cur); return(cur); } /** * xmlNewCDataBlock: * @doc: the document * @content: the CDATA block content content * @len: the length of the block * * Creation of a new node containing a CDATA block. * Returns a pointer to the new node object. */ xmlNodePtr xmlNewCDataBlock(xmlDocPtr doc, const xmlChar *content, int len) { xmlNodePtr cur; /* * Allocate a new node and fill the fields. */ cur = (xmlNodePtr) xmlMalloc(sizeof(xmlNode)); if (cur == NULL) { xmlTreeErrMemory("building CDATA"); return(NULL); } memset(cur, 0, sizeof(xmlNode)); cur->type = XML_CDATA_SECTION_NODE; cur->doc = doc; if (content != NULL) { cur->content = xmlStrndup(content, len); } if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue)) xmlRegisterNodeDefaultValue(cur); return(cur); } /** * xmlNewDocComment: * @doc: the document * @content: the comment content * * Creation of a new node containing a comment within a document. * Returns a pointer to the new node object. */ xmlNodePtr xmlNewDocComment(xmlDocPtr doc, const xmlChar *content) { xmlNodePtr cur; cur = xmlNewComment(content); if (cur != NULL) cur->doc = doc; return(cur); } /** * xmlSetTreeDoc: * @tree: the top element * @doc: the document * * update all nodes under the tree to point to the right document */ void xmlSetTreeDoc(xmlNodePtr tree, xmlDocPtr doc) { xmlAttrPtr prop; if (tree == NULL) return; if (tree->doc != doc) { if(tree->type == XML_ELEMENT_NODE) { prop = tree->properties; while (prop != NULL) { prop->doc = doc; xmlSetListDoc(prop->children, doc); prop = prop->next; } } if (tree->children != NULL) xmlSetListDoc(tree->children, doc); tree->doc = doc; } } /** * xmlSetListDoc: * @list: the first element * @doc: the document * * update all nodes in the list to point to the right document */ void xmlSetListDoc(xmlNodePtr list, xmlDocPtr doc) { xmlNodePtr cur; if (list == NULL) return; cur = list; while (cur != NULL) { if (cur->doc != doc) xmlSetTreeDoc(cur, doc); cur = cur->next; } } #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) /** * xmlNewChild: * @parent: the parent node * @ns: a namespace if any * @name: the name of the child * @content: the XML content of the child if any. * * Creation of a new child element, added at the end of @parent children list. * @ns and @content parameters are optional (NULL). If @ns is NULL, the newly * created element inherits the namespace of @parent. If @content is non NULL, * a child list containing the TEXTs and ENTITY_REFs node will be created. * NOTE: @content is supposed to be a piece of XML CDATA, so it allows entity * references. XML special chars must be escaped first by using * xmlEncodeEntitiesReentrant(), or xmlNewTextChild() should be used. * * Returns a pointer to the new node object. */ xmlNodePtr xmlNewChild(xmlNodePtr parent, xmlNsPtr ns, const xmlChar *name, const xmlChar *content) { xmlNodePtr cur, prev; if (parent == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNewChild : parent == NULL\n"); #endif return(NULL); } if (name == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNewChild : name == NULL\n"); #endif return(NULL); } /* * Allocate a new node */ if (parent->type == XML_ELEMENT_NODE) { if (ns == NULL) cur = xmlNewDocNode(parent->doc, parent->ns, name, content); else cur = xmlNewDocNode(parent->doc, ns, name, content); } else if ((parent->type == XML_DOCUMENT_NODE) || (parent->type == XML_HTML_DOCUMENT_NODE)) { if (ns == NULL) cur = xmlNewDocNode((xmlDocPtr) parent, NULL, name, content); else cur = xmlNewDocNode((xmlDocPtr) parent, ns, name, content); } else if (parent->type == XML_DOCUMENT_FRAG_NODE) { cur = xmlNewDocNode( parent->doc, ns, name, content); } else { return(NULL); } if (cur == NULL) return(NULL); /* * add the new element at the end of the children list. */ cur->type = XML_ELEMENT_NODE; cur->parent = parent; cur->doc = parent->doc; if (parent->children == NULL) { parent->children = cur; parent->last = cur; } else { prev = parent->last; prev->next = cur; cur->prev = prev; parent->last = cur; } return(cur); } #endif /* LIBXML_TREE_ENABLED */ /** * xmlAddPropSibling: * @prev: the attribute to which @prop is added after * @cur: the base attribute passed to calling function * @prop: the new attribute * * Add a new attribute after @prev using @cur as base attribute. * When inserting before @cur, @prev is passed as @cur->prev. * When inserting after @cur, @prev is passed as @cur. * If an existing attribute is found it is detroyed prior to adding @prop. * * Returns the attribute being inserted or NULL in case of error. */ static xmlNodePtr xmlAddPropSibling(xmlNodePtr prev, xmlNodePtr cur, xmlNodePtr prop) { xmlAttrPtr attr; if (cur->type != XML_ATTRIBUTE_NODE) return(NULL); /* check if an attribute with the same name exists */ if (prop->ns == NULL) attr = xmlHasNsProp(cur->parent, prop->name, NULL); else attr = xmlHasNsProp(cur->parent, prop->name, prop->ns->href); if (prop->doc != cur->doc) { xmlSetTreeDoc(prop, cur->doc); } prop->parent = cur->parent; prop->prev = prev; if (prev != NULL) { prop->next = prev->next; prev->next = prop; if (prop->next) prop->next->prev = prop; } else { prop->next = cur; cur->prev = prop; } if (prop->prev == NULL && prop->parent != NULL) prop->parent->properties = (xmlAttrPtr) prop; if ((attr != NULL) && (attr->type != XML_ATTRIBUTE_DECL)) { /* different instance, destroy it (attributes must be unique) */ xmlRemoveProp((xmlAttrPtr) attr); } return prop; } /** * xmlAddNextSibling: * @cur: the child node * @elem: the new node * * Add a new node @elem as the next sibling of @cur * If the new node was already inserted in a document it is * first unlinked from its existing context. * As a result of text merging @elem may be freed. * If the new node is ATTRIBUTE, it is added into properties instead of children. * If there is an attribute with equal name, it is first destroyed. * * Returns the new node or NULL in case of error. */ xmlNodePtr xmlAddNextSibling(xmlNodePtr cur, xmlNodePtr elem) { if (cur == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlAddNextSibling : cur == NULL\n"); #endif return(NULL); } if (elem == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlAddNextSibling : elem == NULL\n"); #endif return(NULL); } if (cur == elem) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlAddNextSibling : cur == elem\n"); #endif return(NULL); } xmlUnlinkNode(elem); if (elem->type == XML_TEXT_NODE) { if (cur->type == XML_TEXT_NODE) { xmlNodeAddContent(cur, elem->content); xmlFreeNode(elem); return(cur); } if ((cur->next != NULL) && (cur->next->type == XML_TEXT_NODE) && (cur->name == cur->next->name)) { xmlChar *tmp; tmp = xmlStrdup(elem->content); tmp = xmlStrcat(tmp, cur->next->content); xmlNodeSetContent(cur->next, tmp); xmlFree(tmp); xmlFreeNode(elem); return(cur->next); } } else if (elem->type == XML_ATTRIBUTE_NODE) { return xmlAddPropSibling(cur, cur, elem); } if (elem->doc != cur->doc) { xmlSetTreeDoc(elem, cur->doc); } elem->parent = cur->parent; elem->prev = cur; elem->next = cur->next; cur->next = elem; if (elem->next != NULL) elem->next->prev = elem; if ((elem->parent != NULL) && (elem->parent->last == cur)) elem->parent->last = elem; return(elem); } #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_HTML_ENABLED) || \ defined(LIBXML_SCHEMAS_ENABLED) /** * xmlAddPrevSibling: * @cur: the child node * @elem: the new node * * Add a new node @elem as the previous sibling of @cur * merging adjacent TEXT nodes (@elem may be freed) * If the new node was already inserted in a document it is * first unlinked from its existing context. * If the new node is ATTRIBUTE, it is added into properties instead of children. * If there is an attribute with equal name, it is first destroyed. * * Returns the new node or NULL in case of error. */ xmlNodePtr xmlAddPrevSibling(xmlNodePtr cur, xmlNodePtr elem) { if (cur == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlAddPrevSibling : cur == NULL\n"); #endif return(NULL); } if (elem == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlAddPrevSibling : elem == NULL\n"); #endif return(NULL); } if (cur == elem) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlAddPrevSibling : cur == elem\n"); #endif return(NULL); } xmlUnlinkNode(elem); if (elem->type == XML_TEXT_NODE) { if (cur->type == XML_TEXT_NODE) { xmlChar *tmp; tmp = xmlStrdup(elem->content); tmp = xmlStrcat(tmp, cur->content); xmlNodeSetContent(cur, tmp); xmlFree(tmp); xmlFreeNode(elem); return(cur); } if ((cur->prev != NULL) && (cur->prev->type == XML_TEXT_NODE) && (cur->name == cur->prev->name)) { xmlNodeAddContent(cur->prev, elem->content); xmlFreeNode(elem); return(cur->prev); } } else if (elem->type == XML_ATTRIBUTE_NODE) { return xmlAddPropSibling(cur->prev, cur, elem); } if (elem->doc != cur->doc) { xmlSetTreeDoc(elem, cur->doc); } elem->parent = cur->parent; elem->next = cur; elem->prev = cur->prev; cur->prev = elem; if (elem->prev != NULL) elem->prev->next = elem; if ((elem->parent != NULL) && (elem->parent->children == cur)) { elem->parent->children = elem; } return(elem); } #endif /* LIBXML_TREE_ENABLED */ /** * xmlAddSibling: * @cur: the child node * @elem: the new node * * Add a new element @elem to the list of siblings of @cur * merging adjacent TEXT nodes (@elem may be freed) * If the new element was already inserted in a document it is * first unlinked from its existing context. * * Returns the new element or NULL in case of error. */ xmlNodePtr xmlAddSibling(xmlNodePtr cur, xmlNodePtr elem) { xmlNodePtr parent; if (cur == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlAddSibling : cur == NULL\n"); #endif return(NULL); } if (elem == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlAddSibling : elem == NULL\n"); #endif return(NULL); } if (cur == elem) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlAddSibling : cur == elem\n"); #endif return(NULL); } /* * Constant time is we can rely on the ->parent->last to find * the last sibling. */ if ((cur->type != XML_ATTRIBUTE_NODE) && (cur->parent != NULL) && (cur->parent->children != NULL) && (cur->parent->last != NULL) && (cur->parent->last->next == NULL)) { cur = cur->parent->last; } else { while (cur->next != NULL) cur = cur->next; } xmlUnlinkNode(elem); if ((cur->type == XML_TEXT_NODE) && (elem->type == XML_TEXT_NODE) && (cur->name == elem->name)) { xmlNodeAddContent(cur, elem->content); xmlFreeNode(elem); return(cur); } else if (elem->type == XML_ATTRIBUTE_NODE) { return xmlAddPropSibling(cur, cur, elem); } if (elem->doc != cur->doc) { xmlSetTreeDoc(elem, cur->doc); } parent = cur->parent; elem->prev = cur; elem->next = NULL; elem->parent = parent; cur->next = elem; if (parent != NULL) parent->last = elem; return(elem); } /** * xmlAddChildList: * @parent: the parent node * @cur: the first node in the list * * Add a list of node at the end of the child list of the parent * merging adjacent TEXT nodes (@cur may be freed) * * Returns the last child or NULL in case of error. */ xmlNodePtr xmlAddChildList(xmlNodePtr parent, xmlNodePtr cur) { xmlNodePtr prev; if (parent == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlAddChildList : parent == NULL\n"); #endif return(NULL); } if (cur == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlAddChildList : child == NULL\n"); #endif return(NULL); } if ((cur->doc != NULL) && (parent->doc != NULL) && (cur->doc != parent->doc)) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "Elements moved to a different document\n"); #endif } /* * add the first element at the end of the children list. */ if (parent->children == NULL) { parent->children = cur; } else { /* * If cur and parent->last both are TEXT nodes, then merge them. */ if ((cur->type == XML_TEXT_NODE) && (parent->last->type == XML_TEXT_NODE) && (cur->name == parent->last->name)) { xmlNodeAddContent(parent->last, cur->content); /* * if it

xmlAddChild : parent == NULL\n

xmlAddChild : child == NULL\n

xmlAddChild : parent == cur\n

xmlGetLastChild : parent == NULL\n

t have back reference * from entities content to entities references. * * Returns the count of element child or 0 if not available */ unsigned long xmlChildElementCount(xmlNodePtr parent) { unsigned long ret = 0; xmlNodePtr cur = NULL; if (parent == NULL) return(0); switch (parent->type) { case XML_ELEMENT_NODE: case XML_ENTITY_NODE: case XML_DOCUMENT_NODE: case XML_HTML_DOCUMENT_NODE: cur = parent->children; break; default: return(0); } while (cur != NULL) { if (cur->type == XML_ELEMENT_NODE) ret++; cur = cur->next; } return(ret); } /** * xmlFirstElementChild: * @parent: the parent node * * Finds the first child node of that element which is a Element node * Note the handling of entities references is different than in * the W3C DOM element traversal spec since we don

t have back reference * from entities content to entities references. * * Returns the last element child or NULL if not available */ xmlNodePtr xmlLastElementChild(xmlNodePtr parent) { xmlNodePtr cur = NULL; if (parent == NULL) return(NULL); switch (parent->type) { case XML_ELEMENT_NODE: case XML_ENTITY_NODE: case XML_DOCUMENT_NODE: case XML_HTML_DOCUMENT_NODE: cur = parent->last; break; default: return(NULL); } while (cur != NULL) { if (cur->type == XML_ELEMENT_NODE) return(cur); cur = cur->prev; } return(NULL); } /** * xmlPreviousElementSibling: * @node: the current node * * Finds the first closest previous sibling of the node which is an * element node. * Note the handling of entities references is different than in * the W3C DOM element traversal spec since we don

t have back reference * from entities content to entities references. * * Returns the next element sibling or NULL if not available */ xmlNodePtr xmlNextElementSibling(xmlNodePtr node) { if (node == NULL) return(NULL); switch (node->type) { case XML_ELEMENT_NODE: case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: case XML_ENTITY_REF_NODE: case XML_ENTITY_NODE: case XML_PI_NODE: case XML_COMMENT_NODE: case XML_DTD_NODE: case XML_XINCLUDE_START: case XML_XINCLUDE_END: node = node->next; break; default: return(NULL); } while (node != NULL) { if (node->type == XML_ELEMENT_NODE) return(node); node = node->next; } return(NULL); } #endif /* LIBXML_TREE_ENABLED */ /** * xmlFreeNodeList: * @cur: the first node in the list * * Free a node and all its siblings, this is a recursive behaviour, all * the children are freed too. */ void xmlFreeNodeList(xmlNodePtr cur) { xmlNodePtr next; xmlDictPtr dict = NULL; if (cur == NULL) return; if (cur->type == XML_NAMESPACE_DECL) { xmlFreeNsList((xmlNsPtr) cur); return; } if ((cur->type == XML_DOCUMENT_NODE) || #ifdef LIBXML_DOCB_ENABLED (cur->type == XML_DOCB_DOCUMENT_NODE) || #endif (cur->type == XML_HTML_DOCUMENT_NODE)) { xmlFreeDoc((xmlDocPtr) cur); return; } if (cur->doc != NULL) dict = cur->doc->dict; while (cur != NULL) { next = cur->next; if (cur->type != XML_DTD_NODE) { if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue)) xmlDeregisterNodeDefaultValue(cur); if ((cur->children != NULL) && (cur->type != XML_ENTITY_REF_NODE)) xmlFreeNodeList(cur->children); if (((cur->type == XML_ELEMENT_NODE) || (cur->type == XML_XINCLUDE_START) || (cur->type == XML_XINCLUDE_END)) && (cur->properties != NULL)) xmlFreePropList(cur->properties); if ((cur->type != XML_ELEMENT_NODE) && (cur->type != XML_XINCLUDE_START) && (cur->type != XML_XINCLUDE_END) && (cur->type != XML_ENTITY_REF_NODE) && (cur->content != (xmlChar *) &(cur->properties))) { DICT_FREE(cur->content) } if (((cur->type == XML_ELEMENT_NODE) || (cur->type == XML_XINCLUDE_START) || (cur->type == XML_XINCLUDE_END)) && (cur->nsDef != NULL)) xmlFreeNsList(cur->nsDef); /* * When a node is a text node or a comment, it uses a global static * variable for the name of the node. * Otherwise the node name might come from the document

t unlink the child from the list, use xmlUnlinkNode() first. */ void xmlFreeNode(xmlNodePtr cur) { xmlDictPtr dict = NULL; if (cur == NULL) return; /* use xmlFreeDtd for DTD nodes */ if (cur->type == XML_DTD_NODE) { xmlFreeDtd((xmlDtdPtr) cur); return; } if (cur->type == XML_NAMESPACE_DECL) { xmlFreeNs((xmlNsPtr) cur); return; } if (cur->type == XML_ATTRIBUTE_NODE) { xmlFreeProp((xmlAttrPtr) cur); return; } if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue)) xmlDeregisterNodeDefaultValue(cur); if (cur->doc != NULL) dict = cur->doc->dict; if (cur->type == XML_ENTITY_DECL) { xmlEntityPtr ent = (xmlEntityPtr) cur; DICT_FREE(ent->SystemID); DICT_FREE(ent->ExternalID); } if ((cur->children != NULL) && (cur->type != XML_ENTITY_REF_NODE)) xmlFreeNodeList(cur->children); if (((cur->type == XML_ELEMENT_NODE) || (cur->type == XML_XINCLUDE_START) || (cur->type == XML_XINCLUDE_END)) && (cur->properties != NULL)) xmlFreePropList(cur->properties); if ((cur->type != XML_ELEMENT_NODE) && (cur->content != NULL) && (cur->type != XML_ENTITY_REF_NODE) && (cur->type != XML_XINCLUDE_END) && (cur->type != XML_XINCLUDE_START) && (cur->content != (xmlChar *) &(cur->properties))) { DICT_FREE(cur->content) } /* * When a node is a text node or a comment, it uses a global static * variable for the name of the node. * Otherwise the node name might come from the document

s current context, the node is not freed */ void xmlUnlinkNode(xmlNodePtr cur) { if (cur == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlUnlinkNode : node == NULL\n"); #endif return; } if (cur->type == XML_DTD_NODE) { xmlDocPtr doc; doc = cur->doc; if (doc != NULL) { if (doc->intSubset == (xmlDtdPtr) cur) doc->intSubset = NULL; if (doc->extSubset == (xmlDtdPtr) cur) doc->extSubset = NULL; } } if (cur->type == XML_ENTITY_DECL) { xmlDocPtr doc; doc = cur->doc; if (doc != NULL) { if (doc->intSubset != NULL) { if (xmlHashLookup(doc->intSubset->entities, cur->name) == cur) xmlHashRemoveEntry(doc->intSubset->entities, cur->name, NULL); if (xmlHashLookup(doc->intSubset->pentities, cur->name) == cur) xmlHashRemoveEntry(doc->intSubset->pentities, cur->name, NULL); } if (doc->extSubset != NULL) { if (xmlHashLookup(doc->extSubset->entities, cur->name) == cur) xmlHashRemoveEntry(doc->extSubset->entities, cur->name, NULL); if (xmlHashLookup(doc->extSubset->pentities, cur->name) == cur) xmlHashRemoveEntry(doc->extSubset->pentities, cur->name, NULL); } } } if (cur->parent != NULL) { xmlNodePtr parent; parent = cur->parent; if (cur->type == XML_ATTRIBUTE_NODE) { if (parent->properties == (xmlAttrPtr) cur) parent->properties = ((xmlAttrPtr) cur)->next; } else { if (parent->children == cur) parent->children = cur->next; if (parent->last == cur) parent->last = cur->prev; } cur->parent = NULL; } if (cur->next != NULL) cur->next->prev = cur->prev; if (cur->prev != NULL) cur->prev->next = cur->next; cur->next = cur->prev = NULL; } #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_WRITER_ENABLED) /** * xmlReplaceNode: * @old: the old node * @cur: the node * * Unlink the old node from its current context, prune the new one * at the same place. If @cur was already inserted in a document it is * first unlinked from its existing context. * * Returns the @old node */ xmlNodePtr xmlReplaceNode(xmlNodePtr old, xmlNodePtr cur) { if (old == cur) return(NULL); if ((old == NULL) || (old->parent == NULL)) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlReplaceNode : old == NULL or without parent\n"); #endif return(NULL); } if (cur == NULL) { xmlUnlinkNode(old); return(old); } if (cur == old) { return(old); } if ((old->type==XML_ATTRIBUTE_NODE) && (cur->type!=XML_ATTRIBUTE_NODE)) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlReplaceNode : Trying to replace attribute node with other node type\n"); #endif return(old); } if ((cur->type==XML_ATTRIBUTE_NODE) && (old->type!=XML_ATTRIBUTE_NODE)) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlReplaceNode : Trying to replace a non-attribute node with attribute node\n"); #endif return(old); } xmlUnlinkNode(cur); xmlSetTreeDoc(cur, old->doc); cur->parent = old->parent; cur->next = old->next; if (cur->next != NULL) cur->next->prev = cur; cur->prev = old->prev; if (cur->prev != NULL) cur->prev->next = cur; if (cur->parent != NULL) { if (cur->type == XML_ATTRIBUTE_NODE) { if (cur->parent->properties == (xmlAttrPtr)old) cur->parent->properties = ((xmlAttrPtr) cur); } else { if (cur->parent->children == old) cur->parent->children = cur; if (cur->parent->last == old) cur->parent->last = cur; } } old->next = old->prev = NULL; old->parent = NULL; return(old); } #endif /* LIBXML_TREE_ENABLED */ /************************************************************************ * * * Copy operations * * * ************************************************************************/ /** * xmlCopyNamespace: * @cur: the namespace * * Do a copy of the namespace. * * Returns: a new #xmlNsPtr, or NULL in case of error. */ xmlNsPtr xmlCopyNamespace(xmlNsPtr cur) { xmlNsPtr ret; if (cur == NULL) return(NULL); switch (cur->type) { case XML_LOCAL_NAMESPACE: ret = xmlNewNs(NULL, cur->href, cur->prefix); break; default: #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlCopyNamespace: invalid type %d\n", cur->type); #endif return(NULL); } return(ret); } /** * xmlCopyNamespaceList: * @cur: the first namespace * * Do a copy of an namespace list. * * Returns: a new #xmlNsPtr, or NULL in case of error. */ xmlNsPtr xmlCopyNamespaceList(xmlNsPtr cur) { xmlNsPtr ret = NULL; xmlNsPtr p = NULL,q; while (cur != NULL) { q = xmlCopyNamespace(cur); if (p == NULL) { ret = p = q; } else { p->next = q; p = q; } cur = cur->next; } return(ret); } static xmlNodePtr xmlStaticCopyNodeList(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent); static xmlAttrPtr xmlCopyPropInternal(xmlDocPtr doc, xmlNodePtr target, xmlAttrPtr cur) { xmlAttrPtr ret; if (cur == NULL) return(NULL); if (target != NULL) ret = xmlNewDocProp(target->doc, cur->name, NULL); else if (doc != NULL) ret = xmlNewDocProp(doc, cur->name, NULL); else if (cur->parent != NULL) ret = xmlNewDocProp(cur->parent->doc, cur->name, NULL); else if (cur->children != NULL) ret = xmlNewDocProp(cur->children->doc, cur->name, NULL); else ret = xmlNewDocProp(NULL, cur->name, NULL); if (ret == NULL) return(NULL); ret->parent = target; if ((cur->ns != NULL) && (target != NULL)) { xmlNsPtr ns; ns = xmlSearchNs(target->doc, target, cur->ns->prefix); if (ns == NULL) { /* * Humm, we are copying an element whose namespace is defined * out of the new tree scope. Search it in the original tree * and add it at the top of the new tree */ ns = xmlSearchNs(cur->doc, cur->parent, cur->ns->prefix); if (ns != NULL) { xmlNodePtr root = target; xmlNodePtr pred = NULL; while (root->parent != NULL) { pred = root; root = root->parent; } if (root == (xmlNodePtr) target->doc) { /* correct possibly cycling above the document elt */ root = pred; } ret->ns = xmlNewNs(root, ns->href, ns->prefix); } } else { /* * we have to find something appropriate here since * we cant be sure, that the namespce we found is identified * by the prefix */ if (xmlStrEqual(ns->href, cur->ns->href)) { /* this is the nice case */ ret->ns = ns; } else { /* * we are in trouble: we need a new reconcilied namespace. * This is expensive */ ret->ns = xmlNewReconciliedNs(target->doc, target, cur->ns); } } } else ret->ns = NULL; if (cur->children != NULL) { xmlNodePtr tmp; ret->children = xmlStaticCopyNodeList(cur->children, ret->doc, (xmlNodePtr) ret); ret->last = NULL; tmp = ret->children; while (tmp != NULL) { /* tmp->parent = (xmlNodePtr)ret; */ if (tmp->next == NULL) ret->last = tmp; tmp = tmp->next; } } /* * Try to handle IDs */ if ((target!= NULL) && (cur!= NULL) && (target->doc != NULL) && (cur->doc != NULL) && (cur->doc->ids != NULL) && (cur->parent != NULL)) { if (xmlIsID(cur->doc, cur->parent, cur)) { xmlChar *id; id = xmlNodeListGetString(cur->doc, cur->children, 1); if (id != NULL) { xmlAddID(NULL, target->doc, id, ret); xmlFree(id); } } } return(ret); } /** * xmlCopyProp: * @target: the element where the attribute will be grafted * @cur: the attribute * * Do a copy of the attribute. * * Returns: a new #xmlAttrPtr, or NULL in case of error. */ xmlAttrPtr xmlCopyProp(xmlNodePtr target, xmlAttrPtr cur) { return xmlCopyPropInternal(NULL, target, cur); } /** * xmlCopyPropList: * @target: the element where the attributes will be grafted * @cur: the first attribute * * Do a copy of an attribute list. * * Returns: a new #xmlAttrPtr, or NULL in case of error. */ xmlAttrPtr xmlCopyPropList(xmlNodePtr target, xmlAttrPtr cur) { xmlAttrPtr ret = NULL; xmlAttrPtr p = NULL,q; while (cur != NULL) { q = xmlCopyProp(target, cur); if (q == NULL) return(NULL); if (p == NULL) { ret = p = q; } else { p->next = q; q->prev = p; p = q; } cur = cur->next; } return(ret); } /* * NOTE about the CopyNode operations ! * * They are split into external and internal parts for one * tricky reason: namespaces. Doing a direct copy of a node * say RPM:Copyright without changing the namespace pointer to * something else can produce stale links. One way to do it is * to keep a reference counter but this doesn

recursive

t recurse on children. */ static xmlNodePtr xmlStaticCopyNode(const xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent, int extended) { xmlNodePtr ret; if (node == NULL) return(NULL); switch (node->type) { case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: case XML_ELEMENT_NODE: case XML_DOCUMENT_FRAG_NODE: case XML_ENTITY_REF_NODE: case XML_ENTITY_NODE: case XML_PI_NODE: case XML_COMMENT_NODE: case XML_XINCLUDE_START: case XML_XINCLUDE_END: break; case XML_ATTRIBUTE_NODE: return((xmlNodePtr) xmlCopyPropInternal(doc, parent, (xmlAttrPtr) node)); case XML_NAMESPACE_DECL: return((xmlNodePtr) xmlCopyNamespaceList((xmlNsPtr) node)); case XML_DOCUMENT_NODE: case XML_HTML_DOCUMENT_NODE: #ifdef LIBXML_DOCB_ENABLED case XML_DOCB_DOCUMENT_NODE: #endif #ifdef LIBXML_TREE_ENABLED return((xmlNodePtr) xmlCopyDoc((xmlDocPtr) node, extended)); #endif /* LIBXML_TREE_ENABLED */ case XML_DOCUMENT_TYPE_NODE: case XML_NOTATION_NODE: case XML_DTD_NODE: case XML_ELEMENT_DECL: case XML_ATTRIBUTE_DECL: case XML_ENTITY_DECL: return(NULL); } /* * Allocate a new node and fill the fields. */ ret = (xmlNodePtr) xmlMalloc(sizeof(xmlNode)); if (ret == NULL) { xmlTreeErrMemory("copying node"); return(NULL); } memset(ret, 0, sizeof(xmlNode)); ret->type = node->type; ret->doc = doc; ret->parent = parent; if (node->name == xmlStringText) ret->name = xmlStringText; else if (node->name == xmlStringTextNoenc) ret->name = xmlStringTextNoenc; else if (node->name == xmlStringComment) ret->name = xmlStringComment; else if (node->name != NULL) { if ((doc != NULL) && (doc->dict != NULL)) ret->name = xmlDictLookup(doc->dict, node->name, -1); else ret->name = xmlStrdup(node->name); } if ((node->type != XML_ELEMENT_NODE) && (node->content != NULL) && (node->type != XML_ENTITY_REF_NODE) && (node->type != XML_XINCLUDE_END) && (node->type != XML_XINCLUDE_START)) { ret->content = xmlStrdup(node->content); }else{ if (node->type == XML_ELEMENT_NODE) ret->line = node->line; } if (parent != NULL) { xmlNodePtr tmp; /* * this is a tricky part for the node register thing: * in case ret does get coalesced in xmlAddChild * the deregister-node callback is called; so we register ret now already */ if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue)) xmlRegisterNodeDefaultValue((xmlNodePtr)ret); tmp = xmlAddChild(parent, ret); /* node could have coalesced */ if (tmp != ret) return(tmp); } if (!extended) goto out; if (((node->type == XML_ELEMENT_NODE) || (node->type == XML_XINCLUDE_START)) && (node->nsDef != NULL)) ret->nsDef = xmlCopyNamespaceList(node->nsDef); if (node->ns != NULL) { xmlNsPtr ns; ns = xmlSearchNs(doc, ret, node->ns->prefix); if (ns == NULL) { /* * Humm, we are copying an element whose namespace is defined * out of the new tree scope. Search it in the original tree * and add it at the top of the new tree */ ns = xmlSearchNs(node->doc, node, node->ns->prefix); if (ns != NULL) { xmlNodePtr root = ret; while (root->parent != NULL) root = root->parent; ret->ns = xmlNewNs(root, ns->href, ns->prefix); } } else { /* * reference the existing namespace definition in our own tree. */ ret->ns = ns; } } if (((node->type == XML_ELEMENT_NODE) || (node->type == XML_XINCLUDE_START)) && (node->properties != NULL)) ret->properties = xmlCopyPropList(ret, node->properties); if (node->type == XML_ENTITY_REF_NODE) { if ((doc == NULL) || (node->doc != doc)) { /* * The copied node will go into a separate document, so * to avoid dangling references to the ENTITY_DECL node * we cannot keep the reference. Try to find it in the * target document. */ ret->children = (xmlNodePtr) xmlGetDocEntity(doc, ret->name); } else { ret->children = node->children; } ret->last = ret->children; } else if ((node->children != NULL) && (extended != 2)) { ret->children = xmlStaticCopyNodeList(node->children, doc, ret); UPDATE_LAST_CHILD_AND_PARENT(ret) } out: /* if parent != NULL we already registered the node above */ if ((parent == NULL) && ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))) xmlRegisterNodeDefaultValue((xmlNodePtr)ret); return(ret); } static xmlNodePtr xmlStaticCopyNodeList(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent) { xmlNodePtr ret = NULL; xmlNodePtr p = NULL,q; while (node != NULL) { #ifdef LIBXML_TREE_ENABLED if (node->type == XML_DTD_NODE ) { if (doc == NULL) { node = node->next; continue; } if (doc->intSubset == NULL) { q = (xmlNodePtr) xmlCopyDtd( (xmlDtdPtr) node ); q->doc = doc; q->parent = parent; doc->intSubset = (xmlDtdPtr) q; xmlAddChild(parent, q); } else { q = (xmlNodePtr) doc->intSubset; xmlAddChild(parent, q); } } else #endif /* LIBXML_TREE_ENABLED */ q = xmlStaticCopyNode(node, doc, parent, 1); if (ret == NULL) { q->prev = NULL; ret = p = q; } else if (p != q) { /* the test is required if xmlStaticCopyNode coalesced 2 text nodes */ p->next = q; q->prev = p; p = q; } node = node->next; } return(ret); } /** * xmlCopyNode: * @node: the node * @extended: if 1 do a recursive copy (properties, namespaces and children * when applicable) * if 2 copy properties and namespaces (when applicable) * * Do a copy of the node. * * Returns: a new #xmlNodePtr, or NULL in case of error. */ xmlNodePtr xmlCopyNode(const xmlNodePtr node, int extended) { xmlNodePtr ret; ret = xmlStaticCopyNode(node, NULL, NULL, extended); return(ret); } /** * xmlDocCopyNode: * @node: the node * @doc: the document * @extended: if 1 do a recursive copy (properties, namespaces and children * when applicable) * if 2 copy properties and namespaces (when applicable) * * Do a copy of the node to a given document. * * Returns: a new #xmlNodePtr, or NULL in case of error. */ xmlNodePtr xmlDocCopyNode(const xmlNodePtr node, xmlDocPtr doc, int extended) { xmlNodePtr ret; ret = xmlStaticCopyNode(node, doc, NULL, extended); return(ret); } /** * xmlDocCopyNodeList: * @doc: the target document * @node: the first node in the list. * * Do a recursive copy of the node list. * * Returns: a new #xmlNodePtr, or NULL in case of error. */ xmlNodePtr xmlDocCopyNodeList(xmlDocPtr doc, const xmlNodePtr node) { xmlNodePtr ret = xmlStaticCopyNodeList(node, doc, NULL); return(ret); } /** * xmlCopyNodeList: * @node: the first node in the list. * * Do a recursive copy of the node list. * Use xmlDocCopyNodeList() if possible to ensure string interning. * * Returns: a new #xmlNodePtr, or NULL in case of error. */ xmlNodePtr xmlCopyNodeList(const xmlNodePtr node) { xmlNodePtr ret = xmlStaticCopyNodeList(node, NULL, NULL); return(ret); } #if defined(LIBXML_TREE_ENABLED) /** * xmlCopyDtd: * @dtd: the dtd * * Do a copy of the dtd. * * Returns: a new #xmlDtdPtr, or NULL in case of error. */ xmlDtdPtr xmlCopyDtd(xmlDtdPtr dtd) { xmlDtdPtr ret; xmlNodePtr cur, p = NULL, q; if (dtd == NULL) return(NULL); ret = xmlNewDtd(NULL, dtd->name, dtd->ExternalID, dtd->SystemID); if (ret == NULL) return(NULL); if (dtd->entities != NULL) ret->entities = (void *) xmlCopyEntitiesTable( (xmlEntitiesTablePtr) dtd->entities); if (dtd->notations != NULL) ret->notations = (void *) xmlCopyNotationTable( (xmlNotationTablePtr) dtd->notations); if (dtd->elements != NULL) ret->elements = (void *) xmlCopyElementTable( (xmlElementTablePtr) dtd->elements); if (dtd->attributes != NULL) ret->attributes = (void *) xmlCopyAttributeTable( (xmlAttributeTablePtr) dtd->attributes); if (dtd->pentities != NULL) ret->pentities = (void *) xmlCopyEntitiesTable( (xmlEntitiesTablePtr) dtd->pentities); cur = dtd->children; while (cur != NULL) { q = NULL; if (cur->type == XML_ENTITY_DECL) { xmlEntityPtr tmp = (xmlEntityPtr) cur; switch (tmp->etype) { case XML_INTERNAL_GENERAL_ENTITY: case XML_EXTERNAL_GENERAL_PARSED_ENTITY: case XML_EXTERNAL_GENERAL_UNPARSED_ENTITY: q = (xmlNodePtr) xmlGetEntityFromDtd(ret, tmp->name); break; case XML_INTERNAL_PARAMETER_ENTITY: case XML_EXTERNAL_PARAMETER_ENTITY: q = (xmlNodePtr) xmlGetParameterEntityFromDtd(ret, tmp->name); break; case XML_INTERNAL_PREDEFINED_ENTITY: break; } } else if (cur->type == XML_ELEMENT_DECL) { xmlElementPtr tmp = (xmlElementPtr) cur; q = (xmlNodePtr) xmlGetDtdQElementDesc(ret, tmp->name, tmp->prefix); } else if (cur->type == XML_ATTRIBUTE_DECL) { xmlAttributePtr tmp = (xmlAttributePtr) cur; q = (xmlNodePtr) xmlGetDtdQAttrDesc(ret, tmp->elem, tmp->name, tmp->prefix); } else if (cur->type == XML_COMMENT_NODE) { q = xmlCopyNode(cur, 0); } if (q == NULL) { cur = cur->next; continue; } if (p == NULL) ret->children = q; else p->next = q; q->prev = p; q->parent = (xmlNodePtr) ret; q->next = NULL; ret->last = q; p = q; cur = cur->next; } return(ret); } #endif #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) /** * xmlCopyDoc: * @doc: the document * @recursive: if not zero do a recursive copy. * * Do a copy of the document info. If recursive, the content tree will * be copied too as well as DTD, namespaces and entities. * * Returns: a new #xmlDocPtr, or NULL in case of error. */ xmlDocPtr xmlCopyDoc(xmlDocPtr doc, int recursive) { xmlDocPtr ret; if (doc == NULL) return(NULL); ret = xmlNewDoc(doc->version); if (ret == NULL) return(NULL); if (doc->name != NULL) ret->name = xmlMemStrdup(doc->name); if (doc->encoding != NULL) ret->encoding = xmlStrdup(doc->encoding); if (doc->URL != NULL) ret->URL = xmlStrdup(doc->URL); ret->charset = doc->charset; ret->compression = doc->compression; ret->standalone = doc->standalone; if (!recursive) return(ret); ret->last = NULL; ret->children = NULL; #ifdef LIBXML_TREE_ENABLED if (doc->intSubset != NULL) { ret->intSubset = xmlCopyDtd(doc->intSubset); xmlSetTreeDoc((xmlNodePtr)ret->intSubset, ret); ret->intSubset->parent = ret; } #endif if (doc->oldNs != NULL) ret->oldNs = xmlCopyNamespaceList(doc->oldNs); if (doc->children != NULL) { xmlNodePtr tmp; ret->children = xmlStaticCopyNodeList(doc->children, ret, (xmlNodePtr)ret); ret->last = NULL; tmp = ret->children; while (tmp != NULL) { if (tmp->next == NULL) ret->last = tmp; tmp = tmp->next; } } return(ret); } #endif /* LIBXML_TREE_ENABLED */ /************************************************************************ * * * Content access functions * * * ************************************************************************/ /** * xmlGetLineNo: * @node: valid node * * Get line number of @node. This requires activation of this option * before invoking the parser by calling xmlLineNumbersDefault(1) * * Returns the line number if successful, -1 otherwise */ long xmlGetLineNo(xmlNodePtr node) { long result = -1; if (!node) return result; if ((node->type == XML_ELEMENT_NODE) || (node->type == XML_TEXT_NODE) || (node->type == XML_COMMENT_NODE) || (node->type == XML_PI_NODE)) result = (long) node->line; else if ((node->prev != NULL) && ((node->prev->type == XML_ELEMENT_NODE) || (node->prev->type == XML_TEXT_NODE) || (node->prev->type == XML_COMMENT_NODE) || (node->prev->type == XML_PI_NODE))) result = xmlGetLineNo(node->prev); else if ((node->parent != NULL) && (node->parent->type == XML_ELEMENT_NODE)) result = xmlGetLineNo(node->parent); return result; } #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_DEBUG_ENABLED) /** * xmlGetNodePath: * @node: a node * * Build a structure based Path for the given node * * Returns the new path or NULL in case of error. The caller must free * the returned string */ xmlChar * xmlGetNodePath(xmlNodePtr node) { xmlNodePtr cur, tmp, next; xmlChar *buffer = NULL, *temp; size_t buf_len; xmlChar *buf; const char *sep; const char *name; char nametemp[100]; int occur = 0, generic; if (node == NULL) return (NULL); buf_len = 500; buffer = (xmlChar *) xmlMallocAtomic(buf_len * sizeof(xmlChar)); if (buffer == NULL) { xmlTreeErrMemory("getting node path"); return (NULL); } buf = (xmlChar *) xmlMallocAtomic(buf_len * sizeof(xmlChar)); if (buf == NULL) { xmlTreeErrMemory("getting node path"); xmlFree(buffer); return (NULL); } buffer[0] = 0; cur = node; do { name = ""; sep = "?"; occur = 0; if ((cur->type == XML_DOCUMENT_NODE) || (cur->type == XML_HTML_DOCUMENT_NODE)) { if (buffer[0] ==

) break; sep = "/"; next = NULL; } else if (cur->type == XML_ELEMENT_NODE) { generic = 0; sep = "/"; name = (const char *) cur->name; if (cur->ns) { if (cur->ns->prefix != NULL) { snprintf(nametemp, sizeof(nametemp) - 1, "%s:%s", (char *)cur->ns->prefix, (char *)cur->name); nametemp[sizeof(nametemp) - 1] = 0; name = nametemp; } else { /* * We cannot express named elements in the default * namespace, so use "*". */ generic = 1; name = "*"; } } next = cur->parent; /* * Thumbler index computation * TODO: the ocurence test seems bogus for namespaced names */ tmp = cur->prev; while (tmp != NULL) { if ((tmp->type == XML_ELEMENT_NODE) && (generic || (xmlStrEqual(cur->name, tmp->name) && ((tmp->ns == cur->ns) || ((tmp->ns != NULL) && (cur->ns != NULL) && (xmlStrEqual(cur->ns->prefix, tmp->ns->prefix))))))) occur++; tmp = tmp->prev; } if (occur == 0) { tmp = cur->next; while (tmp != NULL && occur == 0) { if ((tmp->type == XML_ELEMENT_NODE) && (generic || (xmlStrEqual(cur->name, tmp->name) && ((tmp->ns == cur->ns) || ((tmp->ns != NULL) && (cur->ns != NULL) && (xmlStrEqual(cur->ns->prefix, tmp->ns->prefix))))))) occur++; tmp = tmp->next; } if (occur != 0) occur = 1; } else occur++; } else if (cur->type == XML_COMMENT_NODE) { sep = "/"; name = "comment()"; next = cur->parent; /* * Thumbler index computation */ tmp = cur->prev; while (tmp != NULL) { if (tmp->type == XML_COMMENT_NODE) occur++; tmp = tmp->prev; } if (occur == 0) { tmp = cur->next; while (tmp != NULL && occur == 0) { if (tmp->type == XML_COMMENT_NODE) occur++; tmp = tmp->next; } if (occur != 0) occur = 1; } else occur++; } else if ((cur->type == XML_TEXT_NODE) || (cur->type == XML_CDATA_SECTION_NODE)) { sep = "/"; name = "text()"; next = cur->parent; /* * Thumbler index computation */ tmp = cur->prev; while (tmp != NULL) { if ((tmp->type == XML_TEXT_NODE) || (tmp->type == XML_CDATA_SECTION_NODE)) occur++; tmp = tmp->prev; } /* * Evaluate if this is the only text- or CDATA-section-node; * if yes, then we

text()

text()[1]

/

processing-instruction('%s')

/@

%s:%s

%s

getting node path

getting node path

%s%s%s

%s%s[%d]%s

%s

lang

s up to the caller to free the memory with xmlFree(). */ xmlChar * xmlNodeGetLang(xmlNodePtr cur) { xmlChar *lang; while (cur != NULL) { lang = xmlGetNsProp(cur, BAD_CAST "lang", XML_XML_NAMESPACE); if (lang != NULL) return(lang); cur = cur->parent; } return(NULL); } #ifdef LIBXML_TREE_ENABLED /** * xmlNodeSetSpacePreserve: * @cur: the node being changed * @val: the xml:space value ("0": default, 1: "preserve") * * Set (or reset) the space preserving behaviour of a node, i.e. the * value of the xml:space attribute. */ void xmlNodeSetSpacePreserve(xmlNodePtr cur, int val) { xmlNsPtr ns; if (cur == NULL) return; switch(cur->type) { case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: case XML_COMMENT_NODE: case XML_DOCUMENT_NODE: case XML_DOCUMENT_TYPE_NODE: case XML_DOCUMENT_FRAG_NODE: case XML_NOTATION_NODE: case XML_HTML_DOCUMENT_NODE: case XML_DTD_NODE: case XML_ELEMENT_DECL: case XML_ATTRIBUTE_DECL: case XML_ENTITY_DECL: case XML_PI_NODE: case XML_ENTITY_REF_NODE: case XML_ENTITY_NODE: case XML_NAMESPACE_DECL: case XML_XINCLUDE_START: case XML_XINCLUDE_END: #ifdef LIBXML_DOCB_ENABLED case XML_DOCB_DOCUMENT_NODE: #endif return; case XML_ELEMENT_NODE: case XML_ATTRIBUTE_NODE: break; } ns = xmlSearchNsByHref(cur->doc, cur, XML_XML_NAMESPACE); if (ns == NULL) return; switch (val) { case 0: xmlSetNsProp(cur, ns, BAD_CAST "space", BAD_CAST "default"); break; case 1: xmlSetNsProp(cur, ns, BAD_CAST "space", BAD_CAST "preserve"); break; } } #endif /* LIBXML_TREE_ENABLED */ /** * xmlNodeGetSpacePreserve: * @cur: the node being checked * * Searches the space preserving behaviour of a node, i.e. the values * of the xml:space attribute or the one carried by the nearest * ancestor. * * Returns -1 if xml:space is not inherited, 0 if "default", 1 if "preserve" */ int xmlNodeGetSpacePreserve(xmlNodePtr cur) { xmlChar *space; while (cur != NULL) { space = xmlGetNsProp(cur, BAD_CAST "space", XML_XML_NAMESPACE); if (space != NULL) { if (xmlStrEqual(space, BAD_CAST "preserve")) { xmlFree(space); return(1); } if (xmlStrEqual(space, BAD_CAST "default")) { xmlFree(space); return(0); } xmlFree(space); } cur = cur->parent; } return(-1); } #ifdef LIBXML_TREE_ENABLED /** * xmlNodeSetName: * @cur: the node being changed * @name: the new tag name * * Set (or reset) the name of a node. */ void xmlNodeSetName(xmlNodePtr cur, const xmlChar *name) { xmlDocPtr doc; xmlDictPtr dict; if (cur == NULL) return; if (name == NULL) return; switch(cur->type) { case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: case XML_COMMENT_NODE: case XML_DOCUMENT_TYPE_NODE: case XML_DOCUMENT_FRAG_NODE: case XML_NOTATION_NODE: case XML_HTML_DOCUMENT_NODE: case XML_NAMESPACE_DECL: case XML_XINCLUDE_START: case XML_XINCLUDE_END: #ifdef LIBXML_DOCB_ENABLED case XML_DOCB_DOCUMENT_NODE: #endif return; case XML_ELEMENT_NODE: case XML_ATTRIBUTE_NODE: case XML_PI_NODE: case XML_ENTITY_REF_NODE: case XML_ENTITY_NODE: case XML_DTD_NODE: case XML_DOCUMENT_NODE: case XML_ELEMENT_DECL: case XML_ATTRIBUTE_DECL: case XML_ENTITY_DECL: break; } doc = cur->doc; if (doc != NULL) dict = doc->dict; else dict = NULL; if (dict != NULL) { if ((cur->name != NULL) && (!xmlDictOwns(dict, cur->name))) xmlFree((xmlChar *) cur->name); cur->name = xmlDictLookup(dict, name, -1); } else { if (cur->name != NULL) xmlFree((xmlChar *) cur->name); cur->name = xmlStrdup(name); } } #endif #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) /** * xmlNodeSetBase: * @cur: the node being changed * @uri: the new base URI * * Set (or reset) the base URI of a node, i.e. the value of the * xml:base attribute. */ void xmlNodeSetBase(xmlNodePtr cur, const xmlChar* uri) { xmlNsPtr ns; const xmlChar* fixed; if (cur == NULL) return; switch(cur->type) { case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: case XML_COMMENT_NODE: case XML_DOCUMENT_TYPE_NODE: case XML_DOCUMENT_FRAG_NODE: case XML_NOTATION_NODE: case XML_DTD_NODE: case XML_ELEMENT_DECL: case XML_ATTRIBUTE_DECL: case XML_ENTITY_DECL: case XML_PI_NODE: case XML_ENTITY_REF_NODE: case XML_ENTITY_NODE: case XML_NAMESPACE_DECL: case XML_XINCLUDE_START: case XML_XINCLUDE_END: return; case XML_ELEMENT_NODE: case XML_ATTRIBUTE_NODE: break; case XML_DOCUMENT_NODE: #ifdef LIBXML_DOCB_ENABLED case XML_DOCB_DOCUMENT_NODE: #endif case XML_HTML_DOCUMENT_NODE: { xmlDocPtr doc = (xmlDocPtr) cur; if (doc->URL != NULL) xmlFree((xmlChar *) doc->URL); if (uri == NULL) doc->URL = NULL; else doc->URL = xmlPathToURI(uri); return; } } ns = xmlSearchNsByHref(cur->doc, cur, XML_XML_NAMESPACE); if (ns == NULL) return; fixed = xmlPathToURI(uri); if (fixed != NULL) { xmlSetNsProp(cur, ns, BAD_CAST "base", fixed); xmlFree((xmlChar *)fixed); } else { xmlSetNsProp(cur, ns, BAD_CAST "base", uri); } } #endif /* LIBXML_TREE_ENABLED */ /** * xmlNodeGetBase: * @doc: the document the node pertains to * @cur: the node being checked * * Searches for the BASE URL. The code should work on both XML * and HTML document even if base mechanisms are completely different. * It returns the base as defined in RFC 2396 sections * 5.1.1. Base URI within Document Content * and * 5.1.2. Base URI from the Encapsulating Entity * However it does not return the document base (5.1.3), use * xmlDocumentGetBase() for this * * Returns a pointer to the base URL, or NULL if not found * It

html

head

base

href

base

http://

ftp://

urn:

s a TEXT node or the aggregate string * of the values carried by this node child

well balanced chunk

s a TEXT node or the aggregate string * of the values carried by this node child

s up to the caller to free the memory with xmlFree(). */ xmlChar * xmlNodeGetContent(xmlNodePtr cur) { if (cur == NULL) return (NULL); switch (cur->type) { case XML_DOCUMENT_FRAG_NODE: case XML_ELEMENT_NODE:{ xmlBufferPtr buffer; xmlChar *ret; buffer = xmlBufferCreateSize(64); if (buffer == NULL) return (NULL); xmlNodeBufGetContent(buffer, cur); ret = buffer->content; buffer->content = NULL; xmlBufferFree(buffer); return (ret); } case XML_ATTRIBUTE_NODE: return(xmlGetPropNodeValueInternal((xmlAttrPtr) cur)); case XML_COMMENT_NODE: case XML_PI_NODE: if (cur->content != NULL) return (xmlStrdup(cur->content)); return (NULL); case XML_ENTITY_REF_NODE:{ xmlEntityPtr ent; xmlBufferPtr buffer; xmlChar *ret; /* lookup entity declaration */ ent = xmlGetDocEntity(cur->doc, cur->name); if (ent == NULL) return (NULL); buffer = xmlBufferCreate(); if (buffer == NULL) return (NULL); xmlNodeBufGetContent(buffer, cur); ret = buffer->content; buffer->content = NULL; xmlBufferFree(buffer); return (ret); } case XML_ENTITY_NODE: case XML_DOCUMENT_TYPE_NODE: case XML_NOTATION_NODE: case XML_DTD_NODE: case XML_XINCLUDE_START: case XML_XINCLUDE_END: return (NULL); case XML_DOCUMENT_NODE: #ifdef LIBXML_DOCB_ENABLED case XML_DOCB_DOCUMENT_NODE: #endif case XML_HTML_DOCUMENT_NODE: { xmlBufferPtr buffer; xmlChar *ret; buffer = xmlBufferCreate(); if (buffer == NULL) return (NULL); xmlNodeBufGetContent(buffer, (xmlNodePtr) cur); ret = buffer->content; buffer->content = NULL; xmlBufferFree(buffer); return (ret); } case XML_NAMESPACE_DECL: { xmlChar *tmp; tmp = xmlStrdup(((xmlNsPtr) cur)->href); return (tmp); } case XML_ELEMENT_DECL: /* TODO !!! */ return (NULL); case XML_ATTRIBUTE_DECL: /* TODO !!! */ return (NULL); case XML_ENTITY_DECL: /* TODO !!! */ return (NULL); case XML_CDATA_SECTION_NODE: case XML_TEXT_NODE: if (cur->content != NULL) return (xmlStrdup(cur->content)); return (NULL); } return (NULL); } /** * xmlNodeSetContent: * @cur: the node being modified * @content: the new value of the content * * Replace the content of a node. * NOTE: @content is supposed to be a piece of XML CDATA, so it allows entity * references, but XML special chars need to be escaped first by using * xmlEncodeEntitiesReentrant() resp. xmlEncodeSpecialChars(). */ void xmlNodeSetContent(xmlNodePtr cur, const xmlChar *content) { if (cur == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNodeSetContent : node == NULL\n"); #endif return; } switch (cur->type) { case XML_DOCUMENT_FRAG_NODE: case XML_ELEMENT_NODE: case XML_ATTRIBUTE_NODE: if (cur->children != NULL) xmlFreeNodeList(cur->children); cur->children = xmlStringGetNodeList(cur->doc, content); UPDATE_LAST_CHILD_AND_PARENT(cur) break; case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: case XML_ENTITY_REF_NODE: case XML_ENTITY_NODE: case XML_PI_NODE: case XML_COMMENT_NODE: if ((cur->content != NULL) && (cur->content != (xmlChar *) &(cur->properties))) { if (!((cur->doc != NULL) && (cur->doc->dict != NULL) && (xmlDictOwns(cur->doc->dict, cur->content)))) xmlFree(cur->content); } if (cur->children != NULL) xmlFreeNodeList(cur->children); cur->last = cur->children = NULL; if (content != NULL) { cur->content = xmlStrdup(content); } else cur->content = NULL; cur->properties = NULL; cur->nsDef = NULL; break; case XML_DOCUMENT_NODE: case XML_HTML_DOCUMENT_NODE: case XML_DOCUMENT_TYPE_NODE: case XML_XINCLUDE_START: case XML_XINCLUDE_END: #ifdef LIBXML_DOCB_ENABLED case XML_DOCB_DOCUMENT_NODE: #endif break; case XML_NOTATION_NODE: break; case XML_DTD_NODE: break; case XML_NAMESPACE_DECL: break; case XML_ELEMENT_DECL: /* TODO !!! */ break; case XML_ATTRIBUTE_DECL: /* TODO !!! */ break; case XML_ENTITY_DECL: /* TODO !!! */ break; } } #ifdef LIBXML_TREE_ENABLED /** * xmlNodeSetContentLen: * @cur: the node being modified * @content: the new value of the content * @len: the size of @content * * Replace the content of a node. * NOTE: @content is supposed to be a piece of XML CDATA, so it allows entity * references, but XML special chars need to be escaped first by using * xmlEncodeEntitiesReentrant() resp. xmlEncodeSpecialChars(). */ void xmlNodeSetContentLen(xmlNodePtr cur, const xmlChar *content, int len) { if (cur == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNodeSetContentLen : node == NULL\n"); #endif return; } switch (cur->type) { case XML_DOCUMENT_FRAG_NODE: case XML_ELEMENT_NODE: case XML_ATTRIBUTE_NODE: if (cur->children != NULL) xmlFreeNodeList(cur->children); cur->children = xmlStringLenGetNodeList(cur->doc, content, len); UPDATE_LAST_CHILD_AND_PARENT(cur) break; case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: case XML_ENTITY_REF_NODE: case XML_ENTITY_NODE: case XML_PI_NODE: case XML_COMMENT_NODE: case XML_NOTATION_NODE: if ((cur->content != NULL) && (cur->content != (xmlChar *) &(cur->properties))) { if (!((cur->doc != NULL) && (cur->doc->dict != NULL) && (xmlDictOwns(cur->doc->dict, cur->content)))) xmlFree(cur->content); } if (cur->children != NULL) xmlFreeNodeList(cur->children); cur->children = cur->last = NULL; if (content != NULL) { cur->content = xmlStrndup(content, len); } else cur->content = NULL; cur->properties = NULL; cur->nsDef = NULL; break; case XML_DOCUMENT_NODE: case XML_DTD_NODE: case XML_HTML_DOCUMENT_NODE: case XML_DOCUMENT_TYPE_NODE: case XML_NAMESPACE_DECL: case XML_XINCLUDE_START: case XML_XINCLUDE_END: #ifdef LIBXML_DOCB_ENABLED case XML_DOCB_DOCUMENT_NODE: #endif break; case XML_ELEMENT_DECL: /* TODO !!! */ break; case XML_ATTRIBUTE_DECL: /* TODO !!! */ break; case XML_ENTITY_DECL: /* TODO !!! */ break; } } #endif /* LIBXML_TREE_ENABLED */ /** * xmlNodeAddContentLen: * @cur: the node being modified * @content: extra content * @len: the size of @content * * Append the extra substring to the node content. * NOTE: In contrast to xmlNodeSetContentLen(), @content is supposed to be * raw text, so unescaped XML special chars are allowed, entity * references are not supported. */ void xmlNodeAddContentLen(xmlNodePtr cur, const xmlChar *content, int len) { if (cur == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNodeAddContentLen : node == NULL\n"); #endif return; } if (len <= 0) return; switch (cur->type) { case XML_DOCUMENT_FRAG_NODE: case XML_ELEMENT_NODE: { xmlNodePtr last, newNode, tmp; last = cur->last; newNode = xmlNewTextLen(content, len); if (newNode != NULL) { tmp = xmlAddChild(cur, newNode); if (tmp != newNode) return; if ((last != NULL) && (last->next == newNode)) { xmlTextMerge(last, newNode); } } break; } case XML_ATTRIBUTE_NODE: break; case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: case XML_ENTITY_REF_NODE: case XML_ENTITY_NODE: case XML_PI_NODE: case XML_COMMENT_NODE: case XML_NOTATION_NODE: if (content != NULL) { if ((cur->content == (xmlChar *) &(cur->properties)) || ((cur->doc != NULL) && (cur->doc->dict != NULL) && xmlDictOwns(cur->doc->dict, cur->content))) { cur->content = xmlStrncatNew(cur->content, content, len); cur->properties = NULL; cur->nsDef = NULL; break; } cur->content = xmlStrncat(cur->content, content, len); } case XML_DOCUMENT_NODE: case XML_DTD_NODE: case XML_HTML_DOCUMENT_NODE: case XML_DOCUMENT_TYPE_NODE: case XML_NAMESPACE_DECL: case XML_XINCLUDE_START: case XML_XINCLUDE_END: #ifdef LIBXML_DOCB_ENABLED case XML_DOCB_DOCUMENT_NODE: #endif break; case XML_ELEMENT_DECL: case XML_ATTRIBUTE_DECL: case XML_ENTITY_DECL: break; } } /** * xmlNodeAddContent: * @cur: the node being modified * @content: extra content * * Append the extra substring to the node content. * NOTE: In contrast to xmlNodeSetContent(), @content is supposed to be * raw text, so unescaped XML special chars are allowed, entity * references are not supported. */ void xmlNodeAddContent(xmlNodePtr cur, const xmlChar *content) { int len; if (cur == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNodeAddContent : node == NULL\n"); #endif return; } if (content == NULL) return; len = xmlStrlen(content); xmlNodeAddContentLen(cur, content, len); } /** * xmlTextMerge: * @first: the first text node * @second: the second text node being merged * * Merge two text nodes into one * Returns the first text node augmented */ xmlNodePtr xmlTextMerge(xmlNodePtr first, xmlNodePtr second) { if (first == NULL) return(second); if (second == NULL) return(first); if (first->type != XML_TEXT_NODE) return(first); if (second->type != XML_TEXT_NODE) return(first); if (second->name != first->name) return(first); xmlNodeAddContent(first, second->content); xmlUnlinkNode(second); xmlFreeNode(second); return(first); } #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XPATH_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) /** * xmlGetNsList: * @doc: the document * @node: the current node * * Search all the namespace applying to a given element. * Returns an NULL terminated array of all the #xmlNsPtr found * that need to be freed by the caller or NULL if no * namespace if defined */ xmlNsPtr * xmlGetNsList(xmlDocPtr doc ATTRIBUTE_UNUSED, xmlNodePtr node) { xmlNsPtr cur; xmlNsPtr *ret = NULL; int nbns = 0; int maxns = 10; int i; while (node != NULL) { if (node->type == XML_ELEMENT_NODE) { cur = node->nsDef; while (cur != NULL) { if (ret == NULL) { ret = (xmlNsPtr *) xmlMalloc((maxns + 1) * sizeof(xmlNsPtr)); if (ret == NULL) { xmlTreeErrMemory("getting namespace list"); return (NULL); } ret[nbns] = NULL; } for (i = 0; i < nbns; i++) { if ((cur->prefix == ret[i]->prefix) || (xmlStrEqual(cur->prefix, ret[i]->prefix))) break; } if (i >= nbns) { if (nbns >= maxns) { maxns *= 2; ret = (xmlNsPtr *) xmlRealloc(ret, (maxns + 1) * sizeof(xmlNsPtr)); if (ret == NULL) { xmlTreeErrMemory("getting namespace list"); return (NULL); } } ret[nbns++] = cur; ret[nbns] = NULL; } cur = cur->next; } } node = node->parent; } return (ret); } #endif /* LIBXML_TREE_ENABLED */ /* * xmlTreeEnsureXMLDecl: * @doc: the doc * * Ensures that there is an XML namespace declaration on the doc. * * Returns the XML ns-struct or NULL on API and internal errors. */ static xmlNsPtr xmlTreeEnsureXMLDecl(xmlDocPtr doc) { if (doc == NULL) return (NULL); if (doc->oldNs != NULL) return (doc->oldNs); { xmlNsPtr ns; ns = (xmlNsPtr) xmlMalloc(sizeof(xmlNs)); if (ns == NULL) { xmlTreeErrMemory( "allocating the XML namespace"); return (NULL); } memset(ns, 0, sizeof(xmlNs)); ns->type = XML_LOCAL_NAMESPACE; ns->href = xmlStrdup(XML_XML_NAMESPACE); ns->prefix = xmlStrdup((const xmlChar *)"xml"); doc->oldNs = ns; return (ns); } } /** * xmlSearchNs: * @doc: the document * @node: the current node * @nameSpace: the namespace prefix * * Search a Ns registered under a given name space for a document. * recurse on the parents until it finds the defined namespace * or return NULL otherwise. * @nameSpace can be NULL, this is a search for the default namespace. * We don

t declare * the namespace within those you will be in troubles !!! A warning * is generated to cover this case. * * Returns the namespace pointer or NULL. */ xmlNsPtr xmlSearchNs(xmlDocPtr doc, xmlNodePtr node, const xmlChar *nameSpace) { xmlNsPtr cur; xmlNodePtr orig = node; if (node == NULL) return(NULL); if ((nameSpace != NULL) && (xmlStrEqual(nameSpace, (const xmlChar *)"xml"))) { if ((doc == NULL) && (node->type == XML_ELEMENT_NODE)) { /* * The XML-1.0 namespace is normally held on the root * element. In this case exceptionally create it on the * node element. */ cur = (xmlNsPtr) xmlMalloc(sizeof(xmlNs)); if (cur == NULL) { xmlTreeErrMemory("searching namespace"); return(NULL); } memset(cur, 0, sizeof(xmlNs)); cur->type = XML_LOCAL_NAMESPACE; cur->href = xmlStrdup(XML_XML_NAMESPACE); cur->prefix = xmlStrdup((const xmlChar *)"xml"); cur->next = node->nsDef; node->nsDef = cur; return(cur); } if (doc == NULL) { doc = node->doc; if (doc == NULL) return(NULL); } /* * Return the XML namespace declaration held by the doc. */ if (doc->oldNs == NULL) return(xmlTreeEnsureXMLDecl(doc)); else return(doc->oldNs); } while (node != NULL) { if ((node->type == XML_ENTITY_REF_NODE) || (node->type == XML_ENTITY_NODE) || (node->type == XML_ENTITY_DECL)) return(NULL); if (node->type == XML_ELEMENT_NODE) { cur = node->nsDef; while (cur != NULL) { if ((cur->prefix == NULL) && (nameSpace == NULL) && (cur->href != NULL)) return(cur); if ((cur->prefix != NULL) && (nameSpace != NULL) && (cur->href != NULL) && (xmlStrEqual(cur->prefix, nameSpace))) return(cur); cur = cur->next; } if (orig != node) { cur = node->ns; if (cur != NULL) { if ((cur->prefix == NULL) && (nameSpace == NULL) && (cur->href != NULL)) return(cur); if ((cur->prefix != NULL) && (nameSpace != NULL) && (cur->href != NULL) && (xmlStrEqual(cur->prefix, nameSpace))) return(cur); } } } node = node->parent; } return(NULL); } /** * xmlNsInScope: * @doc: the document * @node: the current node * @ancestor: the ancestor carrying the namespace * @prefix: the namespace prefix * * Verify that the given namespace held on @ancestor is still in scope * on node. * * Returns 1 if true, 0 if false and -1 in case of error. */ static int xmlNsInScope(xmlDocPtr doc ATTRIBUTE_UNUSED, xmlNodePtr node, xmlNodePtr ancestor, const xmlChar * prefix) { xmlNsPtr tst; while ((node != NULL) && (node != ancestor)) { if ((node->type == XML_ENTITY_REF_NODE) || (node->type == XML_ENTITY_NODE) || (node->type == XML_ENTITY_DECL)) return (-1); if (node->type == XML_ELEMENT_NODE) { tst = node->nsDef; while (tst != NULL) { if ((tst->prefix == NULL) && (prefix == NULL)) return (0); if ((tst->prefix != NULL) && (prefix != NULL) && (xmlStrEqual(tst->prefix, prefix))) return (0); tst = tst->next; } } node = node->parent; } if (node != ancestor) return (-1); return (1); } /** * xmlSearchNsByHref: * @doc: the document * @node: the current node * @href: the namespace value * * Search a Ns aliasing a given URI. Recurse on the parents until it finds * the defined namespace or return NULL otherwise. * Returns the namespace pointer or NULL. */ xmlNsPtr xmlSearchNsByHref(xmlDocPtr doc, xmlNodePtr node, const xmlChar * href) { xmlNsPtr cur; xmlNodePtr orig = node; int is_attr; if ((node == NULL) || (href == NULL)) return (NULL); if (xmlStrEqual(href, XML_XML_NAMESPACE)) { /* * Only the document can hold the XML spec namespace. */ if ((doc == NULL) && (node->type == XML_ELEMENT_NODE)) { /* * The XML-1.0 namespace is normally held on the root * element. In this case exceptionally create it on the * node element. */ cur = (xmlNsPtr) xmlMalloc(sizeof(xmlNs)); if (cur == NULL) { xmlTreeErrMemory("searching namespace"); return (NULL); } memset(cur, 0, sizeof(xmlNs)); cur->type = XML_LOCAL_NAMESPACE; cur->href = xmlStrdup(XML_XML_NAMESPACE); cur->prefix = xmlStrdup((const xmlChar *) "xml"); cur->next = node->nsDef; node->nsDef = cur; return (cur); } if (doc == NULL) { doc = node->doc; if (doc == NULL) return(NULL); } /* * Return the XML namespace declaration held by the doc. */ if (doc->oldNs == NULL) return(xmlTreeEnsureXMLDecl(doc)); else return(doc->oldNs); } is_attr = (node->type == XML_ATTRIBUTE_NODE); while (node != NULL) { if ((node->type == XML_ENTITY_REF_NODE) || (node->type == XML_ENTITY_NODE) || (node->type == XML_ENTITY_DECL)) return (NULL); if (node->type == XML_ELEMENT_NODE) { cur = node->nsDef; while (cur != NULL) { if ((cur->href != NULL) && (href != NULL) && (xmlStrEqual(cur->href, href))) { if (((!is_attr) || (cur->prefix != NULL)) && (xmlNsInScope(doc, orig, node, cur->prefix) == 1)) return (cur); } cur = cur->next; } if (orig != node) { cur = node->ns; if (cur != NULL) { if ((cur->href != NULL) && (href != NULL) && (xmlStrEqual(cur->href, href))) { if (((!is_attr) || (cur->prefix != NULL)) && (xmlNsInScope(doc, orig, node, cur->prefix) == 1)) return (cur); } } } } node = node->parent; } return (NULL); } /** * xmlNewReconciliedNs: * @doc: the document * @tree: a node expected to hold the new namespace * @ns: the original namespace * * This function tries to locate a namespace definition in a tree * ancestors, or create a new namespace definition node similar to * @ns trying to reuse the same prefix. However if the given prefix is * null (default namespace) or reused within the subtree defined by * @tree or on one of its ancestors then a new prefix is generated. * Returns the (new) namespace definition or NULL in case of error */ static xmlNsPtr xmlNewReconciliedNs(xmlDocPtr doc, xmlNodePtr tree, xmlNsPtr ns) { xmlNsPtr def; xmlChar prefix[50]; int counter = 1; if (tree == NULL) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNewReconciliedNs : tree == NULL\n"); #endif return(NULL); } if ((ns == NULL) || (ns->type != XML_NAMESPACE_DECL)) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlNewReconciliedNs : ns == NULL\n"); #endif return(NULL); } /* * Search an existing namespace definition inherited. */ def = xmlSearchNsByHref(doc, tree, ns->href); if (def != NULL) return(def); /* * Find a close prefix which is not already in use. * Let

default

%.20s

default%d

%.20s%d

fixing namespaces

fixing namespaces

fixing namespaces

fixing namespaces

fixing namespaces

fixing namespaces

fixing namespaces

fixing namespaces

:



s up to the caller to free the memory with xmlFree(). */ xmlChar * xmlGetProp(xmlNodePtr node, const xmlChar *name) { xmlAttrPtr prop; prop = xmlHasProp(node, name); if (prop == NULL) return(NULL); return(xmlGetPropNodeValueInternal(prop)); } /** * xmlGetNoNsProp: * @node: the node * @name: the attribute name * * Search and get the value of an attribute associated to a node * This does the entity substitution. * This function looks in DTD attribute declaration for #FIXED or * default declaration values unless DTD use has been turned off. * This function is similar to xmlGetProp except it will accept only * an attribute in no namespace. * * Returns the attribute value or NULL if not found. * It

s up to the caller to free the memory with xmlFree(). */ xmlChar * xmlGetNsProp(xmlNodePtr node, const xmlChar *name, const xmlChar *nameSpace) { xmlAttrPtr prop; prop = xmlGetPropNodeInternal(node, name, nameSpace, xmlCheckDTD); if (prop == NULL) return(NULL); return(xmlGetPropNodeValueInternal(prop)); } #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) /** * xmlUnsetProp: * @node: the node * @name: the attribute name * * Remove an attribute carried by a node. * This handles only attributes in no namespace. * Returns 0 if successful, -1 if not found */ int xmlUnsetProp(xmlNodePtr node, const xmlChar *name) { xmlAttrPtr prop; prop = xmlGetPropNodeInternal(node, name, NULL, 0); if (prop == NULL) return(-1); xmlUnlinkNode((xmlNodePtr) prop); xmlFreeProp(prop); return(0); } /** * xmlUnsetNsProp: * @node: the node * @ns: the namespace definition * @name: the attribute name * * Remove an attribute carried by a node. * Returns 0 if successful, -1 if not found */ int xmlUnsetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name) { xmlAttrPtr prop; prop = xmlGetPropNodeInternal(node, name, (ns != NULL) ? ns->href : NULL, 0); if (prop == NULL) return(-1); xmlUnlinkNode((xmlNodePtr) prop); xmlFreeProp(prop); return(0); } #endif #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_HTML_ENABLED) /** * xmlSetProp: * @node: the node * @name: the attribute name (a QName) * @value: the attribute value * * Set (or reset) an attribute carried by a node. * If @name has a prefix, then the corresponding * namespace-binding will be used, if in scope; it is an * error it there

s value. */ if (prop->atype == XML_ATTRIBUTE_ID) { xmlRemoveID(node->doc, prop); prop->atype = XML_ATTRIBUTE_ID; } if (prop->children != NULL) xmlFreeNodeList(prop->children); prop->children = NULL; prop->last = NULL; prop->ns = ns; if (value != NULL) { xmlNodePtr tmp; if(!xmlCheckUTF8(value)) { xmlTreeErr(XML_TREE_NOT_UTF8, (xmlNodePtr) node->doc, NULL); if (node->doc != NULL) node->doc->encoding = xmlStrdup(BAD_CAST "ISO-8859-1"); } prop->children = xmlNewDocText(node->doc, value); prop->last = NULL; tmp = prop->children; while (tmp != NULL) { tmp->parent = (xmlNodePtr) prop; if (tmp->next == NULL) prop->last = tmp; tmp = tmp->next; } } if (prop->atype == XML_ATTRIBUTE_ID) xmlAddID(NULL, node->doc, value, prop); return(prop); } /* * No equal attr found; create a new one. */ return(xmlNewPropInternal(node, ns, name, value, 0)); } #endif /* LIBXML_TREE_ENABLED */ /** * xmlNodeIsText: * @node: the node * * Is this node a Text node ? * Returns 1 yes, 0 no */ int xmlNodeIsText(xmlNodePtr node) { if (node == NULL) return(0); if (node->type == XML_TEXT_NODE) return(1); return(0); } /** * xmlIsBlankNode: * @node: the node * * Checks whether this node is an empty or whitespace only * (and possibly ignorable) text-node. * * Returns 1 yes, 0 no */ int xmlIsBlankNode(xmlNodePtr node) { const xmlChar *cur; if (node == NULL) return(0); if ((node->type != XML_TEXT_NODE) && (node->type != XML_CDATA_SECTION_NODE)) return(0); if (node->content == NULL) return(1); cur = node->content; while (*cur != 0) { if (!IS_BLANK_CH(*cur)) return(0); cur++; } return(1); } /** * xmlTextConcat: * @node: the node * @content: the content * @len: @content length * * Concat the given string at the end of the existing node content * * Returns -1 in case of error, 0 otherwise */ int xmlTextConcat(xmlNodePtr node, const xmlChar *content, int len) { if (node == NULL) return(-1); if ((node->type != XML_TEXT_NODE) && (node->type != XML_CDATA_SECTION_NODE) && (node->type != XML_COMMENT_NODE) && (node->type != XML_PI_NODE)) { #ifdef DEBUG_TREE xmlGenericError(xmlGenericErrorContext, "xmlTextConcat: node is not text nor CDATA\n"); #endif return(-1); } /* need to check if content is currently in the dictionary */ if ((node->content == (xmlChar *) &(node->properties)) || ((node->doc != NULL) && (node->doc->dict != NULL) && xmlDictOwns(node->doc->dict, node->content))) { node->content = xmlStrncatNew(node->content, content, len); } else { node->content = xmlStrncat(node->content, content, len); } node->properties = NULL; if (node->content == NULL) return(-1); return(0); } /************************************************************************ * * * Output : to a FILE or in memory * * * ************************************************************************/ /** * xmlBufferCreate: * * routine to create an XML buffer. * returns the new structure. */ xmlBufferPtr xmlBufferCreate(void) { xmlBufferPtr ret; ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer)); if (ret == NULL) { xmlTreeErrMemory("creating buffer"); return(NULL); } ret->use = 0; ret->size = xmlDefaultBufferSize; ret->alloc = xmlBufferAllocScheme; ret->content = (xmlChar *) xmlMallocAtomic(ret->size * sizeof(xmlChar)); if (ret->content == NULL) { xmlTreeErrMemory("creating buffer"); xmlFree(ret); return(NULL); } ret->content[0] = 0; ret->contentIO = NULL; return(ret); } /** * xmlBufferCreateSize: * @size: initial size of buffer * * routine to create an XML buffer. * returns the new structure. */ xmlBufferPtr xmlBufferCreateSize(size_t size) { xmlBufferPtr ret; ret = (xmlBufferPtr) xmlMalloc(sizeof(xmlBuffer)); if (ret == NULL) { xmlTreeErrMemory("creating buffer"); return(NULL); } ret->use = 0; ret->alloc = xmlBufferAllocScheme; ret->size = (size ? size+2 : 0); /* +1 for ending null */ if (ret->size){ ret->content = (xmlChar *) xmlMallocAtomic(ret->size * sizeof(xmlChar)); if (ret->content == NULL) { xmlTreeErrMemory("creating buffer"); xmlFree(ret); return(NULL); } ret->content[0] = 0; } else ret->content = NULL; ret->contentIO = NULL; return(ret); } /** * xmlBufferCreateStatic: * @mem: the memory area * @size: the size in byte * * routine to create an XML buffer from an immutable memory area. * The area won

creating buffer

xmlBufferSetAllocationScheme: buf == NULL\n

xmlBufferFree: buf == NULL\n



s enough) (bug 146697) * Apparently BSD too, and it

growing buffer

growing buffer

xmlBufferDump: buf == NULL\n

xmlBufferDump: buf->content == NULL\n

t resize if we don

growing buffer

growing buffer

s * better to make a new allocation and copy only the used range * and free the old one. */ rebuf = (xmlChar *) xmlMallocAtomic(newSize); if (rebuf != NULL) { memcpy(rebuf, buf->content, buf->use); xmlFree(buf->content); rebuf[buf->use] = 0; } } if (rebuf == NULL) { xmlTreeErrMemory("growing buffer"); return 0; } buf->content = rebuf; } buf->size = newSize; return 1; } /** * xmlBufferAdd: * @buf: the buffer to dump * @str: the #xmlChar string * @len: the number of #xmlChar to add * * Add a string range to an XML buffer. if len == -1, the length of * str is recomputed. * * Returns 0 successful, a positive error code number otherwise * and -1 in case of internal or API error. */ int xmlBufferAdd(xmlBufferPtr buf, const xmlChar *str, int len) { unsigned int needSize; if ((str == NULL) || (buf == NULL)) { return -1; } if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1; if (len < -1) { #ifdef DEBUG_BUFFER xmlGenericError(xmlGenericErrorContext, "xmlBufferAdd: len < 0\n"); #endif return -1; } if (len == 0) return 0; if (len < 0) len = xmlStrlen(str); if (len < 0) return -1; if (len == 0) return 0; needSize = buf->use + len + 2; if (needSize > buf->size){ if (!xmlBufferResize(buf, needSize)){ xmlTreeErrMemory("growing buffer"); return XML_ERR_NO_MEMORY; } } memmove(&buf->content[buf->use], str, len*sizeof(xmlChar)); buf->use += len; buf->content[buf->use] = 0; return 0; } /** * xmlBufferAddHead: * @buf: the buffer * @str: the #xmlChar string * @len: the number of #xmlChar to add * * Add a string range to the beginning of an XML buffer. * if len == -1, the length of @str is recomputed. * * Returns 0 successful, a positive error code number otherwise * and -1 in case of internal or API error. */ int xmlBufferAddHead(xmlBufferPtr buf, const xmlChar *str, int len) { unsigned int needSize; if (buf == NULL) return(-1); if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1; if (str == NULL) { #ifdef DEBUG_BUFFER xmlGenericError(xmlGenericErrorContext, "xmlBufferAddHead: str == NULL\n"); #endif return -1; } if (len < -1) { #ifdef DEBUG_BUFFER xmlGenericError(xmlGenericErrorContext, "xmlBufferAddHead: len < 0\n"); #endif return -1; } if (len == 0) return 0; if (len < 0) len = xmlStrlen(str); if (len <= 0) return -1; if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) { size_t start_buf = buf->content - buf->contentIO; if (start_buf > (unsigned int) len) { /* * We can add it in the space previously shrinked */ buf->content -= len; memmove(&buf->content[0], str, len); buf->use += len; buf->size += len; return(0); } } needSize = buf->use + len + 2; if (needSize > buf->size){ if (!xmlBufferResize(buf, needSize)){ xmlTreeErrMemory("growing buffer"); return XML_ERR_NO_MEMORY; } } memmove(&buf->content[len], &buf->content[0], buf->use); memmove(&buf->content[0], str, len); buf->use += len; buf->content[buf->use] = 0; return 0; } /** * xmlBufferCat: * @buf: the buffer to add to * @str: the #xmlChar string * * Append a zero terminated string to an XML buffer. * * Returns 0 successful, a positive error code number otherwise * and -1 in case of internal or API error. */ int xmlBufferCat(xmlBufferPtr buf, const xmlChar *str) { if (buf == NULL) return(-1); if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1; if (str == NULL) return -1; return xmlBufferAdd(buf, str, -1); } /** * xmlBufferCCat: * @buf: the buffer to dump * @str: the C char string * * Append a zero terminated C string to an XML buffer. * * Returns 0 successful, a positive error code number otherwise * and -1 in case of internal or API error. */ int xmlBufferCCat(xmlBufferPtr buf, const char *str) { const char *cur; if (buf == NULL) return(-1); if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return -1; if (str == NULL) { #ifdef DEBUG_BUFFER xmlGenericError(xmlGenericErrorContext, "xmlBufferCCat: str == NULL\n"); #endif return -1; } for (cur = str;*cur != 0;cur++) { if (buf->use + 10 >= buf->size) { if (!xmlBufferResize(buf, buf->use+10)){ xmlTreeErrMemory("growing buffer"); return XML_ERR_NO_MEMORY; } } buf->content[buf->use++] = *cur; } buf->content[buf->use] = 0; return 0; } /** * xmlBufferWriteCHAR: * @buf: the XML buffer * @string: the string to add * * routine which manages and grows an output buffer. This one adds * xmlChars at the end of the buffer. */ void xmlBufferWriteCHAR(xmlBufferPtr buf, const xmlChar *string) { if (buf == NULL) return; if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return; xmlBufferCat(buf, string); } /** * xmlBufferWriteChar: * @buf: the XML buffer output * @string: the string to add * * routine which manage and grows an output buffer. This one add * C chars at the end of the array. */ void xmlBufferWriteChar(xmlBufferPtr buf, const char *string) { if (buf == NULL) return; if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return; xmlBufferCCat(buf, string); } /** * xmlBufferWriteQuotedString: * @buf: the XML buffer output * @string: the string to add * * routine which manage and grows an output buffer. This one writes * a quoted or double quoted #xmlChar string, checking first if it holds * quote or double-quotes internally */ void xmlBufferWriteQuotedString(xmlBufferPtr buf, const xmlChar *string) { const xmlChar *cur, *base; if (buf == NULL) return; if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) return; if (xmlStrchr(string,

')) { if (xmlStrchr(string, '\'')) { #ifdef DEBUG_BUFFER xmlGenericError(xmlGenericErrorContext,

); #endif xmlBufferCCat(buf,



"

&quot;

\"

\'

\'

\"

\"

s ns-decls * -1 == @parent

allocating namespace map

allocating namespace map item

allocating DOM-wrapper context

alloc ns map item

realloc ns map item

s oldNs. */ ns = xmlDOMWrapStoreNs(doc, node->ns->href, node->ns->prefix); if (ns == NULL) goto internal_error; } if (ns != NULL) { /* * Add mapping. */ if (xmlDOMWrapNSNormAddNsMapItem2(&list, &sizeList, &nbList, node->ns, ns) == -1) goto internal_error; } node->ns = ns; } if ((node->type == XML_ELEMENT_NODE) && (node->properties != NULL)) { node = (xmlNodePtr) node->properties; continue; } break; default: goto next_sibling; } next_node: if ((node->type == XML_ELEMENT_NODE) && (node->children != NULL)) { node = node->children; continue; } next_sibling: if (node == NULL) break; if (node->next != NULL) node = node->next; else { node = node->parent; goto next_sibling; } } while (node != NULL); if (list != NULL) xmlFree(list); return (0); internal_error: if (list != NULL) xmlFree(list); return (-1); } /* * xmlSearchNsByNamespaceStrict: * @doc: the document * @node: the start node * @nsName: the searched namespace name * @retNs: the resulting ns-decl * @prefixed: if the found ns-decl must have a prefix (for attributes) * * Dynamically searches for a ns-declaration which matches * the given @nsName in the ancestor-or-self axis of @node. * * Returns 1 if a ns-decl was found, 0 if not and -1 on API * and internal errors. */ static int xmlSearchNsByNamespaceStrict(xmlDocPtr doc, xmlNodePtr node, const xmlChar* nsName, xmlNsPtr *retNs, int prefixed) { xmlNodePtr cur, prev = NULL, out = NULL; xmlNsPtr ns, prevns; if ((doc == NULL) || (nsName == NULL) || (retNs == NULL)) return (-1); *retNs = NULL; if (xmlStrEqual(nsName, XML_XML_NAMESPACE)) { *retNs = xmlTreeEnsureXMLDecl(doc); if (*retNs == NULL) return (-1); return (1); } cur = node; do { if (cur->type == XML_ELEMENT_NODE) { if (cur->nsDef != NULL) { for (ns = cur->nsDef; ns != NULL; ns = ns->next) { if (prefixed && (ns->prefix == NULL)) continue; if (prev != NULL) { /* * Check the last level of ns-decls for a * shadowing prefix. */ prevns = prev->nsDef; do { if ((prevns->prefix == ns->prefix) || ((prevns->prefix != NULL) && (ns->prefix != NULL) && xmlStrEqual(prevns->prefix, ns->prefix))) { /* * Shadowed. */ break; } prevns = prevns->next; } while (prevns != NULL); if (prevns != NULL) continue; } /* * Ns-name comparison. */ if ((nsName == ns->href) || xmlStrEqual(nsName, ns->href)) { /* * At this point the prefix can only be shadowed, * if we are the the (at least) 3rd level of * ns-decls. */ if (out) { int ret; ret = xmlNsInScope(doc, node, prev, ns->prefix); if (ret < 0) return (-1); /* * TODO: Should we try to find a matching ns-name * only once? This here keeps on searching. * I think we should try further since, there might * be an other matching ns-decl with an unshadowed * prefix. */ if (! ret) continue; } *retNs = ns; return (1); } } out = prev; prev = cur; } } else if ((cur->type == XML_ENTITY_NODE) || (cur->type == XML_ENTITY_DECL)) return (0); cur = cur->parent; } while ((cur != NULL) && (cur->doc != (xmlDocPtr) cur)); return (0); } /* * xmlSearchNsByPrefixStrict: * @doc: the document * @node: the start node * @prefix: the searched namespace prefix * @retNs: the resulting ns-decl * * Dynamically searches for a ns-declaration which matches * the given @nsName in the ancestor-or-self axis of @node. * * Returns 1 if a ns-decl was found, 0 if not and -1 on API * and internal errors. */ static int xmlSearchNsByPrefixStrict(xmlDocPtr doc, xmlNodePtr node, const xmlChar* prefix, xmlNsPtr *retNs) { xmlNodePtr cur; xmlNsPtr ns; if ((doc == NULL) || (node == NULL)) return (-1); if (retNs) *retNs = NULL; if (IS_STR_XML(prefix)) { if (retNs) { *retNs = xmlTreeEnsureXMLDecl(doc); if (*retNs == NULL) return (-1); } return (1); } cur = node; do { if (cur->type == XML_ELEMENT_NODE) { if (cur->nsDef != NULL) { ns = cur->nsDef; do { if ((prefix == ns->prefix) || xmlStrEqual(prefix, ns->prefix)) { /* * Disabled namespaces, e.g. xmlns:abc="". */ if (ns->href == NULL) return(0); if (retNs) *retNs = ns; return (1); } ns = ns->next; } while (ns != NULL); } } else if ((cur->type == XML_ENTITY_NODE) || (cur->type == XML_ENTITY_DECL)) return (0); cur = cur->parent; } while ((cur != NULL) && (cur->doc != (xmlDocPtr) cur)); return (0); } /* * xmlDOMWrapNSNormDeclareNsForced: * @doc: the doc * @elem: the element-node to declare on * @nsName: the namespace-name of the ns-decl * @prefix: the preferred prefix of the ns-decl * @checkShadow: ensure that the new ns-decl doesn

s ns-decls. */ if ((elem->nsDef != NULL) && (xmlTreeNSListLookupByPrefix(elem->nsDef, pref) != NULL)) goto ns_next_prefix; if (checkShadow && elem->parent && ((xmlNodePtr) elem->parent->doc != elem->parent)) { /* * Does it shadow ancestor ns-decls? */ if (xmlSearchNsByPrefixStrict(doc, elem->parent, pref, NULL) == 1) goto ns_next_prefix; } ret = xmlNewNs(NULL, nsName, pref); if (ret == NULL) return (NULL); if (elem->nsDef == NULL) elem->nsDef = ret; else { xmlNsPtr ns2 = elem->nsDef; while (ns2->next != NULL) ns2 = ns2->next; ns2->next = ret; } return (ret); ns_next_prefix: counter++; if (counter > 1000) return (NULL); if (prefix == NULL) { snprintf((char *) buf, sizeof(buf), "ns_%d", counter); } else snprintf((char *) buf, sizeof(buf), "%.30s_%d", (char *)prefix, counter); pref = BAD_CAST buf; } } /* * xmlDOMWrapNSNormAquireNormalizedNs: * @doc: the doc * @elem: the element-node to declare namespaces on * @ns: the ns-struct to use for the search * @retNs: the found/created ns-struct * @nsMap: the ns-map * @depth: the current tree depth * @ancestorsOnly: search in ancestor ns-decls only * @prefixed: if the searched ns-decl must have a prefix (for attributes) * * Searches for a matching ns-name in the ns-decls of @nsMap, if not * found it will either declare it on @elem, or store it in doc->oldNs. * If a new ns-decl needs to be declared on @elem, it tries to use the * @ns->prefix for it, if this prefix is already in use on @elem, it will * change the prefix or the new ns-decl. * * Returns 0 if succeeded, -1 otherwise and on API/internal errors. */ static int xmlDOMWrapNSNormAquireNormalizedNs(xmlDocPtr doc, xmlNodePtr elem, xmlNsPtr ns, xmlNsPtr *retNs, xmlNsMapPtr *nsMap, int depth, int ancestorsOnly, int prefixed) { xmlNsMapItemPtr mi; if ((doc == NULL) || (ns == NULL) || (retNs == NULL) || (nsMap == NULL)) return (-1); *retNs = NULL; /* * Handle XML namespace. */ if (IS_STR_XML(ns->prefix)) { /* * Insert XML namespace mapping. */ *retNs = xmlTreeEnsureXMLDecl(doc); if (*retNs == NULL) return (-1); return (0); } /* * If the search should be done in ancestors only and no * @elem (the first ancestor) was specified, then skip the search. */ if ((XML_NSMAP_NOTEMPTY(*nsMap)) && (! (ancestorsOnly && (elem == NULL)))) { /* * Try to find an equal ns-name in in-scope ns-decls. */ XML_NSMAP_FOREACH(*nsMap, mi) { if ((mi->depth >= XML_TREE_NSMAP_PARENT) && /* * ancestorsOnly: This should be turned on to gain speed, * if one knows that the branch itself was already * ns-wellformed and no stale references existed. * I.e. it searches in the ancestor axis only. */ ((! ancestorsOnly) || (mi->depth == XML_TREE_NSMAP_PARENT)) && /* Skip shadowed prefixes. */ (mi->shadowDepth == -1) && /* Skip xmlns="" or xmlns:foo="". */ ((mi->newNs->href != NULL) && (mi->newNs->href[0] != 0)) && /* Ensure a prefix if wanted. */ ((! prefixed) || (mi->newNs->prefix != NULL)) && /* Equal ns name */ ((mi->newNs->href == ns->href) || xmlStrEqual(mi->newNs->href, ns->href))) { /* Set the mapping. */ mi->oldNs = ns; *retNs = mi->newNs; return (0); } } } /* * No luck, the namespace is out of scope or shadowed. */ if (elem == NULL) { xmlNsPtr tmpns; /* * Store ns-decls in "oldNs" of the document-node. */ tmpns = xmlDOMWrapStoreNs(doc, ns->href, ns->prefix); if (tmpns == NULL) return (-1); /* * Insert mapping. */ if (xmlDOMWrapNsMapAddItem(nsMap, -1, ns, tmpns, XML_TREE_NSMAP_DOC) == NULL) { xmlFreeNs(tmpns); return (-1); } *retNs = tmpns; } else { xmlNsPtr tmpns; tmpns = xmlDOMWrapNSNormDeclareNsForced(doc, elem, ns->href, ns->prefix, 0); if (tmpns == NULL) return (-1); if (*nsMap != NULL) { /* * Does it shadow ancestor ns-decls? */ XML_NSMAP_FOREACH(*nsMap, mi) { if ((mi->depth < depth) && (mi->shadowDepth == -1) && ((ns->prefix == mi->newNs->prefix) || xmlStrEqual(ns->prefix, mi->newNs->prefix))) { /* * Shadows. */ mi->shadowDepth = depth; break; } } } if (xmlDOMWrapNsMapAddItem(nsMap, -1, ns, tmpns, depth) == NULL) { xmlFreeNs(tmpns); return (-1); } *retNs = tmpns; } return (0); } typedef enum { XML_DOM_RECONNS_REMOVEREDUND = 1<<0 } xmlDOMReconcileNSOptions; /* * xmlDOMWrapReconcileNamespaces: * @ctxt: DOM wrapper context, unused at the moment * @elem: the element-node * @options: option flags * * Ensures that ns-references point to ns-decls hold on element-nodes. * Ensures that the tree is namespace wellformed by creating additional * ns-decls where needed. Note that, since prefixes of already existent * ns-decls can be shadowed by this process, it could break QNames in * attribute values or element content. * * NOTE: This function was not intensively tested. * * Returns 0 if succeeded, -1 otherwise and on API/internal errors. */ int xmlDOMWrapReconcileNamespaces(xmlDOMWrapCtxtPtr ctxt ATTRIBUTE_UNUSED, xmlNodePtr elem, int options) { int depth = -1, adoptns = 0, parnsdone = 0; xmlNsPtr ns, prevns; xmlDocPtr doc; xmlNodePtr cur, curElem = NULL; xmlNsMapPtr nsMap = NULL; xmlNsMapItemPtr /* topmi = NULL, */ mi; /* @ancestorsOnly should be set by an option flag. */ int ancestorsOnly = 0; int optRemoveRedundantNS = ((xmlDOMReconcileNSOptions) options & XML_DOM_RECONNS_REMOVEREDUND) ? 1 : 0; xmlNsPtr *listRedund = NULL; int sizeRedund = 0, nbRedund = 0, ret, i, j; if ((elem == NULL) || (elem->doc == NULL) || (elem->type != XML_ELEMENT_NODE)) return (-1); doc = elem->doc; cur = elem; do { switch (cur->type) { case XML_ELEMENT_NODE: adoptns = 1; curElem = cur; depth++; /* * Namespace declarations. */ if (cur->nsDef != NULL) { prevns = NULL; ns = cur->nsDef; while (ns != NULL) { if (! parnsdone) { if ((elem->parent) && ((xmlNodePtr) elem->parent->doc != elem->parent)) { /* * Gather ancestor in-scope ns-decls. */ if (xmlDOMWrapNSNormGatherInScopeNs(&nsMap, elem->parent) == -1) goto internal_error; } parnsdone = 1; } /* * Lookup the ns ancestor-axis for equal ns-decls in scope. */ if (optRemoveRedundantNS && XML_NSMAP_NOTEMPTY(nsMap)) { XML_NSMAP_FOREACH(nsMap, mi) { if ((mi->depth >= XML_TREE_NSMAP_PARENT) && (mi->shadowDepth == -1) && ((ns->prefix == mi->newNs->prefix) || xmlStrEqual(ns->prefix, mi->newNs->prefix)) && ((ns->href == mi->newNs->href) || xmlStrEqual(ns->href, mi->newNs->href))) { /* * A redundant ns-decl was found. * Add it to the list of redundant ns-decls. */ if (xmlDOMWrapNSNormAddNsMapItem2(&listRedund, &sizeRedund, &nbRedund, ns, mi->newNs) == -1) goto internal_error; /* * Remove the ns-decl from the element-node. */ if (prevns) prevns->next = ns->next; else cur->nsDef = ns->next; goto next_ns_decl; } } } /* * Skip ns-references handling if the referenced * ns-decl is declared on the same element. */ if ((cur->ns != NULL) && adoptns && (cur->ns == ns)) adoptns = 0; /* * Does it shadow any ns-decl? */ if (XML_NSMAP_NOTEMPTY(nsMap)) { XML_NSMAP_FOREACH(nsMap, mi) { if ((mi->depth >= XML_TREE_NSMAP_PARENT) && (mi->shadowDepth == -1) && ((ns->prefix == mi->newNs->prefix) || xmlStrEqual(ns->prefix, mi->newNs->prefix))) { mi->shadowDepth = depth; } } } /* * Push mapping. */ if (xmlDOMWrapNsMapAddItem(&nsMap, -1, ns, ns, depth) == NULL) goto internal_error; prevns = ns; next_ns_decl: ns = ns->next; } } if (! adoptns) goto ns_end; /* No break on purpose. */ case XML_ATTRIBUTE_NODE: /* No ns, no fun. */ if (cur->ns == NULL) goto ns_end; if (! parnsdone) { if ((elem->parent) && ((xmlNodePtr) elem->parent->doc != elem->parent)) { if (xmlDOMWrapNSNormGatherInScopeNs(&nsMap, elem->parent) == -1) goto internal_error; } parnsdone = 1; } /* * Adjust the reference if this was a redundant ns-decl. */ if (listRedund) { for (i = 0, j = 0; i < nbRedund; i++, j += 2) { if (cur->ns == listRedund[j]) { cur->ns = listRedund[++j]; break; } } } /* * Adopt ns-references. */ if (XML_NSMAP_NOTEMPTY(nsMap)) { /* * Search for a mapping. */ XML_NSMAP_FOREACH(nsMap, mi) { if ((mi->shadowDepth == -1) && (cur->ns == mi->oldNs)) { cur->ns = mi->newNs; goto ns_end; } } } /* * Aquire a normalized ns-decl and add it to the map. */ if (xmlDOMWrapNSNormAquireNormalizedNs(doc, curElem, cur->ns, &ns, &nsMap, depth, ancestorsOnly, (cur->type == XML_ATTRIBUTE_NODE) ? 1 : 0) == -1) goto internal_error; cur->ns = ns; ns_end: if ((cur->type == XML_ELEMENT_NODE) && (cur->properties != NULL)) { /* * Process attributes. */ cur = (xmlNodePtr) cur->properties; continue; } break; default: goto next_sibling; } into_content: if ((cur->type == XML_ELEMENT_NODE) && (cur->children != NULL)) { /* * Process content of element-nodes only. */ cur = cur->children; continue; } next_sibling: if (cur == elem) break; if (cur->type == XML_ELEMENT_NODE) { if (XML_NSMAP_NOTEMPTY(nsMap)) { /* * Pop mappings. */ while ((nsMap->last != NULL) && (nsMap->last->depth >= depth)) { XML_NSMAP_POP(nsMap, mi) } /* * Unshadow. */ XML_NSMAP_FOREACH(nsMap, mi) { if (mi->shadowDepth >= depth) mi->shadowDepth = -1; } } depth--; } if (cur->next != NULL) cur = cur->next; else { if (cur->type == XML_ATTRIBUTE_NODE) { cur = cur->parent; goto into_content; } cur = cur->parent; goto next_sibling; } } while (cur != NULL); ret = 0; goto exit; internal_error: ret = -1; exit: if (listRedund) { for (i = 0, j = 0; i < nbRedund; i++, j += 2) { xmlFreeNs(listRedund[j]); } xmlFree(listRedund); } if (nsMap != NULL) xmlDOMWrapNsMapFree(nsMap); return (ret); } /* * xmlDOMWrapAdoptBranch: * @ctxt: the optional context for custom processing * @sourceDoc: the optional sourceDoc * @node: the element-node to start with * @destDoc: the destination doc for adoption * @destParent: the optional new parent of @node in @destDoc * @options: option flags * * Ensures that ns-references point to @destDoc: either to * elements->nsDef entries if @destParent is given, or to * @destDoc->oldNs otherwise. * If @destParent is given, it ensures that the tree is namespace * wellformed by creating additional ns-decls where needed. * Note that, since prefixes of already existent ns-decls can be * shadowed by this process, it could break QNames in attribute * values or element content. * * NOTE: This function was not intensively tested. * * Returns 0 if succeeded, -1 otherwise and on API/internal errors. */ static int xmlDOMWrapAdoptBranch(xmlDOMWrapCtxtPtr ctxt, xmlDocPtr sourceDoc, xmlNodePtr node, xmlDocPtr destDoc, xmlNodePtr destParent, int options ATTRIBUTE_UNUSED) { int ret = 0; xmlNodePtr cur, curElem = NULL; xmlNsMapPtr nsMap = NULL; xmlNsMapItemPtr mi; xmlNsPtr ns = NULL; int depth = -1, adoptStr = 1; /* gather @parent

s no destination parent * 2) custom ns-reference handling is used */ if ((destParent == NULL) || (ctxt && ctxt->getNsForNodeFunc)) { parnsdone = 1; } else parnsdone = 0; cur = node; while (cur != NULL) { /* * Paranoid source-doc sanity check. */ if (cur->doc != sourceDoc) { /* * We

t be referenced by node->ns. */ if ((cur->nsDef) && ((ctxt == NULL) || (ctxt->getNsForNodeFunc == NULL))) { if (! parnsdone) { /* * Gather @parent

s the users fault * if not. */ if (xmlDOMWrapNsMapAddItem(&nsMap, -1, cur->ns, ns, XML_TREE_NSMAP_CUSTOM) == NULL) goto internal_error; cur->ns = ns; } else { /* * Aquire a normalized ns-decl and add it to the map. */ if (xmlDOMWrapNSNormAquireNormalizedNs(destDoc, /* ns-decls on curElem or on destDoc->oldNs */ destParent ? curElem : NULL, cur->ns, &ns, &nsMap, depth, ancestorsOnly, /* ns-decls must be prefixed for attributes. */ (cur->type == XML_ATTRIBUTE_NODE) ? 1 : 0) == -1) goto internal_error; cur->ns = ns; } ns_end: /* * Further node properties. * TODO: Is this all? */ XML_TREE_ADOPT_STR(cur->name) if (cur->type == XML_ELEMENT_NODE) { cur->psvi = NULL; cur->line = 0; cur->extra = 0; /* * Walk attributes. */ if (cur->properties != NULL) { /* * Process first attribute node. */ cur = (xmlNodePtr) cur->properties; continue; } } else { /* * Attributes. */ if ((sourceDoc != NULL) && (((xmlAttrPtr) cur)->atype == XML_ATTRIBUTE_ID)) { xmlRemoveID(sourceDoc, (xmlAttrPtr) cur); } ((xmlAttrPtr) cur)->atype = 0; ((xmlAttrPtr) cur)->psvi = NULL; } break; case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: /* * This puts the content in the dest dict, only if * it was previously in the source dict. */ XML_TREE_ADOPT_STR_2(cur->content) goto leave_node; case XML_ENTITY_REF_NODE: /* * Remove reference to the entitity-node. */ cur->content = NULL; cur->children = NULL; cur->last = NULL; if ((destDoc->intSubset) || (destDoc->extSubset)) { xmlEntityPtr ent; /* * Assign new entity-node if available. */ ent = xmlGetDocEntity(destDoc, cur->name); if (ent != NULL) { cur->content = ent->content; cur->children = (xmlNodePtr) ent; cur->last = (xmlNodePtr) ent; } } goto leave_node; case XML_PI_NODE: XML_TREE_ADOPT_STR(cur->name) XML_TREE_ADOPT_STR_2(cur->content) break; case XML_COMMENT_NODE: break; default: goto internal_error; } /* * Walk the tree. */ if (cur->children != NULL) { cur = cur->children; continue; } leave_node: if (cur == node) break; if ((cur->type == XML_ELEMENT_NODE) || (cur->type == XML_XINCLUDE_START) || (cur->type == XML_XINCLUDE_END)) { /* * TODO: Do we expect nsDefs on XML_XINCLUDE_START? */ if (XML_NSMAP_NOTEMPTY(nsMap)) { /* * Pop mappings. */ while ((nsMap->last != NULL) && (nsMap->last->depth >= depth)) { XML_NSMAP_POP(nsMap, mi) } /* * Unshadow. */ XML_NSMAP_FOREACH(nsMap, mi) { if (mi->shadowDepth >= depth) mi->shadowDepth = -1; } } depth--; } if (cur->next != NULL) cur = cur->next; else if ((cur->type == XML_ATTRIBUTE_NODE) && (cur->parent->children != NULL)) { cur = cur->parent->children; } else { cur = cur->parent; goto leave_node; } } goto exit; internal_error: ret = -1; exit: /* * Cleanup. */ if (nsMap != NULL) { if ((ctxt) && (ctxt->namespaceMap == nsMap)) { /* * Just cleanup the map but don

t know already where the cloned branch * will be added to. * * If @destParent is given, it ensures that the tree is namespace * wellformed by creating additional ns-decls where needed. * Note that, since prefixes of already existent ns-decls can be * shadowed by this process, it could break QNames in attribute * values or element content. * TODO: * 1) What to do with XInclude? Currently this returns an error for XInclude. * * Returns 0 if the operation succeeded, * 1 if a node of unsupported (or not yet supported) type was given, * -1 on API/internal errors. */ int xmlDOMWrapCloneNode(xmlDOMWrapCtxtPtr ctxt, xmlDocPtr sourceDoc, xmlNodePtr node, xmlNodePtr *resNode, xmlDocPtr destDoc, xmlNodePtr destParent, int deep, int options ATTRIBUTE_UNUSED) { int ret = 0; xmlNodePtr cur, curElem = NULL; xmlNsMapPtr nsMap = NULL; xmlNsMapItemPtr mi; xmlNsPtr ns; int depth = -1; /* int adoptStr = 1; */ /* gather @parent

ll assume XIncluded nodes if the doc differs. * TODO: Do we need to reconciliate XIncluded nodes? * TODO: This here returns -1 in this case. */ goto internal_error; } /* * Create a new node. */ switch (cur->type) { case XML_XINCLUDE_START: case XML_XINCLUDE_END: /* * TODO: What to do with XInclude? */ goto internal_error; break; case XML_ELEMENT_NODE: case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: case XML_COMMENT_NODE: case XML_PI_NODE: case XML_DOCUMENT_FRAG_NODE: case XML_ENTITY_REF_NODE: case XML_ENTITY_NODE: /* * Nodes of xmlNode structure. */ clone = (xmlNodePtr) xmlMalloc(sizeof(xmlNode)); if (clone == NULL) { xmlTreeErrMemory("xmlDOMWrapCloneNode(): allocating a node"); goto internal_error; } memset(clone, 0, sizeof(xmlNode)); /* * Set hierachical links. */ if (resultClone != NULL) { clone->parent = parentClone; if (prevClone) { prevClone->next = clone; clone->prev = prevClone; } else parentClone->children = clone; } else resultClone = clone; break; case XML_ATTRIBUTE_NODE: /* * Attributes (xmlAttr). */ clone = (xmlNodePtr) xmlMalloc(sizeof(xmlAttr)); if (clone == NULL) { xmlTreeErrMemory("xmlDOMWrapCloneNode(): allocating an attr-node"); goto internal_error; } memset(clone, 0, sizeof(xmlAttr)); /* * Set hierachical links. * TODO: Change this to add to the end of attributes. */ if (resultClone != NULL) { clone->parent = parentClone; if (prevClone) { prevClone->next = clone; clone->prev = prevClone; } else parentClone->properties = (xmlAttrPtr) clone; } else resultClone = clone; break; default: /* * TODO QUESTION: Any other nodes expected? */ goto internal_error; } clone->type = cur->type; clone->doc = destDoc; /* * Clone the name of the node if any. */ if (cur->name == xmlStringText) clone->name = xmlStringText; else if (cur->name == xmlStringTextNoenc) /* * NOTE: Although xmlStringTextNoenc is never assigned to a node * in tree.c, it might be set in Libxslt via * "xsl:disable-output-escaping". */ clone->name = xmlStringTextNoenc; else if (cur->name == xmlStringComment) clone->name = xmlStringComment; else if (cur->name != NULL) { DICT_CONST_COPY(cur->name, clone->name); } switch (cur->type) { case XML_XINCLUDE_START: case XML_XINCLUDE_END: /* * TODO */ return (-1); case XML_ELEMENT_NODE: curElem = cur; depth++; /* * Namespace declarations. */ if (cur->nsDef != NULL) { if (! parnsdone) { if (destParent && (ctxt == NULL)) { /* * Gather @parent

xmlDOMWrapCloneNode():

allocating namespace

t be referenced by node->ns. */ if ((ctxt == NULL) || (ctxt->getNsForNodeFunc == NULL)) { /* * Does it shadow any ns-decl? */ if (XML_NSMAP_NOTEMPTY(nsMap)) { XML_NSMAP_FOREACH(nsMap, mi) { if ((mi->depth >= XML_TREE_NSMAP_PARENT) && (mi->shadowDepth == -1) && ((ns->prefix == mi->newNs->prefix) || xmlStrEqual(ns->prefix, mi->newNs->prefix))) { /* * Mark as shadowed at the current * depth. */ mi->shadowDepth = depth; } } } /* * Push mapping. */ if (xmlDOMWrapNsMapAddItem(&nsMap, -1, ns, cloneNs, depth) == NULL) goto internal_error; } } } /* cur->ns will be processed further down. */ break; case XML_ATTRIBUTE_NODE: /* IDs will be processed further down. */ /* cur->ns will be processed further down. */ break; case XML_TEXT_NODE: case XML_CDATA_SECTION_NODE: /* * Note that this will also cover the values of attributes. */ DICT_COPY(cur->content, clone->content); goto leave_node; case XML_ENTITY_NODE: /* TODO: What to do here? */ goto leave_node; case XML_ENTITY_REF_NODE: if (sourceDoc != destDoc) { if ((destDoc->intSubset) || (destDoc->extSubset)) { xmlEntityPtr ent; /* * Different doc: Assign new entity-node if available. */ ent = xmlGetDocEntity(destDoc, cur->name); if (ent != NULL) { clone->content = ent->content; clone->children = (xmlNodePtr) ent; clone->last = (xmlNodePtr) ent; } } } else { /* * Same doc: Use the current node

s mapping. */ if (xmlDOMWrapNsMapAddItem(&nsMap, -1, cur->ns, ns, XML_TREE_NSMAP_CUSTOM) == NULL) goto internal_error; clone->ns = ns; } else { /* * Aquire a normalized ns-decl and add it to the map. */ if (xmlDOMWrapNSNormAquireNormalizedNs(destDoc, /* ns-decls on curElem or on destDoc->oldNs */ destParent ? curElem : NULL, cur->ns, &ns, &nsMap, depth, /* if we need to search only in the ancestor-axis */ ancestorsOnly, /* ns-decls must be prefixed for attributes. */ (cur->type == XML_ATTRIBUTE_NODE) ? 1 : 0) == -1) goto internal_error; clone->ns = ns; } end_ns_reference: /* * Some post-processing. * * Handle ID attributes. */ if ((clone->type == XML_ATTRIBUTE_NODE) && (clone->parent != NULL)) { if (xmlIsID(destDoc, clone->parent, (xmlAttrPtr) clone)) { xmlChar *idVal; idVal = xmlNodeListGetString(cur->doc, cur->children, 1); if (idVal != NULL) { if (xmlAddID(NULL, destDoc, idVal, (xmlAttrPtr) cur) == NULL) { /* TODO: error message. */ xmlFree(idVal); goto internal_error; } xmlFree(idVal); } } } /* ** ** The following will traverse the tree ************************** ** * * Walk the element

s attribute-nodes. */ if (cur == node) break; if ((cur->type == XML_ELEMENT_NODE) || (cur->type == XML_XINCLUDE_START) || (cur->type == XML_XINCLUDE_END)) { /* * TODO: Do we expect nsDefs on XML_XINCLUDE_START? */ if (XML_NSMAP_NOTEMPTY(nsMap)) { /* * Pop mappings. */ while ((nsMap->last != NULL) && (nsMap->last->depth >= depth)) { XML_NSMAP_POP(nsMap, mi) } /* * Unshadow. */ XML_NSMAP_FOREACH(nsMap, mi) { if (mi->shadowDepth >= depth) mi->shadowDepth = -1; } } depth--; } if (cur->next != NULL) { prevClone = clone; cur = cur->next; } else if (cur->type != XML_ATTRIBUTE_NODE) { /* * Set clone->last. */ if (clone->parent != NULL) clone->parent->last = clone; clone = clone->parent; parentClone = clone->parent; /* * Process parent --> next; */ cur = cur->parent; goto leave_node; } else { /* This is for attributes only. */ clone = clone->parent; parentClone = clone->parent; /* * Process parent-element --> children. */ cur = cur->parent; goto into_content; } } goto exit; internal_error: ret = -1; exit: /* * Cleanup. */ if (nsMap != NULL) { if ((ctxt) && (ctxt->namespaceMap == nsMap)) { /* * Just cleanup the map but don

elfgcchack.h

Summary: interfaces for tree manipulation Description: this module describes the structures found in an tree resulting from an XML or HTML parsing, as well as the API provided for various processing on that tree Copy: See Copyright for the status of this software. Author: Daniel Veillard

Some of the basic types pointer to structures:

xmlIO.h

parser.h

entities.h

BASE_BUFFER_SIZE: default buffer size 4000.

LIBXML_NAMESPACE_DICT: Defines experimental behaviour: 1) xmlNs gets an additional field @context (a xmlDoc) 2) when creating a tree, xmlNs->href is stored in the dict of xmlDoc.

#define LIBXML_NAMESPACE_DICT

xmlBufferAllocationScheme: A buffer allocation scheme can be defined to either match exactly the need or double it's allocated size each time it is found too small.

double each time one need to grow

grow only to the minimal size

immutable buffer

special allocation scheme used for I/O

xmlBuffer: A buffer structure.

The buffer content UTF8

The buffer size used

The buffer size

The realloc method

in IO mode we may have a different base

XML_XML_NAMESPACE: This is the namespace for the special xml: prefix predefined in the XML Namespace specification.

XML_XML_ID: This is the name for the special xml:id attribute

The different element types carried by an XML tree. NOTE: This is synchronized with DOM Level1 values See http://www.w3.org/TR/REC-DOM-Level-1/ Actually this had diverged a bit, and now XML_DOCUMENT_TYPE_NODE should be deprecated to use an XML_DTD_NODE.

xmlNotation: A DTD Notation definition.

Notation name

Public identifier, if any

System identifier, if any

xmlAttributeType: A DTD Attribute type definition.

xmlAttributeDefault: A DTD Attribute default definition.

xmlEnumeration: List structure used when there is an enumeration in DTDs.

next one

Enumeration name

xmlAttribute: An Attribute declaration in a DTD.

application data

XML_ATTRIBUTE_DECL, must be second !

Attribute name

NULL

NULL

-> DTD

next sibling link

previous sibling link

the containing document

next in hash table

The attribute type

the default

or the default value

or the enumeration tree if any

the namespace prefix if any

Element holding the attribute

xmlElementContentType: Possible definitions of element content types.

xmlElementContentOccur: Possible definitions of element content occurrences.

xmlElementContent: An XML Element content as stored after parsing an element definition in a DTD.

PCDATA, ELEMENT, SEQ or OR

ONCE, OPT, MULT or PLUS

Element name

first child

second child

parent

Namespace prefix

xmlElementTypeVal: The different possibilities for an element content type.

xmlElement: An XML Element declaration from a DTD.

application data

XML_ELEMENT_DECL, must be second !

Element name

NULL

NULL

-> DTD

next sibling link

previous sibling link

the containing document

The type

the allowed element content

List of the declared attributes

the namespace prefix if any

the validating regexp

XML_LOCAL_NAMESPACE: A namespace declaration node.

xmlNs: An XML namespace. Note that prefix == NULL is valid, it defines the default namespace within the subtree (until overridden). xmlNsType is unified with xmlElementType.

next Ns link for this node

global or local

URL for the namespace

prefix for the namespace

application data

normally an xmlDoc

xmlDtd: An XML DTD, as defined by <!DOCTYPE ... There is actually one for the internal subset and for the external subset.

application data

XML_DTD_NODE, must be second !

Name of the DTD

the value of the property link

last child link

child->parent link

next sibling link

previous sibling link

the containing document

End of common part

Hash table for notations if any

Hash table for elements if any

Hash table for attributes if any

Hash table for entities if any

External identifier for PUBLIC DTD

URI for a SYSTEM or PUBLIC DTD

Hash table for param entities if any

xmlAttr: An attribute on an XML node.

application data

XML_ATTRIBUTE_NODE, must be second !

the name of the property

the value of the property

NULL

child->parent link

next sibling link

previous sibling link

the containing document

pointer to the associated namespace

the attribute type if validating

for type/PSVI informations

xmlID: An XML ID instance.

next ID

The ID name

The attribute holding it

The attribute if attr is not available

The line number if attr is not available

The document holding the ID

xmlRef: An XML IDREF instance.

next Ref

The Ref name

The attribute holding it

The attribute if attr is not available

The line number if attr is not available

xmlNode: A node in an XML tree.

application data

type number, must be second !

the name of the node, or the entity

parent->childs link

last child link

child->parent link

next sibling link

previous sibling link

the containing document

End of common part

pointer to the associated namespace

the content

properties list

namespace definitions on this node

for type/PSVI informations

line number

extra data for XPath/XSLT

XML_GET_CONTENT: Macro to extract the content pointer of a node.

XML_GET_LINE: Macro to extract the line number of an element node.

xmlDocProperty Set of properties of the document as found by the parser Some of them are linked to similary named xmlParserOption

document is XML well formed

document is Namespace valid

parsed with old XML-1.0 parser

DTD validation was successful

XInclude substitution was done

Document was built using the API and not by parsing an instance

built for internal processing

parsed or built HTML document

xmlDoc: An XML document.

application data

XML_DOCUMENT_NODE, must be second !

name/filename/URI of the document

the document tree

last child link

child->parent link

next sibling link

previous sibling link

autoreference to itself

End of common part

level of zlib compression

standalone document (no external refs) 1 if standalone="yes" 0 if standalone="no" -1 if there is no XML declaration -2 if there is an XML declaration, but no standalone attribute was specified

the document internal subset

the document external subset

Global namespace, the old way

the XML version string

external initial encoding, if any

Hash table for ID attributes if any

Hash table for IDREFs attributes if any

The URI for that document

encoding of the in-memory content actually an xmlCharEncoding

dict used to allocate names or NULL

for type/PSVI informations

set of xmlParserOption used to parse the document

set of xmlDocProperties for this document set at the end of parsing

xmlDOMWrapAcquireNsFunction: @ctxt: a DOM wrapper context @node: the context node (element or attribute) @nsName: the requested namespace name @nsPrefix: the requested namespace prefix A function called to acquire namespaces (xmlNs) from the wrapper. Returns an xmlNsPtr or NULL in case of an error.

xmlDOMWrapCtxt: Context for DOM wrapper-operations.

The type of this context, just in case we need specialized contexts in the future.

Internal namespace map used for various operations.

Use this one to acquire an xmlNsPtr intended for node->ns. (Note that this is not intended for elem->nsDef).

xmlChildrenNode: Macro for compatibility naming layer with libxml1. Maps to "children."

xmlRootNode: Macro for compatibility naming layer with libxml1. Maps to "children".

Variables.

Some helper functions

Handling Buffers.

Creating/freeing new structures.

LIBXML_LEGACY_ENABLED

LIBXML_TREE_ENABLED

defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED)

Creating new nodes.

LIBXML_TREE_ENABLED

Navigating.

defined(LIBXML_TREE_ENABLED) || defined(LIBXML_DEBUG_ENABLED)

Changing the structure.

defined(LIBXML_TREE_ENABLED) || defined(LIBXML_WRITER_ENABLED)

LIBXML_TREE_ENABLED

defined(LIBXML_TREE_ENABLED) || defined(LIBXML_WRITER_ENABLED)

LIBXML_TREE_ENABLED || LIBXML_HTML_ENABLED || LIBXML_SCHEMAS_ENABLED

Namespaces.

defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XPATH_ENABLED)

Changing the content.

defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_HTML_ENABLED)

LIBXML_TREE_ENABLED

LIBXML_TREE_ENABLED

LIBXML_TREE_ENABLED

Removing content.

defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED)

Internal, don't use.

LIBXML_OUTPUT_ENABLED

Namespace handling.

Saving.

LIBXML_OUTPUT_ENABLED

XHTML

Compression.

DOM-wrapper helper functions.

5 interfaces from DOM ElementTraversal, but different in entities traversal.

__XML_TREE_H__

www.w3.org/XML/1998/namespace"

www.w3.org/TR/REC-DOM-Level-1/

C

s allocated size each time it is found too small. */ typedef enum { XML_BUFFER_ALLOC_DOUBLEIT, /* double each time one need to grow */ XML_BUFFER_ALLOC_EXACT, /* grow only to the minimal size */ XML_BUFFER_ALLOC_IMMUTABLE, /* immutable buffer */ XML_BUFFER_ALLOC_IO /* special allocation scheme used for I/O */ } xmlBufferAllocationScheme; /** * xmlBuffer: * * A buffer structure. */ typedef struct _xmlBuffer xmlBuffer; typedef xmlBuffer *xmlBufferPtr; struct _xmlBuffer { xmlChar *content; /* The buffer content UTF8 */ unsigned int use; /* The buffer size used */ unsigned int size; /* The buffer size */ xmlBufferAllocationScheme alloc; /* The realloc method */ xmlChar *contentIO; /* in IO mode we may have a different base */ }; /** * XML_XML_NAMESPACE: * * This is the namespace for the special xml: prefix predefined in the * XML Namespace specification. */ #define XML_XML_NAMESPACE \ (const xmlChar *) "http://www.w3.org/XML/1998/namespace" /** * XML_XML_ID: * * This is the name for the special xml:id attribute */ #define XML_XML_ID (const xmlChar *) "xml:id" /* * The different element types carried by an XML tree. * * NOTE: This is synchronized with DOM Level1 values * See http://www.w3.org/TR/REC-DOM-Level-1/ * * Actually this had diverged a bit, and now XML_DOCUMENT_TYPE_NODE should * be deprecated to use an XML_DTD_NODE. */ typedef enum { XML_ELEMENT_NODE= 1, XML_ATTRIBUTE_NODE= 2, XML_TEXT_NODE= 3, XML_CDATA_SECTION_NODE= 4, XML_ENTITY_REF_NODE= 5, XML_ENTITY_NODE= 6, XML_PI_NODE= 7, XML_COMMENT_NODE= 8, XML_DOCUMENT_NODE= 9, XML_DOCUMENT_TYPE_NODE= 10, XML_DOCUMENT_FRAG_NODE= 11, XML_NOTATION_NODE= 12, XML_HTML_DOCUMENT_NODE= 13, XML_DTD_NODE= 14, XML_ELEMENT_DECL= 15, XML_ATTRIBUTE_DECL= 16, XML_ENTITY_DECL= 17, XML_NAMESPACE_DECL= 18, XML_XINCLUDE_START= 19, XML_XINCLUDE_END= 20 #ifdef LIBXML_DOCB_ENABLED ,XML_DOCB_DOCUMENT_NODE= 21 #endif } xmlElementType; /** * xmlNotation: * * A DTD Notation definition. */ typedef struct _xmlNotation xmlNotation; typedef xmlNotation *xmlNotationPtr; struct _xmlNotation { const xmlChar *name; /* Notation name */ const xmlChar *PublicID; /* Public identifier, if any */ const xmlChar *SystemID; /* System identifier, if any */ }; /** * xmlAttributeType: * * A DTD Attribute type definition. */ typedef enum { XML_ATTRIBUTE_CDATA = 1, XML_ATTRIBUTE_ID, XML_ATTRIBUTE_IDREF , XML_ATTRIBUTE_IDREFS, XML_ATTRIBUTE_ENTITY, XML_ATTRIBUTE_ENTITIES, XML_ATTRIBUTE_NMTOKEN, XML_ATTRIBUTE_NMTOKENS, XML_ATTRIBUTE_ENUMERATION, XML_ATTRIBUTE_NOTATION } xmlAttributeType; /** * xmlAttributeDefault: * * A DTD Attribute default definition. */ typedef enum { XML_ATTRIBUTE_NONE = 1, XML_ATTRIBUTE_REQUIRED, XML_ATTRIBUTE_IMPLIED, XML_ATTRIBUTE_FIXED } xmlAttributeDefault; /** * xmlEnumeration: * * List structure used when there is an enumeration in DTDs. */ typedef struct _xmlEnumeration xmlEnumeration; typedef xmlEnumeration *xmlEnumerationPtr; struct _xmlEnumeration { struct _xmlEnumeration *next; /* next one */ const xmlChar *name; /* Enumeration name */ }; /** * xmlAttribute: * * An Attribute declaration in a DTD. */ typedef struct _xmlAttribute xmlAttribute; typedef xmlAttribute *xmlAttributePtr; struct _xmlAttribute { void *_private; /* application data */ xmlElementType type; /* XML_ATTRIBUTE_DECL, must be second ! */ const xmlChar *name; /* Attribute name */ struct _xmlNode *children; /* NULL */ struct _xmlNode *last; /* NULL */ struct _xmlDtd *parent; /* -> DTD */ struct _xmlNode *next; /* next sibling link */ struct _xmlNode *prev; /* previous sibling link */ struct _xmlDoc *doc; /* the containing document */ struct _xmlAttribute *nexth; /* next in hash table */ xmlAttributeType atype; /* The attribute type */ xmlAttributeDefault def; /* the default */ const xmlChar *defaultValue; /* or the default value */ xmlEnumerationPtr tree; /* or the enumeration tree if any */ const xmlChar *prefix; /* the namespace prefix if any */ const xmlChar *elem; /* Element holding the attribute */ }; /** * xmlElementContentType: * * Possible definitions of element content types. */ typedef enum { XML_ELEMENT_CONTENT_PCDATA = 1, XML_ELEMENT_CONTENT_ELEMENT, XML_ELEMENT_CONTENT_SEQ, XML_ELEMENT_CONTENT_OR } xmlElementContentType; /** * xmlElementContentOccur: * * Possible definitions of element content occurrences. */ typedef enum { XML_ELEMENT_CONTENT_ONCE = 1, XML_ELEMENT_CONTENT_OPT, XML_ELEMENT_CONTENT_MULT, XML_ELEMENT_CONTENT_PLUS } xmlElementContentOccur; /** * xmlElementContent: * * An XML Element content as stored after parsing an element definition * in a DTD. */ typedef struct _xmlElementContent xmlElementContent; typedef xmlElementContent *xmlElementContentPtr; struct _xmlElementContent { xmlElementContentType type; /* PCDATA, ELEMENT, SEQ or OR */ xmlElementContentOccur ocur; /* ONCE, OPT, MULT or PLUS */ const xmlChar *name; /* Element name */ struct _xmlElementContent *c1; /* first child */ struct _xmlElementContent *c2; /* second child */ struct _xmlElementContent *parent; /* parent */ const xmlChar *prefix; /* Namespace prefix */ }; /** * xmlElementTypeVal: * * The different possibilities for an element content type. */ typedef enum { XML_ELEMENT_TYPE_UNDEFINED = 0, XML_ELEMENT_TYPE_EMPTY = 1, XML_ELEMENT_TYPE_ANY, XML_ELEMENT_TYPE_MIXED, XML_ELEMENT_TYPE_ELEMENT } xmlElementTypeVal; #ifdef __cplusplus } #endif #include <libxml/xmlregexp.h> #ifdef __cplusplus extern "C" { #endif /** * xmlElement: * * An XML Element declaration from a DTD. */ typedef struct _xmlElement xmlElement; typedef xmlElement *xmlElementPtr; struct _xmlElement { void *_private; /* application data */ xmlElementType type; /* XML_ELEMENT_DECL, must be second ! */ const xmlChar *name; /* Element name */ struct _xmlNode *children; /* NULL */ struct _xmlNode *last; /* NULL */ struct _xmlDtd *parent; /* -> DTD */ struct _xmlNode *next; /* next sibling link */ struct _xmlNode *prev; /* previous sibling link */ struct _xmlDoc *doc; /* the containing document */ xmlElementTypeVal etype; /* The type */ xmlElementContentPtr content; /* the allowed element content */ xmlAttributePtr attributes; /* List of the declared attributes */ const xmlChar *prefix; /* the namespace prefix if any */ #ifdef LIBXML_REGEXP_ENABLED xmlRegexpPtr contModel; /* the validating regexp */ #else void *contModel; #endif }; /** * XML_LOCAL_NAMESPACE: * * A namespace declaration node. */ #define XML_LOCAL_NAMESPACE XML_NAMESPACE_DECL typedef xmlElementType xmlNsType; /** * xmlNs: * * An XML namespace. * Note that prefix == NULL is valid, it defines the default namespace * within the subtree (until overridden). * * xmlNsType is unified with xmlElementType. */ typedef struct _xmlNs xmlNs; typedef xmlNs *xmlNsPtr; struct _xmlNs { struct _xmlNs *next; /* next Ns link for this node */ xmlNsType type; /* global or local */ const xmlChar *href; /* URL for the namespace */ const xmlChar *prefix; /* prefix for the namespace */ void *_private; /* application data */ struct _xmlDoc *context; /* normally an xmlDoc */ }; /** * xmlDtd: * * An XML DTD, as defined by <!DOCTYPE ... There is actually one for * the internal subset and for the external subset. */ typedef struct _xmlDtd xmlDtd; typedef xmlDtd *xmlDtdPtr; struct _xmlDtd { void *_private; /* application data */ xmlElementType type; /* XML_DTD_NODE, must be second ! */ const xmlChar *name; /* Name of the DTD */ struct _xmlNode *children; /* the value of the property link */ struct _xmlNode *last; /* last child link */ struct _xmlDoc *parent; /* child->parent link */ struct _xmlNode *next; /* next sibling link */ struct _xmlNode *prev; /* previous sibling link */ struct _xmlDoc *doc; /* the containing document */ /* End of common part */ void *notations; /* Hash table for notations if any */ void *elements; /* Hash table for elements if any */ void *attributes; /* Hash table for attributes if any */ void *entities; /* Hash table for entities if any */ const xmlChar *ExternalID; /* External identifier for PUBLIC DTD */ const xmlChar *SystemID; /* URI for a SYSTEM or PUBLIC DTD */ void *pentities; /* Hash table for param entities if any */ }; /** * xmlAttr: * * An attribute on an XML node. */ typedef struct _xmlAttr xmlAttr; typedef xmlAttr *xmlAttrPtr; struct _xmlAttr { void *_private; /* application data */ xmlElementType type; /* XML_ATTRIBUTE_NODE, must be second ! */ const xmlChar *name; /* the name of the property */ struct _xmlNode *children; /* the value of the property */ struct _xmlNode *last; /* NULL */ struct _xmlNode *parent; /* child->parent link */ struct _xmlAttr *next; /* next sibling link */ struct _xmlAttr *prev; /* previous sibling link */ struct _xmlDoc *doc; /* the containing document */ xmlNs *ns; /* pointer to the associated namespace */ xmlAttributeType atype; /* the attribute type if validating */ void *psvi; /* for type/PSVI informations */ }; /** * xmlID: * * An XML ID instance. */ typedef struct _xmlID xmlID; typedef xmlID *xmlIDPtr; struct _xmlID { struct _xmlID *next; /* next ID */ const xmlChar *value; /* The ID name */ xmlAttrPtr attr; /* The attribute holding it */ const xmlChar *name; /* The attribute if attr is not available */ int lineno; /* The line number if attr is not available */ struct _xmlDoc *doc; /* The document holding the ID */ }; /** * xmlRef: * * An XML IDREF instance. */ typedef struct _xmlRef xmlRef; typedef xmlRef *xmlRefPtr; struct _xmlRef { struct _xmlRef *next; /* next Ref */ const xmlChar *value; /* The Ref name */ xmlAttrPtr attr; /* The attribute holding it */ const xmlChar *name; /* The attribute if attr is not available */ int lineno; /* The line number if attr is not available */ }; /** * xmlNode: * * A node in an XML tree. */ typedef struct _xmlNode xmlNode; typedef xmlNode *xmlNodePtr; struct _xmlNode { void *_private; /* application data */ xmlElementType type; /* type number, must be second ! */ const xmlChar *name; /* the name of the node, or the entity */ struct _xmlNode *children; /* parent->childs link */ struct _xmlNode *last; /* last child link */ struct _xmlNode *parent; /* child->parent link */ struct _xmlNode *next; /* next sibling link */ struct _xmlNode *prev; /* previous sibling link */ struct _xmlDoc *doc; /* the containing document */ /* End of common part */ xmlNs *ns; /* pointer to the associated namespace */ xmlChar *content; /* the content */ struct _xmlAttr *properties;/* properties list */ xmlNs *nsDef; /* namespace definitions on this node */ void *psvi; /* for type/PSVI informations */ unsigned short line; /* line number */ unsigned short extra; /* extra data for XPath/XSLT */ }; /** * XML_GET_CONTENT: * * Macro to extract the content pointer of a node. */ #define XML_GET_CONTENT(n) \ ((n)->type == XML_ELEMENT_NODE ? NULL : (n)->content) /** * XML_GET_LINE: * * Macro to extract the line number of an element node. */ #define XML_GET_LINE(n) \ (xmlGetLineNo(n)) /** * xmlDocProperty * * Set of properties of the document as found by the parser * Some of them are linked to similary named xmlParserOption */ typedef enum { XML_DOC_WELLFORMED = 1<<0, /* document is XML well formed */ XML_DOC_NSVALID = 1<<1, /* document is Namespace valid */ XML_DOC_OLD10 = 1<<2, /* parsed with old XML-1.0 parser */ XML_DOC_DTDVALID = 1<<3, /* DTD validation was successful */ XML_DOC_XINCLUDE = 1<<4, /* XInclude substitution was done */ XML_DOC_USERBUILT = 1<<5, /* Document was built using the API and not by parsing an instance */ XML_DOC_INTERNAL = 1<<6, /* built for internal processing */ XML_DOC_HTML = 1<<7 /* parsed or built HTML document */ } xmlDocProperties; /** * xmlDoc: * * An XML document. */ typedef struct _xmlDoc xmlDoc; typedef xmlDoc *xmlDocPtr; struct _xmlDoc { void *_private; /* application data */ xmlElementType type; /* XML_DOCUMENT_NODE, must be second ! */ char *name; /* name/filename/URI of the document */ struct _xmlNode *children; /* the document tree */ struct _xmlNode *last; /* last child link */ struct _xmlNode *parent; /* child->parent link */ struct _xmlNode *next; /* next sibling link */ struct _xmlNode *prev; /* previous sibling link */ struct _xmlDoc *doc; /* autoreference to itself */ /* End of common part */ int compression;/* level of zlib compression */ int standalone; /* standalone document (no external refs) 1 if standalone="yes" 0 if standalone="no" -1 if there is no XML declaration -2 if there is an XML declaration, but no standalone attribute was specified */ struct _xmlDtd *intSubset; /* the document internal subset */ struct _xmlDtd *extSubset; /* the document external subset */ struct _xmlNs *oldNs; /* Global namespace, the old way */ const xmlChar *version; /* the XML version string */ const xmlChar *encoding; /* external initial encoding, if any */ void *ids; /* Hash table for ID attributes if any */ void *refs; /* Hash table for IDREFs attributes if any */ const xmlChar *URL; /* The URI for that document */ int charset; /* encoding of the in-memory content actually an xmlCharEncoding */ struct _xmlDict *dict; /* dict used to allocate names or NULL */ void *psvi; /* for type/PSVI informations */ int parseFlags; /* set of xmlParserOption used to parse the document */ int properties; /* set of xmlDocProperties for this document set at the end of parsing */ }; typedef struct _xmlDOMWrapCtxt xmlDOMWrapCtxt; typedef xmlDOMWrapCtxt *xmlDOMWrapCtxtPtr; /** * xmlDOMWrapAcquireNsFunction: * @ctxt: a DOM wrapper context * @node: the context node (element or attribute) * @nsName: the requested namespace name * @nsPrefix: the requested namespace prefix * * A function called to acquire namespaces (xmlNs) from the wrapper. * * Returns an xmlNsPtr or NULL in case of an error. */ typedef xmlNsPtr (*xmlDOMWrapAcquireNsFunction) (xmlDOMWrapCtxtPtr ctxt, xmlNodePtr node, const xmlChar *nsName, const xmlChar *nsPrefix); /** * xmlDOMWrapCtxt: * * Context for DOM wrapper-operations. */ struct _xmlDOMWrapCtxt { void * _private; /* * The type of this context, just in case we need specialized * contexts in the future. */ int type; /* * Internal namespace map used for various operations. */ void * namespaceMap; /* * Use this one to acquire an xmlNsPtr intended for node->ns. * (Note that this is not intended for elem->nsDef). */ xmlDOMWrapAcquireNsFunction getNsForNodeFunc; }; /** * xmlChildrenNode: * * Macro for compatibility naming layer with libxml1. Maps * to "children." */ #ifndef xmlChildrenNode #define xmlChildrenNode children #endif /** * xmlRootNode: * * Macro for compatibility naming layer with libxml1. Maps * to "children". */ #ifndef xmlRootNode #define xmlRootNode children #endif /* * Variables. */ /* * Some helper functions */ #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XPATH_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_DEBUG_ENABLED) || defined (LIBXML_HTML_ENABLED) || defined(LIBXML_SAX1_ENABLED) || defined(LIBXML_HTML_ENABLED) || defined(LIBXML_WRITER_ENABLED) || defined(LIBXML_DOCB_ENABLED) XMLPUBFUN int XMLCALL xmlValidateNCName (const xmlChar *value, int space); #endif #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) XMLPUBFUN int XMLCALL xmlValidateQName (const xmlChar *value, int space); XMLPUBFUN int XMLCALL xmlValidateName (const xmlChar *value, int space); XMLPUBFUN int XMLCALL xmlValidateNMToken (const xmlChar *value, int space); #endif XMLPUBFUN xmlChar * XMLCALL xmlBuildQName (const xmlChar *ncname, const xmlChar *prefix, xmlChar *memory, int len); XMLPUBFUN xmlChar * XMLCALL xmlSplitQName2 (const xmlChar *name, xmlChar **prefix); XMLPUBFUN const xmlChar * XMLCALL xmlSplitQName3 (const xmlChar *name, int *len); /* * Handling Buffers. */ XMLPUBFUN void XMLCALL xmlSetBufferAllocationScheme(xmlBufferAllocationScheme scheme); XMLPUBFUN xmlBufferAllocationScheme XMLCALL xmlGetBufferAllocationScheme(void); XMLPUBFUN xmlBufferPtr XMLCALL xmlBufferCreate (void); XMLPUBFUN xmlBufferPtr XMLCALL xmlBufferCreateSize (size_t size); XMLPUBFUN xmlBufferPtr XMLCALL xmlBufferCreateStatic (void *mem, size_t size); XMLPUBFUN int XMLCALL xmlBufferResize (xmlBufferPtr buf, unsigned int size); XMLPUBFUN void XMLCALL xmlBufferFree (xmlBufferPtr buf); XMLPUBFUN int XMLCALL xmlBufferDump (FILE *file, xmlBufferPtr buf); XMLPUBFUN int XMLCALL xmlBufferAdd (xmlBufferPtr buf, const xmlChar *str, int len); XMLPUBFUN int XMLCALL xmlBufferAddHead (xmlBufferPtr buf, const xmlChar *str, int len); XMLPUBFUN int XMLCALL xmlBufferCat (xmlBufferPtr buf, const xmlChar *str); XMLPUBFUN int XMLCALL xmlBufferCCat (xmlBufferPtr buf, const char *str); XMLPUBFUN int XMLCALL xmlBufferShrink (xmlBufferPtr buf, unsigned int len); XMLPUBFUN int XMLCALL xmlBufferGrow (xmlBufferPtr buf, unsigned int len); XMLPUBFUN void XMLCALL xmlBufferEmpty (xmlBufferPtr buf); XMLPUBFUN const xmlChar* XMLCALL xmlBufferContent (const xmlBufferPtr buf); XMLPUBFUN void XMLCALL xmlBufferSetAllocationScheme(xmlBufferPtr buf, xmlBufferAllocationScheme scheme); XMLPUBFUN int XMLCALL xmlBufferLength (const xmlBufferPtr buf); /* * Creating/freeing new structures. */ XMLPUBFUN xmlDtdPtr XMLCALL xmlCreateIntSubset (xmlDocPtr doc, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID); XMLPUBFUN xmlDtdPtr XMLCALL xmlNewDtd (xmlDocPtr doc, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID); XMLPUBFUN xmlDtdPtr XMLCALL xmlGetIntSubset (xmlDocPtr doc); XMLPUBFUN void XMLCALL xmlFreeDtd (xmlDtdPtr cur); #ifdef LIBXML_LEGACY_ENABLED XMLPUBFUN xmlNsPtr XMLCALL xmlNewGlobalNs (xmlDocPtr doc, const xmlChar *href, const xmlChar *prefix); #endif /* LIBXML_LEGACY_ENABLED */ XMLPUBFUN xmlNsPtr XMLCALL xmlNewNs (xmlNodePtr node, const xmlChar *href, const xmlChar *prefix); XMLPUBFUN void XMLCALL xmlFreeNs (xmlNsPtr cur); XMLPUBFUN void XMLCALL xmlFreeNsList (xmlNsPtr cur); XMLPUBFUN xmlDocPtr XMLCALL xmlNewDoc (const xmlChar *version); XMLPUBFUN void XMLCALL xmlFreeDoc (xmlDocPtr cur); XMLPUBFUN xmlAttrPtr XMLCALL xmlNewDocProp (xmlDocPtr doc, const xmlChar *name, const xmlChar *value); #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_HTML_ENABLED) || \ defined(LIBXML_SCHEMAS_ENABLED) XMLPUBFUN xmlAttrPtr XMLCALL xmlNewProp (xmlNodePtr node, const xmlChar *name, const xmlChar *value); #endif XMLPUBFUN xmlAttrPtr XMLCALL xmlNewNsProp (xmlNodePtr node, xmlNsPtr ns, const xmlChar *name, const xmlChar *value); XMLPUBFUN xmlAttrPtr XMLCALL xmlNewNsPropEatName (xmlNodePtr node, xmlNsPtr ns, xmlChar *name, const xmlChar *value); XMLPUBFUN void XMLCALL xmlFreePropList (xmlAttrPtr cur); XMLPUBFUN void XMLCALL xmlFreeProp (xmlAttrPtr cur); XMLPUBFUN xmlAttrPtr XMLCALL xmlCopyProp (xmlNodePtr target, xmlAttrPtr cur); XMLPUBFUN xmlAttrPtr XMLCALL xmlCopyPropList (xmlNodePtr target, xmlAttrPtr cur); #ifdef LIBXML_TREE_ENABLED XMLPUBFUN xmlDtdPtr XMLCALL xmlCopyDtd (xmlDtdPtr dtd); #endif /* LIBXML_TREE_ENABLED */ #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) XMLPUBFUN xmlDocPtr XMLCALL xmlCopyDoc (xmlDocPtr doc, int recursive); #endif /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */ /* * Creating new nodes. */ XMLPUBFUN xmlNodePtr XMLCALL xmlNewDocNode (xmlDocPtr doc, xmlNsPtr ns, const xmlChar *name, const xmlChar *content); XMLPUBFUN xmlNodePtr XMLCALL xmlNewDocNodeEatName (xmlDocPtr doc, xmlNsPtr ns, xmlChar *name, const xmlChar *content); XMLPUBFUN xmlNodePtr XMLCALL xmlNewNode (xmlNsPtr ns, const xmlChar *name); XMLPUBFUN xmlNodePtr XMLCALL xmlNewNodeEatName (xmlNsPtr ns, xmlChar *name); #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) XMLPUBFUN xmlNodePtr XMLCALL xmlNewChild (xmlNodePtr parent, xmlNsPtr ns, const xmlChar *name, const xmlChar *content); #endif XMLPUBFUN xmlNodePtr XMLCALL xmlNewDocText (xmlDocPtr doc, const xmlChar *content); XMLPUBFUN xmlNodePtr XMLCALL xmlNewText (const xmlChar *content); XMLPUBFUN xmlNodePtr XMLCALL xmlNewDocPI (xmlDocPtr doc, const xmlChar *name, const xmlChar *content); XMLPUBFUN xmlNodePtr XMLCALL xmlNewPI (const xmlChar *name, const xmlChar *content); XMLPUBFUN xmlNodePtr XMLCALL xmlNewDocTextLen (xmlDocPtr doc, const xmlChar *content, int len); XMLPUBFUN xmlNodePtr XMLCALL xmlNewTextLen (const xmlChar *content, int len); XMLPUBFUN xmlNodePtr XMLCALL xmlNewDocComment (xmlDocPtr doc, const xmlChar *content); XMLPUBFUN xmlNodePtr XMLCALL xmlNewComment (const xmlChar *content); XMLPUBFUN xmlNodePtr XMLCALL xmlNewCDataBlock (xmlDocPtr doc, const xmlChar *content, int len); XMLPUBFUN xmlNodePtr XMLCALL xmlNewCharRef (xmlDocPtr doc, const xmlChar *name); XMLPUBFUN xmlNodePtr XMLCALL xmlNewReference (xmlDocPtr doc, const xmlChar *name); XMLPUBFUN xmlNodePtr XMLCALL xmlCopyNode (const xmlNodePtr node, int recursive); XMLPUBFUN xmlNodePtr XMLCALL xmlDocCopyNode (const xmlNodePtr node, xmlDocPtr doc, int recursive); XMLPUBFUN xmlNodePtr XMLCALL xmlDocCopyNodeList (xmlDocPtr doc, const xmlNodePtr node); XMLPUBFUN xmlNodePtr XMLCALL xmlCopyNodeList (const xmlNodePtr node); #ifdef LIBXML_TREE_ENABLED XMLPUBFUN xmlNodePtr XMLCALL xmlNewTextChild (xmlNodePtr parent, xmlNsPtr ns, const xmlChar *name, const xmlChar *content); XMLPUBFUN xmlNodePtr XMLCALL xmlNewDocRawNode (xmlDocPtr doc, xmlNsPtr ns, const xmlChar *name, const xmlChar *content); XMLPUBFUN xmlNodePtr XMLCALL xmlNewDocFragment (xmlDocPtr doc); #endif /* LIBXML_TREE_ENABLED */ /* * Navigating. */ XMLPUBFUN long XMLCALL xmlGetLineNo (xmlNodePtr node); #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_DEBUG_ENABLED) XMLPUBFUN xmlChar * XMLCALL xmlGetNodePath (xmlNodePtr node); #endif /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_DEBUG_ENABLED) */ XMLPUBFUN xmlNodePtr XMLCALL xmlDocGetRootElement (xmlDocPtr doc); XMLPUBFUN xmlNodePtr XMLCALL xmlGetLastChild (xmlNodePtr parent); XMLPUBFUN int XMLCALL xmlNodeIsText (xmlNodePtr node); XMLPUBFUN int XMLCALL xmlIsBlankNode (xmlNodePtr node); /* * Changing the structure. */ #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_WRITER_ENABLED) XMLPUBFUN xmlNodePtr XMLCALL xmlDocSetRootElement (xmlDocPtr doc, xmlNodePtr root); #endif /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_WRITER_ENABLED) */ #ifdef LIBXML_TREE_ENABLED XMLPUBFUN void XMLCALL xmlNodeSetName (xmlNodePtr cur, const xmlChar *name); #endif /* LIBXML_TREE_ENABLED */ XMLPUBFUN xmlNodePtr XMLCALL xmlAddChild (xmlNodePtr parent, xmlNodePtr cur); XMLPUBFUN xmlNodePtr XMLCALL xmlAddChildList (xmlNodePtr parent, xmlNodePtr cur); #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_WRITER_ENABLED) XMLPUBFUN xmlNodePtr XMLCALL xmlReplaceNode (xmlNodePtr old, xmlNodePtr cur); #endif /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_WRITER_ENABLED) */ #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_HTML_ENABLED) || \ defined(LIBXML_SCHEMAS_ENABLED) XMLPUBFUN xmlNodePtr XMLCALL xmlAddPrevSibling (xmlNodePtr cur, xmlNodePtr elem); #endif /* LIBXML_TREE_ENABLED || LIBXML_HTML_ENABLED || LIBXML_SCHEMAS_ENABLED */ XMLPUBFUN xmlNodePtr XMLCALL xmlAddSibling (xmlNodePtr cur, xmlNodePtr elem); XMLPUBFUN xmlNodePtr XMLCALL xmlAddNextSibling (xmlNodePtr cur, xmlNodePtr elem); XMLPUBFUN void XMLCALL xmlUnlinkNode (xmlNodePtr cur); XMLPUBFUN xmlNodePtr XMLCALL xmlTextMerge (xmlNodePtr first, xmlNodePtr second); XMLPUBFUN int XMLCALL xmlTextConcat (xmlNodePtr node, const xmlChar *content, int len); XMLPUBFUN void XMLCALL xmlFreeNodeList (xmlNodePtr cur); XMLPUBFUN void XMLCALL xmlFreeNode (xmlNodePtr cur); XMLPUBFUN void XMLCALL xmlSetTreeDoc (xmlNodePtr tree, xmlDocPtr doc); XMLPUBFUN void XMLCALL xmlSetListDoc (xmlNodePtr list, xmlDocPtr doc); /* * Namespaces. */ XMLPUBFUN xmlNsPtr XMLCALL xmlSearchNs (xmlDocPtr doc, xmlNodePtr node, const xmlChar *nameSpace); XMLPUBFUN xmlNsPtr XMLCALL xmlSearchNsByHref (xmlDocPtr doc, xmlNodePtr node, const xmlChar *href); #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XPATH_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) XMLPUBFUN xmlNsPtr * XMLCALL xmlGetNsList (xmlDocPtr doc, xmlNodePtr node); #endif /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XPATH_ENABLED) */ XMLPUBFUN void XMLCALL xmlSetNs (xmlNodePtr node, xmlNsPtr ns); XMLPUBFUN xmlNsPtr XMLCALL xmlCopyNamespace (xmlNsPtr cur); XMLPUBFUN xmlNsPtr XMLCALL xmlCopyNamespaceList (xmlNsPtr cur); /* * Changing the content. */ #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_HTML_ENABLED) XMLPUBFUN xmlAttrPtr XMLCALL xmlSetProp (xmlNodePtr node, const xmlChar *name, const xmlChar *value); XMLPUBFUN xmlAttrPtr XMLCALL xmlSetNsProp (xmlNodePtr node, xmlNsPtr ns, const xmlChar *name, const xmlChar *value); #endif /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) || defined(LIBXML_HTML_ENABLED) */ XMLPUBFUN xmlChar * XMLCALL xmlGetNoNsProp (xmlNodePtr node, const xmlChar *name); XMLPUBFUN xmlChar * XMLCALL xmlGetProp (xmlNodePtr node, const xmlChar *name); XMLPUBFUN xmlAttrPtr XMLCALL xmlHasProp (xmlNodePtr node, const xmlChar *name); XMLPUBFUN xmlAttrPtr XMLCALL xmlHasNsProp (xmlNodePtr node, const xmlChar *name, const xmlChar *nameSpace); XMLPUBFUN xmlChar * XMLCALL xmlGetNsProp (xmlNodePtr node, const xmlChar *name, const xmlChar *nameSpace); XMLPUBFUN xmlNodePtr XMLCALL xmlStringGetNodeList (xmlDocPtr doc, const xmlChar *value); XMLPUBFUN xmlNodePtr XMLCALL xmlStringLenGetNodeList (xmlDocPtr doc, const xmlChar *value, int len); XMLPUBFUN xmlChar * XMLCALL xmlNodeListGetString (xmlDocPtr doc, xmlNodePtr list, int inLine); #ifdef LIBXML_TREE_ENABLED XMLPUBFUN xmlChar * XMLCALL xmlNodeListGetRawString (xmlDocPtr doc, xmlNodePtr list, int inLine); #endif /* LIBXML_TREE_ENABLED */ XMLPUBFUN void XMLCALL xmlNodeSetContent (xmlNodePtr cur, const xmlChar *content); #ifdef LIBXML_TREE_ENABLED XMLPUBFUN void XMLCALL xmlNodeSetContentLen (xmlNodePtr cur, const xmlChar *content, int len); #endif /* LIBXML_TREE_ENABLED */ XMLPUBFUN void XMLCALL xmlNodeAddContent (xmlNodePtr cur, const xmlChar *content); XMLPUBFUN void XMLCALL xmlNodeAddContentLen (xmlNodePtr cur, const xmlChar *content, int len); XMLPUBFUN xmlChar * XMLCALL xmlNodeGetContent (xmlNodePtr cur); XMLPUBFUN int XMLCALL xmlNodeBufGetContent (xmlBufferPtr buffer, xmlNodePtr cur); XMLPUBFUN xmlChar * XMLCALL xmlNodeGetLang (xmlNodePtr cur); XMLPUBFUN int XMLCALL xmlNodeGetSpacePreserve (xmlNodePtr cur); #ifdef LIBXML_TREE_ENABLED XMLPUBFUN void XMLCALL xmlNodeSetLang (xmlNodePtr cur, const xmlChar *lang); XMLPUBFUN void XMLCALL xmlNodeSetSpacePreserve (xmlNodePtr cur, int val); #endif /* LIBXML_TREE_ENABLED */ XMLPUBFUN xmlChar * XMLCALL xmlNodeGetBase (xmlDocPtr doc, xmlNodePtr cur); #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_XINCLUDE_ENABLED) XMLPUBFUN void XMLCALL xmlNodeSetBase (xmlNodePtr cur, const xmlChar *uri); #endif /* * Removing content. */ XMLPUBFUN int XMLCALL xmlRemoveProp (xmlAttrPtr cur); #if defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) XMLPUBFUN int XMLCALL xmlUnsetNsProp (xmlNodePtr node, xmlNsPtr ns, const xmlChar *name); XMLPUBFUN int XMLCALL xmlUnsetProp (xmlNodePtr node, const xmlChar *name); #endif /* defined(LIBXML_TREE_ENABLED) || defined(LIBXML_SCHEMAS_ENABLED) */ /* * Internal, don

