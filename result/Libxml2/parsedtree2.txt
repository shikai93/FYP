section: Tree synopsis: Creates a tree purpose: Shows how to create document, nodes and dump it to stdout or file. usage: tree2 <filename> -Default output: stdout test: tree2 > tree2.tmp ; diff tree2.tmp tree2.res ; rm tree2.tmp author: Lucas Brasilino <brasilino@recife.pe.gov.br> copy: see Copyright for the status of this software

To compile this file using gcc you can type gcc `xml2-config --cflags --libs` -o tree2 tree2.c

A simple example how to create DOM. Libxml2 automagically allocates the necessary amount of memory to it.

document pointer

node pointers

DTD pointer

Creates a new document, a node and set it as a root node

Creates a DTD declaration. Isn't mandatory.

xmlNewChild() creates a new node, which is "attached" as child node of root_node node.

The same as above, but the new child node doesn't have a content

xmlNewProp() creates attributes, which is "attached" to an node. It returns xmlAttrPtr, which isn't used here.

Here goes another way to create nodes. xmlNewNode() and xmlNewText creates a node and a text node separately. They are "attached" by xmlAddChild()

A simple loop that "automates" nodes creation

Dumping document to stdio or file

ree the document

Free the global variables that may have been allocated by the parser.

this is to debug memory for regression tests

1.0

root

t mandatory. */ dtd = xmlCreateIntSubset(doc, BAD_CAST "root", NULL, BAD_CAST "tree2.dtd"); /* * xmlNewChild() creates a new node, which is "attached" as child node * of root_node node. */ xmlNewChild(root_node, NULL, BAD_CAST "node1", BAD_CAST "content of node 1"); /* * The same as above, but the new child node doesn

node2

attached

node3

this node has attributes

attribute

yes

foo

bar

attached

node4

other way to create content (which is also a node)

automates

node%d

node%d%d

odd

no

yes

-

UTF-8

tree support not compiled in\n

