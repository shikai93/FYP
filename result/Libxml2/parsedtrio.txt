$Id$ Copyright (C) 1998 Bjorn Reese and Daniel Stenberg. Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE AUTHORS AND CONTRIBUTORS ACCEPT NO RESPONSIBILITY IN ANY CONCEIVABLE MANNER. A note to trio contributors: Avoid heap allocation at all costs to ensure that the trio functions are async-safe. The exceptions are the printf/fprintf functions, which uses fputc, and the asprintf functions and the <alloc> modifier, which by design are required to allocate form the heap.

TODO: - Scan is probably too permissive about its modifiers. - C escapes in %#[] ? - Multibyte characters (done for format parsing, except scan groups) - Complex numbers? (C99 _Complex) - Boolean values? (C99 _Bool) - C99 NaN(n-char-sequence) missing. The n-char-sequence can be used to print the mantissa, e.g. NaN(0xc000000000000000) - Should we support the GNU %a alloc modifier? GNU has an ugly hack for %a, because C99 used %a for other purposes. If specified as %as or %a[ it is interpreted as the alloc modifier, otherwise as the C99 hex-float. This means that you cannot scan %as as a hex-float immediately followed by an 's'. - Scanning of collating symbols.

Trio include files

Definitions

Generic definitions

mincore() can be used for debugging purposes

Encode the error code and the position. This is decoded with TRIO_ERROR_CODE and TRIO_ERROR_POSITION.

Platform specific definitions

TRIO_PLATFORM_UNIX

TRIO_PLATFORM_WIN32

Compiler dependent definitions

Support for long long

The extra long numbers

Maximal and fixed integer types

Internal Definitions

Long double sizes

The maximal number of digits is for base 2

The width of a pointer. The number of bits in a hex digit is 4

Infinite and Not-A-Number for floating-point

Various constants

Flags. FLAGS_LAST must be less than ULONG_MAX

Reused flags

Compounded flags

Do not change these

Maximal number of allowed parameters

Maximal number of characters in class

Maximal string lengths for user-defined specifiers

Maximal length of locale separator strings

Maximal number of integers in grouping

Initial size of asprintf buffer

Fundamental formatting parameter types

Character constants

Character class expressions

SPECIFIERS: a Hex-float A Hex-float c Character C Widechar character (wint_t) d Decimal e Float E Float F Float F Float g Float G Float i Integer m Error message n Count o Octal p Pointer s String S Widechar string (wchar_t ) u Unsigned x Hex X Hex [] Group <> User-defined Reserved: D Binary Coded Decimal %D(length,precision) (OS/390)

QUALIFIERS: Numbers = d,i,o,u,x,X Float = a,A,e,E,f,F,g,G String = s Char = c 9$ Position Use the 9th parameter. 9 can be any number between 1 and the maximal argument 9 Width Set width to 9. 9 can be any number, but must not be postfixed by '$' h Short Numbers: (unsigned) short int hh Short short Numbers: (unsigned) char l Long Numbers: (unsigned) long int String: as the S specifier Char: as the C specifier ll Long Long Numbers: (unsigned) long long int L Long Double Float long double # Alternative Float: Decimal-point is always present String: non-printable characters are handled as \number Spacing + Sign - Alignment . Precision Parameter print: use parameter scan: no parameter (ignore) q Quad Z size_t w Widechar ' Thousands/quote Numbers: Integer part grouped in thousands Binary numbers: Number grouped in nibbles (4 bits) String: Quoted string j intmax_t t prtdiff_t z size_t ! Sticky @ Parameter (for both print and scan) I n-bit Integer Numbers: The following options exists I8 = 8-bit integer I16 = 16-bit integer I32 = 32-bit integer I64 = 64-bit integer

For scanlists

This should remain undocumented

Experimental

For scanlists

For scanlists

Internal Structures

Parameters

An indication of which entry in the data union is used

The flags

The width qualifier

The precision qualifier

The base qualifier

The size for the variable size qualifier

The marker of the end of the specifier

The data from the argument list

For the user-defined specifier

Container for customized functions

General trio "class"

The function to write characters to a stream.

The function to read characters from a stream.

The current location in the stream.

The character currently being processed.

The number of characters that would have been written/read if there had been sufficient space.

The number of characters that are actually written/read. Processed and committed will only differ for the nprintf and nscanf functions.

The upper limit of characters that may be written/read.

The last output error that was detected.

References (for user-defined callbacks)

Registered entries (for user-defined callbacks)

Internal Variables

Need this to workaround a parser bug in HP C/iX compiler that fails to resolves macro definitions that includes type 'long double', e.g: va_arg(arg_ptr, long double)

UNIX98 says "in a locale where the radix character is not defined, the radix character defaults to a period (.)"

Internal Functions

defined(TRIO_MINIMAL)

TrioIsQualifier Description: Remember to add all new qualifiers to this function. QUALIFIER_POSITION must not be added.

QUALIFIER_POSITION is not included

TrioSetLocale

defined(USE_LOCALE)

Disable grouping

while

Repeat last group

Error in locale

while

Disable grouping

while

TrioGetPosition Get the %n$ position.

number is decreased by 1, because n$ starts from 1, whereas the array it is indexing starts from 0.

TrioFindNamespace Find registered user-defined specifier. The prev argument is used for optimization only.

Case-sensitive string comparison

TrioPower Description: Calculate pow(base, exponent), where number and exponent are integers.

Speed up calculation of common cases

TrioLogarithm

xlC crashes on log(0)

TrioLogarithmBase

TrioParse Description: Parse the format string

Count the number of times a parameter is referenced

Parameter counters

Utility variables

Index into formatting string

Count number of dots in modifier part

Does the specifier have a positional?

Are there any sticky modifiers at all?

indices specifies the order in which the parameters must be read from the va_args (this is necessary to handle positionals)

Various variables

One and only one of arglist and argarray must be used

The 'parameters' array is not initialized, but we need to know which entries we have used.

Multibyte characters cannot be legal specifiers or modifiers, so we skip over them.

while

TRIO_COMPILER_SUPPORTS_MULTIBYTE

while

We have no positional, get the next counter

Bail out completely to make the error more obvious

Default values

Precision

Skip if no precision

After the first dot we have the precision

Base

After the second dot we have the base

QUALIFIER_DOT

FALLTHROUGH

This has different meanings for print and scan

Read with from parameter

Scan, but do not store result

QUALIFIER_STAR

FALLTHROUGH

&format[index - 1] is used to "rewind" the read character from format

Modify flags for later truncation of number

Bail out completely to make the error more obvious

while qualifier

Parameters only need the type and value. The value is read later.

FALLTHROUGH

FALLTHROUGH

Skip nested brackets

Disable base modifier

FALLTHROUGH

FALLTHROUGH

FALLTHROUGH

FALLTHROUGH

FALLTHROUGH

FALLTHROUGH

We must get the handle first

Adjust parameters for insertion of new one

Copy the user data

while

Copy the namespace for later looking-up

defined(SPECIFIER_USER_DEFINED_BEGIN)

Bail out completely to make the error more obvious

Count the number of times this entry has been used

Find last sticky parameters

Do not overwrite current qualifiers

if identifier

while format characters left

gap detected

double references detected

FORMAT_PARAMETERS are only present if they must be read, so it makes no sense to check the ignore flag (besides, the flags variable is not set for that particular type)

for all arguments

The stack arguments are read according to ANSI C89 default argument promotions: char = int short = int unsigned char = unsigned int unsigned short = unsigned int float = double In addition to the ANSI C89 these types are read (the default argument promotions of C99 has not been considered yet) long long long double size_t ptrdiff_t intmax_t

Variable sizes are mapped onto the fixed sizes, in accordance with integer promotion. Please note that this may not be portable, as we only guess the size, not the layout of the numbers. For example, if int is little-endian, and long is big-endian, then this will fail.

Used for the I<bits> modifiers

defined(QUALIFIER_VARSIZE)

The parameter for the user-defined specifier is a pointer, whereas the rest (width, precision, base) uses an integer.

for all specifiers

FORMATTING

TrioWriteNumber Description: Output a number. The complexity of this function is a result of the complexity of the dependencies of the flags.

Build number

We are building the number from the least significant to the most significant digit, so we have to copy the thousand separator backwards

Adjust width

Adjust precision

Calculate padding

Adjust width further

Output prefixes spaces if needed

width has been adjusted for signs and alternatives

Prefix is not written when the value is zero

switch base

Output prefixed zero padding if needed

Output the number itself

Output trailing spaces if needed

TrioWriteStringCharacter Description: Output a single character of a string

Non-printable characters are converted to C escapes or \number, if no C escape exists.

TrioWriteString Description: Output a string

Disable quoting for the null pointer

The ctype parameters must be an unsigned char (or EOF)

TrioWriteWideStringCharacter Description: Output a wide string as a multi-byte sequence

The ctype parameters must be an unsigned char (or EOF)

TRIO_WIDECHAR

TrioWriteWideString Description: Output a wide character string as a multi-byte string

while

TRIO_WIDECHAR

TrioWriteDouble http://wwwold.dkuug.dk/JTC1/SC22/WG14/www/docs/dr_211.htm "5.2.4.2.2 paragraph #4 The accuracy [...] is implementation defined, as is the accuracy of the conversion between floating-point internal representations and string representations performed by the libray routine in <stdio.h>"

FIXME: handle all instances of constant long-double number (L) and l() math functions.

Determine sign and look for special quantities

Negative infinity

Positive infinity

Finitude

Normal numbers

Use scientific notation

Use normal notation. If the integer part of the number is zero, then adjust the precision to include leading fractional zeros.

Scale the number

Undo setting

log16(2)

No thousand separators

Truncated number. Precision is number of significant digits for FLOAT_G and number of fractional digits for others.

Adjust if number was rounded up one digit (ie. 0.99 to 1.00)

log16(2)

Adjust if number was rounded up one digit (ie. 99 to 100)

Estimate accuracy

Disable decimal-point

Calculate expected width. sign + integer part + thousands separators + decimal point + fraction + exponent

Output prefixing

Leading zeros must be after sign

Leading spaces must be before sign

Output the integer part and thousand separators

Beyond accuracy

Insert decimal point and build the fraction part

Beyond accuracy

Not trailing zeroes after all

Output exponent

The exponent must contain at least two digits

Output trailing spaces

TrioFormatProcess Description: This is the main engine for formatting output

Only valid multibyte characters are handled here. Invalid multibyte characters (charlen == -1) are handled as normal characters.

while characters left in formatting string

TRIO_COMPILER_SUPPORTS_MULTIBYTE

Skip the parameter entries

Find width

Get width from parameter list

A negative width is the same as the - flag and a positive width.

Find precision

Get precision from parameter list

A negative precision is the same as no precision

Find base

Get base from parameter list

FORMAT_CHAR

FORMAT_INT

FORMAT_DOUBLE

FORMAT_STRING

FORMAT_POINTER

C99 paragraph 7.19.6.1.8 says "the number of characters written to the output stream so far by this call", which is data->committed

FORMAT_COUNT

FORMAT_PARAMETER

FORMAT_ERRNO

defined(FORMAT_ERRNO)

Use handle

Look up namespace

defined(FORMAT_USER_DEFINED)

switch parameter type

Prepare for next

not identifier

TrioFormatRef

TrioFormat

TrioOutStreamFile

TrioOutStreamFileDescriptor

TrioOutStreamCustom

TrioOutStreamString

TrioOutStreamStringMax

TrioOutStreamStringDynamic

The processed variable must always be increased

Formatted printing functions

@addtogroup Printf @{

printf

Print to standard output stream. @param format Formatting string. @param ... Arguments. @return Number of printed characters.

Print to standard output stream. @param format Formatting string. @param args Arguments. @return Number of printed characters.

Print to standard output stream. @param format Formatting string. @param args Arguments. @return Number of printed characters.

fprintf

Print to file. @param file File pointer. @param format Formatting string. @param ... Arguments. @return Number of printed characters.

Print to file. @param file File pointer. @param format Formatting string. @param args Arguments. @return Number of printed characters.

Print to file. @param file File pointer. @param format Formatting string. @param args Arguments. @return Number of printed characters.

dprintf

Print to file descriptor. @param fd File descriptor. @param format Formatting string. @param ... Arguments. @return Number of printed characters.

Print to file descriptor. @param fd File descriptor. @param format Formatting string. @param args Arguments. @return Number of printed characters.

Print to file descriptor. @param fd File descriptor. @param format Formatting string. @param args Arguments. @return Number of printed characters.

cprintf

sprintf

Print to string. @param buffer Output string. @param format Formatting string. @param ... Arguments. @return Number of printed characters.

Terminate with NIL character

Print to string. @param buffer Output string. @param format Formatting string. @param args Arguments. @return Number of printed characters.

Print to string. @param buffer Output string. @param format Formatting string. @param args Arguments. @return Number of printed characters.

snprintf

Print at most @p max characters to string. @param buffer Output string. @param max Maximum number of characters to print. @param format Formatting string. @param ... Arguments. @return Number of printed characters.

Print at most @p max characters to string. @param buffer Output string. @param max Maximum number of characters to print. @param format Formatting string. @param args Arguments. @return Number of printed characters.

Print at most @p max characters to string. @param buffer Output string. @param max Maximum number of characters to print. @param format Formatting string. @param args Arguments. @return Number of printed characters.

snprintfcat Appends the new string to the buffer string overwriting the '\0' character at the end of buffer.

trio_aprintf

Deprecated

Deprecated

@} End of Printf documentation module

CALLBACK

@addtogroup UserDefined @{

trio_register

Register new user-defined specifier. @param callback @param name @return Handle.

Handle built-in namespaces

Bail out if namespace is too long

Bail out if namespace already is registered

Link into internal list

Initialize

Unregister an existing user-defined specifier. @param handle

trio_get_format [public]

trio_get_argument [public]

trio_get_width / trio_set_width [public]

trio_get_precision / trio_set_precision [public]

trio_get_base / trio_set_base [public]

trio_get_long / trio_set_long [public]

trio_get_longlong / trio_set_longlong [public]

trio_get_longdouble / trio_set_longdouble [public]

trio_get_short / trio_set_short [public]

trio_get_shortshort / trio_set_shortshort [public]

trio_get_alternative / trio_set_alternative [public]

trio_get_alignment / trio_set_alignment [public]

trio_get_spacing /trio_set_spacing [public]

trio_get_sign / trio_set_sign [public]

trio_get_padding / trio_set_padding [public]

trio_get_quote / trio_set_quote [public]

trio_get_upper / trio_set_upper [public]

trio_get_largest / trio_set_largest [public]

trio_get_ptrdiff / trio_set_ptrdiff [public]

trio_get_size / trio_set_size [public]

trio_print_int [public]

trio_print_uint [public]

trio_print_double [public]

trio_print_string [public]

trio_print_ref [public]

trio_vprint_ref [public]

trio_printv_ref [public]

TRIO_EXTENSION

trio_print_pointer [public]

The subtraction of the null pointer is a workaround to avoid a compiler warning. The performance overhead is negligible (and likely to be removed by an optimizing compiler). The (char ) casting is done to please ANSI C++.

Shrink to size of pointer

@} End of UserDefined documentation module

LOCALES

trio_locale_set_decimal_point Decimal point can only be one character. The input argument is a string to enable multibyte characters. At most MB_LEN_MAX characters will be used.

trio_locale_set_thousand_separator See trio_locale_set_decimal_point

trio_locale_set_grouping Array of bytes. Reversed order. CHAR_MAX : No further grouping 0 : Repeat last group for the remaining digits (not necessary as C strings are zero-terminated) n : Set current group to n Same order as the grouping attribute in LC_NUMERIC.

SCANNING

TrioSkipWhitespaces

TrioGetCollation

This is computationally expensive

TrioGetCharacterClass FIXME: multibyte

If the ungroup character is at the beginning of the scanlist, it will be part of the class, and a second ungroup character must follow to end the group.

Minus is used to specify ranges. To include minus in the class, it must be at the beginning of the list

Collect characters

Scanlist ranges

Both C99 and UNIX98 describes ranges as implementation- defined. We support the following behaviour (although this may change as we become wiser) - only increasing ranges, ie. [a-b] but not [b-a] - transitive ranges, ie. [a-b-c] == [a-c] - trailing minus, ie. [a-] is interpreted as an 'a' and a '-' - duplicates (although we can easily convert these into errors)

Trailing minus is included

for

Collating symbol

FIXME: This will be easier to implement when multibyte characters have been implemented. Until now, we ignore this feature.

Error in syntax

for

Equivalence class expressions

Lazy evaluation of collation array

Error in syntax

for

Mark any equivalent character

Character class expressions

TRIO_EXTENSION

TrioReadNumber We implement our own number conversion in preference of strtol and strtoul, because we must handle 'long long' and thousand separators.

Lazy evaluation of digits array

Leading sign

Abort if digit is not allowed in the specified base

Compare with thousands separator

Mismatch

Match

we need at least one digit

Was anything read at all?

TrioReadChar

Read octal number

Read hexadecimal number

TrioReadString

Continue until end of string is reached, a whitespace is encountered, or width is exceeded

for

TrioReadWideChar

Collect a multibyte character, by enlarging buffer until it contains a fully legal multibyte character, or the buffer is full.

TRIO_WIDECHAR

TrioReadWideString

Continue until end of string is reached, a whitespace is encountered, or width is exceeded

for

TRIO_WIDECHAR

TrioReadGroup FIXME: characterclass does not work with multibyte characters

TrioReadDouble FIXME: add long double handle base

Read entire double number from stream. trio_to_double requires a string as input, but InStream can be anything, so we have to collect all characters.

Not-a-number

FALLTHROUGH

Infinity

Case insensitive string comparison

NaN must not have a preceeding + nor -

Integer part

Compare with thousands separator

Mismatch

Match

while

Decimal part

Exponent

TrioReadPointer

The strange assignment of number is a workaround for a compiler warning

TrioScanProcess

Index of format string

Index of current parameter

Compare multibyte characters in format string

while characters left in formatting string

TRIO_COMPILER_SUPPORTS_MULTIBYTE

Two % in format matches one % in input stream

while format chars left

Skip the parameter entries

Find width

Get width from parameter list

Find base

Get base from parameter list

FORMAT_INT

FORMAT_STRING

FORMAT_DOUBLE

Skip over modifiers

Skip over group specifier

FORMAT_GROUP

a character is read, but is not consumed yet

FORMAT_COUNT

FORMAT_CHAR

FORMAT_POINTER

FORMAT_PARAMETER

Not an % identifier

Whitespaces may match any amount of whitespaces

TrioScan

TrioInStreamFile

TrioInStreamFileDescriptor

TrioInStreamCustom

TrioInStreamString

Formatted scanning functions

@addtogroup Scanf @{

scanf

Scan characters from standard input stream. @param format Formatting string. @param ... Arguments. @return Number of scanned characters.

fscanf

dscanf

cscanf

sscanf

@} End of Scanf documentation module

trio_strerror

Textual versions of the error codes

wwwold.dkuug.dk/JTC1/SC22/WG14/www/docs/dr_211.htm



s

triodef.h

trio.h

triop.h

trionan.h

triostr.h

0x

inf

INF

infinite

INFINITE

nan

NAN

%

\\

\"



[:alnum:]

[:alpha:]

[:blank:]

[:cntrl:]

[:digit:]

[:graph:]

[:lower:]

[:print:]

[:punct:]

[:space:]

[:upper:]

[:xdigit:]

c

s

d

i

u

o

x

X

e

E

f

F

g

G

p

[

]

n

C

S

a

A

m

b

B

<

>

:

$

Thousands/quote * Numbers: * Integer part grouped in thousands * Binary numbers: * Number grouped in nibbles (4 bits) * String: * Quoted string * * j intmax_t * t prtdiff_t * z size_t * * ! Sticky * @ Parameter (for both print and scan) * * I n-bit Integer * Numbers: * The following options exists * I8 = 8-bit integer * I16 = 16-bit integer * I32 = 32-bit integer * I64 = 64-bit integer */ #define QUALIFIER_POSITION

#define QUALIFIER_SHORT

#define QUALIFIER_LONG

#define QUALIFIER_LONG_UPPER

#define QUALIFIER_ALTERNATIVE

#define QUALIFIER_SPACE

#define QUALIFIER_PLUS

#define QUALIFIER_MINUS

#define QUALIFIER_DOT

#define QUALIFIER_STAR

#define QUALIFIER_CIRCUMFLEX

/* For scanlists */ #if TRIO_C99 # define QUALIFIER_SIZE_T

# define QUALIFIER_PTRDIFF_T

# define QUALIFIER_INTMAX_T

#endif #if TRIO_BSD || TRIO_GNU # define QUALIFIER_QUAD

#endif #if TRIO_GNU # define QUALIFIER_SIZE_T_UPPER

#endif #if TRIO_MISC # define QUALIFIER_WIDECHAR

#endif #if TRIO_MICROSOFT # define QUALIFIER_FIXED_SIZE

#endif #if TRIO_EXTENSION # define QUALIFIER_QUOTE



!

&

@

:

=

R

class

@(#)$Id$

long double

(nil)

in a locale where the radix character is not defined, * the radix character defaults to a period (.)

.

.

,

0123456789abcdefghijklmnopqrstuvwxyz

0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ

triostr.c

0

1

2

3

4

5

6

7

8

9

parameters

0

1

2

3

4

5

6

7

8

9

rewind

6

4

3

2

1

6

8

-

+



0

B

b

0

0

X

x

0

\007

a

\b

b

\f

f

\n

n

\r

r

\t

t

\v

v

\\

\\

x

5.2.4.2.2 paragraph #4 * * The accuracy [...] is implementation defined, as is the accuracy * of the conversion between floating-point internal representations * and string representations performed by the libray routine in * <stdio.h>

-

-

-

E+0

E+

0X

-

+



0

X

x

0

-

+



0

X

x

P

p

E

e

-

+

0

the number of * characters written to the output stream so far by * this call

#

doc/doc_printf.h

\0









doc/doc_register.h

:

:enter

:leave

a

-

long long

+

-

0

X

B

\\

\\

a

\007

b

\b

f

\f

n

\n

r

\r

t

\t

v

\v

X

\0

+

-

n

N

i

I

-

-

0

X

.

P

E

+

-

doc/doc_scanf.h

End of file

Invalid argument

Too many arguments

Double reference

Reference gap

Out of memory

Invalid range

Custom error

Unknown

0xc000000000000000)

0x")

0X")

$Id$ Copyright (C) 1998 Bjorn Reese and Daniel Stenberg. Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE AUTHORS AND CONTRIBUTORS ACCEPT NO RESPONSIBILITY IN ANY CONCEIVABLE MANNER. http://ctrio.sourceforge.net/

Use autoconf defines if present. Packages using trio must define HAVE_CONFIG_H as a compiler option themselves.

Error codes. Remember to add a textual description to trio_strerror.

Error macros

Print Functions

Scan Functions

Locale Functions

Renaming

Replace the <stdio.h> functions

These aren't stdio functions, but we make them look similar

extern "C"

WITHOUT_TRIO

TRIO_TRIO_H

ctrio.sourceforge.net/



config.h

triodef.h

C

C

0x00FF)

