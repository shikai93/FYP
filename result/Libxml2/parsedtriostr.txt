$Id$ Copyright (C) 2001 Bjorn Reese and Daniel Stenberg. Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE AUTHORS AND CONTRIBUTORS ACCEPT NO RESPONSIBILITY IN ANY CONCEIVABLE MANNER.

Include files

Definitions

Structures

Constants

Static String Functions

@addtogroup StaticStrings @{

Create new string. @param size Size of new string. @return Pointer to string, or NULL if allocation failed.

Destroy string. @param string String to be freed.

Count the number of characters in a string. @param string String to measure. @return Number of characters in @string.

Append @p source at the end of @p target. @param target Target string. @param source Source string. @return Boolean value indicating success or failure. @pre @p target must point to a memory chunk with sufficient room to contain the @p target string and @p source string. @pre No boundary checking is performed, so insufficient memory will result in a buffer overrun. @post @p target will be zero terminated.

!defined(TRIO_MINIMAL)

Append at most @p max characters from @p source to @p target. @param target Target string. @param max Maximum number of characters to append. @param source Source string. @return Boolean value indicating success or failure. @pre @p target must point to a memory chuck with sufficient room to contain the @p target string and the @p source string (at most @p max characters). @pre No boundary checking is performed, so insufficient memory will result in a buffer overrun. @post @p target will be zero terminated.

!defined(TRIO_MINIMAL)

Determine if a string contains a substring. @param string String to be searched. @param substring String to be found. @return Boolean value indicating success or failure.

!defined(TRIO_MINIMAL)

Copy @p source to @p target. @param target Target string. @param source Source string. @return Boolean value indicating success or failure. @pre @p target must point to a memory chunk with sufficient room to contain the @p source string. @pre No boundary checking is performed, so insufficient memory will result in a buffer overrun. @post @p target will be zero terminated.

!defined(TRIO_MINIMAL)

Copy at most @p max characters from @p source to @p target. @param target Target string. @param max Maximum number of characters to append. @param source Source string. @return Boolean value indicating success or failure. @pre @p target must point to a memory chunk with sufficient room to contain the @p source string (at most @p max characters). @pre No boundary checking is performed, so insufficient memory will result in a buffer overrun. @post @p target will be zero terminated.

Includes != 0

TrioDuplicateMax

Make room for string plus a terminating zero

Duplicate @p source. @param source Source string. @return A copy of the @p source string. @post @p target will be zero terminated.

Duplicate at most @p max characters of @p source. @param source Source string. @param max Maximum number of characters to duplicate. @return A copy of the @p source string. @post @p target will be zero terminated.

!defined(TRIO_MINIMAL)

Compare if two strings are equal. @param first First string. @param second Second string. @return Boolean indicating whether the two strings are equal or not. Case-insensitive comparison.

Compare if two strings are equal. @param first First string. @param second Second string. @return Boolean indicating whether the two strings are equal or not. Case-sensitive comparison.

Compare if two strings up until the first @p max characters are equal. @param first First string. @param max Maximum number of characters to compare. @param second Second string. @return Boolean indicating whether the two strings are equal or not. Case-sensitive comparison.

!defined(TRIO_MINIMAL)

Compare if two strings are equal. @param first First string. @param second Second string. @return Boolean indicating whether the two strings are equal or not. Collating characters are considered equal.

Compare if two strings up until the first @p max characters are equal. @param first First string. @param max Maximum number of characters to compare. @param second Second string. @return Boolean indicating whether the two strings are equal or not. Case-insensitive comparison.

Not adequately tested yet

Provide a textual description of an error code (errno). @param error_number Error number. @return Textual description of @p error_number.

Format the date/time according to @p format. @param target Target string. @param max Maximum number of characters to format. @param format Formatting string. @param datetime Date/time structure. @return Number of formatted characters. The formatting string accepts the same specifiers as the standard C function strftime.

!defined(TRIO_MINIMAL)

Calculate a hash value for a string. @param string String to be calculated on. @param type Hash function. @return Calculated hash value. @p type can be one of the following @li @c TRIO_HASH_PLAIN Plain hash function.

!defined(TRIO_MINIMAL)

Find first occurrence of a character in a string. @param string String to be searched. @param character Character to be found. @param A pointer to the found character, or NULL if character was not found.

!defined(TRIO_MINIMAL)

Find last occurrence of a character in a string. @param string String to be searched. @param character Character to be found. @param A pointer to the found character, or NULL if character was not found.

!defined(TRIO_MINIMAL)

Convert the alphabetic letters in the string to lower-case. @param target String to be converted. @return Number of processed characters (converted or not).

!defined(TRIO_MINIMAL)

Compare two strings using wildcards. @param string String to be searched. @param pattern Pattern, including wildcards, to search for. @return Boolean value indicating success or failure. Case-insensitive comparison. The following wildcards can be used @li @c Match any number of characters. @li @c ? Match a single character.

two-line patch to prevent too much recursiveness:

!defined(TRIO_MINIMAL)

Compare two strings using wildcards. @param string String to be searched. @param pattern Pattern, including wildcards, to search for. @return Boolean value indicating success or failure. Case-sensitive comparison. The following wildcards can be used @li @c Match any number of characters. @li @c ? Match a single character.

two-line patch to prevent too much recursiveness:

!defined(TRIO_MINIMAL)

Execute a function on each character in string. @param target Target string. @param source Source string. @param Function Function to be executed. @return Number of processed characters.

!defined(TRIO_MINIMAL)

Search for a substring in a string. @param string String to be searched. @param substring String to be found. @return Pointer to first occurrence of @p substring in @p string, or NULL if no match was found.

!defined(TRIO_MINIMAL)

Search for a substring in the first @p max characters of a string. @param string String to be searched. @param max Maximum characters to be searched. @param substring String to be found. @return Pointer to first occurrence of @p substring in @p string, or NULL if no match was found.

!defined(TRIO_MINIMAL)

Tokenize string. @param string String to be tokenized. @param tokens String containing list of delimiting characters. @return Start of new token. @warning @p string will be destroyed.

!defined(TRIO_MINIMAL)

Convert string to floating-point number. @param source String to be converted. @param endp Pointer to end of the converted string. @return A floating-point number. The following Extended Backus-Naur form is used @verbatim double ::= [ <sign> ] ( <number> | <number> <decimal_point> <number> | <decimal_point> <number> ) [ <exponential> [ <sign> ] <number> ] number ::= 1( <digit> ) digit ::= ( '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ) exponential ::= ( 'e' | 'E' ) sign ::= ( '-' | '+' ) decimal_point ::= '.' @endverbatim

FIXME: Add EBNF for hex-floats

First try hex-floats

For later use with exponent

Then try normal decimal floats

Skip sign

Integer part

skip decimal point

Skip exponential indicator

Convert string to floating-point number. @param source String to be converted. @param endp Pointer to end of the converted string. @return A floating-point number. See @ref trio_to_long_double.

Convert string to floating-point number. @param source String to be converted. @param endp Pointer to end of the converted string. @return A floating-point number. See @ref trio_to_long_double.

!defined(TRIO_MINIMAL)

Convert string to signed integer. @param string String to be converted. @param endp Pointer to end of converted string. @param base Radix number of number.

Convert one alphabetic letter to lower-case. @param source The letter to be converted. @return The converted letter.

Does not handle locales or non-contiguous alphabetic characters

!defined(TRIO_MINIMAL)

Convert string to unsigned integer. @param string String to be converted. @param endp Pointer to end of converted string. @param base Radix number of number.

!defined(TRIO_MINIMAL)

Convert one alphabetic letter to upper-case. @param source The letter to be converted. @return The converted letter.

Does not handle locales or non-contiguous alphabetic characters

Convert the alphabetic letters in the string to upper-case. @param target The string to be converted. @return The number of processed characters (converted or not).

!defined(TRIO_MINIMAL)

@} End of StaticStrings

Dynamic String Functions

@addtogroup DynamicStrings @{

TrioStringAlloc

TrioStringGrow The size of the string will be increased by 'delta' characters. If 'delta' is zero, the size will be doubled.

TrioStringGrowTo The size of the string will be increased to 'length' plus one characters. If 'length' is less than the original size, the original size will be used (that is, the size of the string is never decreased).

Room for terminating zero

!defined(TRIO_MINIMAL)

Create a new dynamic string. @param initial_size Initial size of the buffer. @return Newly allocated dynamic string, or NULL if memory allocation failed.

!defined(TRIO_MINIMAL)

Deallocate the dynamic string and its contents. @param self Dynamic string

Get a pointer to the content. @param self Dynamic string. @param offset Offset into content. @return Pointer to the content. @p Offset can be zero, positive, or negative. If @p offset is zero, then the start of the content will be returned. If @p offset is positive, then a pointer to @p offset number of characters from the beginning of the content is returned. If @p offset is negative, then a pointer to @p offset number of characters from the ending of the string, starting at the terminating zero, is returned.

!defined(TRIO_MINIMAL)

Extract the content. @param self Dynamic String @return Content of dynamic string. The content is removed from the dynamic string. This enables destruction of the dynamic string without deallocation of the content.

FIXME: Allocate new empty buffer?

Set the content of the dynamic string. @param self Dynamic String @param buffer The new content. Sets the content of the dynamic string to a copy @p buffer. An existing content will be deallocated first, if necessary. @remark This function will make a copy of @p buffer. You are responsible for deallocating @p buffer yourself.

!defined(TRIO_MINIMAL)

trio_string_size

trio_string_terminate

Append the second string to the first. @param self Dynamic string to be modified. @param other Dynamic string to copy from. @return Boolean value indicating success or failure.

!defined(TRIO_MINIMAL)

trio_xstring_append

!defined(TRIO_MINIMAL)

trio_xstring_append_char

Search for the first occurrence of second parameter in the first. @param self Dynamic string to be modified. @param other Dynamic string to copy from. @return Boolean value indicating success or failure.

!defined(TRIO_MINIMAL)

trio_xstring_contains

!defined(TRIO_MINIMAL)

trio_string_copy

!defined(TRIO_MINIMAL)

trio_xstring_copy

!defined(TRIO_MINIMAL)

trio_string_duplicate

!defined(TRIO_MINIMAL)

trio_xstring_duplicate

trio_string_equal

!defined(TRIO_MINIMAL)

trio_xstring_equal

!defined(TRIO_MINIMAL)

trio_string_equal_max

!defined(TRIO_MINIMAL)

trio_xstring_equal_max

!defined(TRIO_MINIMAL)

trio_string_equal_case

!defined(TRIO_MINIMAL)

trio_xstring_equal_case

!defined(TRIO_MINIMAL)

trio_string_equal_case_max

!defined(TRIO_MINIMAL)

trio_xstring_equal_case_max

!defined(TRIO_MINIMAL)

trio_string_format_data_max

!defined(TRIO_MINIMAL)

trio_string_index

!defined(TRIO_MINIMAL)

trio_string_index_last

!defined(TRIO_MINIMAL)

trio_string_length

!defined(TRIO_MINIMAL)

trio_string_lower

!defined(TRIO_MINIMAL)

trio_string_match

!defined(TRIO_MINIMAL)

trio_xstring_match

!defined(TRIO_MINIMAL)

trio_string_match_case

!defined(TRIO_MINIMAL)

trio_xstring_match_case

!defined(TRIO_MINIMAL)

trio_string_substring

!defined(TRIO_MINIMAL)

trio_xstring_substring

!defined(TRIO_MINIMAL)

trio_string_upper

!defined(TRIO_MINIMAL)

@} End of DynamicStrings



triodef.h

triostr.h

@(#)$Id$

doc/doc_static.h

unknown

unknown

*

?

*

*

?

*

0

1

2

3

4

5

6

7

8

9

e

E

-

+

.

0

x

X

0

A

.

0

A

p

P

+

-

-

0

-

+

-

0

.

0

e

E

d

D

-

+

-

0

A

Z

A

a

a

z

a

A

doc/doc_dynamic.h

delta

delta

length

length

$Id$ Copyright (C) 2001 Bjorn Reese and Daniel Stenberg. Permission to use, copy, modify, and distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE AUTHORS AND CONTRIBUTORS ACCEPT NO RESPONSIBILITY IN ANY CONCEIVABLE MANNER.

String functions

!defined(TRIO_MINIMAL)

Dynamic string functions

Opaque type for dynamic strings

!defined(TRIO_MINIMAL)

TRIO_TRIOSTR_H



triodef.h

triop.h

