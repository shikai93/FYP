xlink.c : implementation of the hyperlinks detection module This version supports both XML XLinks and HTML simple links See Copyright for the status of this software. daniel@veillard.com

for memset() only

Default setting and related functions

xlinkGetDefaultHandler: Get the default xlink handler. Returns the current xlinkHandlerPtr value.

xlinkSetDefaultHandler: @handler: the new value for the xlink handler block Set the default xlink handlers

xlinkGetDefaultDetect: Get the default xlink detection routine Returns the current function or NULL;

xlinkSetDefaultDetect: @func: pointer to the new detection routine. Set the default xlink detection routine

The detection routines

xlinkIsLink: @doc: the document containing the node @node: the node pointer itself Check whether the given node carries the attributes needed to be a link element (or is one of the linking elements issued from the (X)HTML DtDs). This routine don't try to do full checking of the link validity but tries to detect and return the appropriate link type. Returns the xlinkType of the node (XLINK_TYPE_NONE if there is no link detected.

This is an HTML document.

!!!! We really need an IS_XHTML_ELEMENT function from HTMLtree.h @@@

This is an XHTML element within an XML document Check whether it's one of the element able to carry links and in that case if it holds the attributes.

We don't prevent a-priori having XML Linking constructs on XHTML elements

Humm, fallback method

LIBXML_XPTR_ENABLED

www.w3.org/1999/xlink/namespace/")

www.w3.org/1999/xhtml/")

libxml.h

http://www.w3.org/1999/xlink/namespace/

http://www.w3.org/1999/xhtml/

t try to do full checking of the link validity * but tries to detect and return the appropriate link type. * * Returns the xlinkType of the node (XLINK_TYPE_NONE if there is no * link detected. */ xlinkType xlinkIsLink (xmlDocPtr doc, xmlNodePtr node) { xmlChar *type = NULL, *role = NULL; xlinkType ret = XLINK_TYPE_NONE; if (node == NULL) return(XLINK_TYPE_NONE); if (doc == NULL) doc = node->doc; if ((doc != NULL) && (doc->type == XML_HTML_DOCUMENT_NODE)) { /* * This is an HTML document. */ } else if ((node->ns != NULL) && (xmlStrEqual(node->ns->href, XHTML_NAMESPACE))) { /* * !!!! We really need an IS_XHTML_ELEMENT function from HTMLtree.h @@@ */ /* * This is an XHTML element within an XML document * Check whether it

type

simple

extended

role

xlink:external-linkset

%s:external-linkset

elfgcchack.h

Summary: unfinished XLink detection module Description: unfinished XLink detection module Copy: See Copyright for the status of this software. Author: Daniel Veillard

Various defines for the various Link properties. NOTE: the link detection layer will try to resolve QName expansion of namespaces. If "foo" is the prefix for "http://foo.com/" then the link detection layer will expand role="foo:myrole" to "http://foo.com/:myrole". NOTE: the link detection layer will expand URI-Refences found on href attributes by using the base mechanism if found.

xlinkNodeDetectFunc: @ctx: user data pointer @node: the node to check This is the prototype for the link detection routine. It calls the default link detection callbacks upon link detection.

The link detection module interact with the upper layers using a set of callback registered at parsing time.

xlinkSimpleLinkFunk: @ctx: user data pointer @node: the node carrying the link @href: the target of the link @role: the role string @title: the link title This is the prototype for a simple link detection callback.

xlinkExtendedLinkFunk: @ctx: user data pointer @node: the node carrying the link @nbLocators: the number of locators detected on the link @hrefs: pointer to the array of locator hrefs @roles: pointer to the array of locator roles @nbArcs: the number of arcs detected on the link @from: pointer to the array of source roles found on the arcs @to: pointer to the array of target roles found on the arcs @show: array of values for the show attributes found on the arcs @actuate: array of values for the actuate attributes found on the arcs @nbTitles: the number of titles detected on the link @title: array of titles detected on the link @langs: array of xml:lang values for the titles This is the prototype for a extended link detection callback.

xlinkExtendedLinkSetFunk: @ctx: user data pointer @node: the node carrying the link @nbLocators: the number of locators detected on the link @hrefs: pointer to the array of locator hrefs @roles: pointer to the array of locator roles @nbTitles: the number of titles detected on the link @title: array of titles detected on the link @langs: array of xml:lang values for the titles This is the prototype for a extended link set detection callback.

This is the structure containing a set of Links detection callbacks. There is no default xlink callbacks, if one want to get link recognition activated, those call backs must be provided before parsing.

The default detection routine, can be overridden, they call the default detection callbacks.

Routines to set/get the default handlers.

Link detection module itself.

LIBXML_XPTR_ENABLED

__XML_XLINK_H__

foo.com/"

foo.com/:myrole".

C

foo

http://foo.com/

foo:myrole

http://foo.com/:myrole

