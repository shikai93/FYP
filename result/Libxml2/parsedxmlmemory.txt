xmlmemory.c: libxml memory allocator wrapper. daniel@veillard.com

#define DEBUG_MEMORY

MEM_LIST: keep track of all allocated blocks for error reporting Always build the memory list !

keep a list of all the allocated memory blocks

must come before xmlmemory.h

Macros, variables and associated types

Each of the blocks allocated begin with a header containing informations

xmlMallocBreakpoint: Breakpoint to use in conjunction with xmlMemStopAtBlock. When the block number reaches the specified value this function is called. One need to add a breakpoint to it to get the context in which the given block is allocated.

xmlMallocLoc: @size: an int specifying the size in byte to allocate. @file: the file name or NULL @line: the line number a malloc() equivalent, with logging of the allocation info. Returns a pointer to the allocated area or NULL in case of lack of memory.

xmlMallocAtomicLoc: @size: an int specifying the size in byte to allocate. @file: the file name or NULL @line: the line number a malloc() equivalent, with logging of the allocation info. Returns a pointer to the allocated area or NULL in case of lack of memory.

xmlMemMalloc: @size: an int specifying the size in byte to allocate. a malloc() equivalent, with logging of the allocation info. Returns a pointer to the allocated area or NULL in case of lack of memory.

xmlReallocLoc: @ptr: the initial memory block pointer @size: an int specifying the size in byte to allocate. @file: the file name or NULL @line: the line number a realloc() equivalent, with logging of the allocation info. Returns a pointer to the allocated area or NULL in case of lack of memory.

xmlMemRealloc: @ptr: the initial memory block pointer @size: an int specifying the size in byte to allocate. a realloc() equivalent, with logging of the allocation info. Returns a pointer to the allocated area or NULL in case of lack of memory.

xmlMemFree: @ptr: the memory block pointer a free() equivalent, with error checking.

xmlMemStrdupLoc: @str: the initial string pointer @file: the file name or NULL @line: the line number a strdup() equivalent, with logging of the allocation info. Returns a pointer to the new string or NULL if allocation error occurred.

xmlMemoryStrdup: @str: the initial string pointer a strdup() equivalent, with logging of the allocation info. Returns a pointer to the new string or NULL if allocation error occurred.

xmlMemUsed: Provides the amount of memory currently allocated Returns an int representing the amount of memory allocated.

xmlMemBlocks: Provides the number of memory areas currently allocated Returns an int representing the number of blocks

xmlMemContentShow: @fp: a FILE descriptor used as the output file @p: a memory block header tries to show some content from the memory block

xmlMemDisplayLast: @fp: a FILE descriptor used as the output file, if NULL, the result is written to the file .memorylist @nbBytes: the amount of memory to dump the last nbBytes of memory allocated and not freed, useful for dumping the memory left allocated between two places at runtime.

xmlMemDisplay: @fp: a FILE descriptor used as the output file, if NULL, the result is written to the file .memorylist show in-extenso the memory blocks allocated

debugmem_tag_error: internal error function.

xmlMemShow: @fp: a FILE descriptor used as the output file @nr: number of entries to dump show a show display of the memory allocated, and dump the @nr last allocated areas which were not freed

MEM_LIST

xmlMemoryDump: Dump in-extenso the memory blocks allocated to the file .memorylist

MEM_LIST

Initialization Routines

xmlInitMemory: Initialize the memory layer. Returns 0 on success

This is really not good code (see Bug 130419). Suggestions for improvement will be welcome!

xmlCleanupMemory: Free up all the memory allocated by the library for its own use. This should not be called by user level code.

xmlMemSetup: @freeFunc: the free() function to use @mallocFunc: the malloc() function to use @reallocFunc: the realloc() function to use @strdupFunc: the strdup() function to use Override the default memory access functions with a new set This has to be called before any other libxml routines ! Should this be blocked if there was already some allocations done ? Returns 0 on success

xmlMemGet: @freeFunc: place to save the free() function in use @mallocFunc: place to save the malloc() function in use @reallocFunc: place to save the realloc() function in use @strdupFunc: place to save the strdup() function in use Provides the memory access functions set currently in use Returns 0 on success

xmlGcMemSetup: @freeFunc: the free() function to use @mallocFunc: the malloc() function to use @mallocAtomicFunc: the malloc() function to use for atomic allocations @reallocFunc: the realloc() function to use @strdupFunc: the strdup() function to use Override the default memory access functions with a new set This has to be called before any other libxml routines ! The mallocAtomicFunc is specialized for atomic block allocations (i.e. of areas useful for garbage collected memory allocators Should this be blocked if there was already some allocations done ? Returns 0 on success

xmlGcMemGet: @freeFunc: place to save the free() function in use @mallocFunc: place to save the malloc() function in use @mallocAtomicFunc: place to save the atomic malloc() function in use @reallocFunc: place to save the realloc() function in use @strdupFunc: place to save the strdup() function in use Provides the memory access functions set currently in use The mallocAtomicFunc is specialized for atomic block allocations (i.e. of areas useful for garbage collected memory allocators Returns 0 on success

libxml.h

xmlMallocBreakpoint reached on block %d\n

Malloc(%d)\n

xmlMallocLoc : Out of free space\n

Malloc(%d) Ok\n

%p : Malloc(%ld) Ok\n

Malloc(%d)\n

xmlMallocLoc : Out of free space\n

Malloc(%d) Ok\n

%p : Malloc(%ld) Ok\n

none

%p : Realloced(%ld -> %ld) Ok\n

Realloced(%d to %d) Ok\n

none

trying to free pointer from freed area\n

%p : Freed()\n

Freed(%d) Ok\n

xmlMemFree(%lX) error\n

%p : Strdup() Ok\n

none

NULL

pointer to #%lu at index %d

null

\"%.25s\"

[

%c

]

.memorylist

w

Last %li MEMORY ALLOCATED : %lu, MAX was %lu\n

BLOCK NUMBER SIZE TYPE\n

%-5u %6lu %6lu

strdup() in

malloc() in

realloc() in

atomicmalloc() in

atomicrealloc() in

Unknown memory block, may be corrupted

%s(%u)

INVALID

skip

\n

Memory list not compiled (MEM_LIST not defined !)\n

.memorylist

w

%I:%M:%S %p

%s\n\n

MEMORY ALLOCATED : %lu, MAX was %lu\n

BLOCK NUMBER SIZE TYPE\n

%-5u %6lu %6lu

strdup() in

malloc() in

realloc() in

atomicmalloc() in

atomicrealloc() in

Unknown memory block, may be corrupted

%s(%u)

INVALID

skip

\n

Memory list not compiled (MEM_LIST not defined !)\n

Memory tag error occurs :%p \n\t bye\n

MEMORY ALLOCATED : %lu, MAX was %lu\n

NUMBER SIZE TYPE WHERE\n

%6lu %6lu

strdup() in

malloc() in

atomicmalloc() in

realloc() in

atomicrealloc() in

??? in

%s(%u)

INVALID

\n

.memdump

w

xmlInitMemory()\n

XML_MEM_BREAKPOINT

%ud

XML_MEM_TRACE

%p

xmlInitMemory() Ok\n

xmlCleanupMemory()\n

xmlCleanupMemory() Ok\n

xmlMemSetup()\n

xmlMemSetup() Ok\n

xmlGcMemSetup()\n

xmlGcMemSetup() Ok\n

elfgcchack.h

0x5aa5

Summary: interface for the memory allocator Description: provides interfaces for the memory allocator, including debugging capabilities. Copy: See Copyright for the status of this software. Author: Daniel Veillard

DEBUG_MEMORY: DEBUG_MEMORY replaces the allocator with a collect and debug shell to the libc allocator. DEBUG_MEMORY should only be activated when debugging libxml i.e. if libxml has been configured with --with-debug-mem too.

#define DEBUG_MEMORY_FREED

#define DEBUG_MEMORY_LOCATION

DEBUG_MEMORY_LOCATION: DEBUG_MEMORY_LOCATION should be activated only when debugging libxml i.e. if libxml has been configured with --with-debug-mem too.

The XML memory wrapper support 4 basic overloadable functions.

xmlFreeFunc: @mem: an already allocated block of memory Signature for a free() implementation.

xmlMallocFunc: @size: the size requested in bytes Signature for a malloc() implementation. Returns a pointer to the newly allocated block or NULL in case of error.

xmlReallocFunc: @mem: an already allocated block of memory @size: the new size requested in bytes Signature for a realloc() implementation. Returns a pointer to the newly reallocated block or NULL in case of error.

xmlStrdupFunc: @str: a zero terminated string Signature for an strdup() implementation. Returns the copy of the string or NULL in case of error.

The 4 interfaces used for all memory handling within libxml. LIBXML_DLL_IMPORT xmlFreeFunc xmlFree; LIBXML_DLL_IMPORT xmlMallocFunc xmlMalloc; LIBXML_DLL_IMPORT xmlMallocFunc xmlMallocAtomic; LIBXML_DLL_IMPORT xmlReallocFunc xmlRealloc; LIBXML_DLL_IMPORT xmlStrdupFunc xmlMemStrdup;

The way to overload the existing functions. The xmlGc function have an extra entry for atomic block allocations useful for garbage collected memory allocators

Initialization of the memory layer.

Cleanup of the memory layer.

These are specific to the XML debug memory wrapper.

xmlMalloc: @size: number of bytes to allocate Wrapper for the malloc() function used in the XML library. Returns the pointer to the allocated area or NULL in case of error.

xmlMallocAtomic: @size: number of bytes to allocate Wrapper for the malloc() function used in the XML library for allocation of block not containing pointers to other areas. Returns the pointer to the allocated area or NULL in case of error.

xmlRealloc: @ptr: pointer to the existing allocated area @size: number of bytes to allocate Wrapper for the realloc() function used in the XML library. Returns the pointer to the allocated area or NULL in case of error.

xmlMemStrdup: @str: pointer to the existing string Wrapper for the strdup() function, xmlStrdup() is usually preferred. Returns the pointer to the allocated area or NULL in case of error.

DEBUG_MEMORY_LOCATION

__cplusplus

__DEBUG_MEMORY_ALLOC__

C

