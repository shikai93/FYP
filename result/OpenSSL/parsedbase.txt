Copyright 1998-2001 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Needed for BORINGSSL_MAKE_DELETER

extern C++

OPENSSL_HEADER_BASE_H

www.openssl.org/source/license.html

Rather than specialize Deleter for each type, we specialize

DeleterImpl. This allows bssl::UniquePtr<T> to be used while only

including base.h as long as the destructor is not emitted. This matches

std::unique_ptr's behavior on forward-declared types.



DeleterImpl itself is specialized in the corresponding module's header

and must be included to release an object. If not included, the compiler

will error that DeleterImpl<T> does not have a method Free.

namespace internal

This makes a unique_ptr to STACK_OF(type) that owns all elements on the

stack, i.e. it uses sk_pop_free() to clean up.

Holds ownership of heap-allocated BoringSSL structures. Sample usage:

bssl::UniquePtr<BIO> rsa(RSA_new());

bssl::UniquePtr<BIO> bio(BIO_new(BIO_s_mem()));

namespace bssl

License

C++

s behavior on forward-declared types. // // DeleterImpl itself is specialized in the corresponding module

