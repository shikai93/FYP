Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

!(defined(BN_LLONG) || defined(BN_UMULT_HIGH))

!(defined(BN_LLONG) || defined(BN_UMULT_HIGH))

Divide h,l by d and return the result.

I need to test this some more :-(

!defined(BN_LLONG) && defined(BN_DIV2W)

!BN_LLONG

!BN_LLONG

mul_add_c(a,b,c0,c1,c2) -- c+=ab for three word number c=(c2,c1,c0)

mul_add_c2(a,b,c0,c1,c2) -- c+=2ab for three word number c=(c2,c1,c0)

sqr_add_c(a,i,c0,c1,c2) -- c+=a[i]^2 for three word number c=(c2,c1,c0)

sqr_add_c2(a,i,c0,c1,c2) -- c+=2a[i]a[j] for three word number c=(c2,c1,c0)

Keep in mind that additions to multiplication result can not overflow, because its high half cannot be all-ones.

no carry

no carry

no carry

no carry

Keep in mind that additions to hi can not overflow, because the high word of a multiplication result cannot be all-ones.

Keep in mind that additions to hi can not overflow, because the high word of a multiplication result cannot be all-ones.

!BN_LLONG

Keep in mind that additions to hi can not overflow, because the high word of a multiplication result cannot be all-ones.

!BN_LLONG

This is essentially reference implementation, which may or may not result in performance improvement. E.g. on IA-32 this routine was observed to give 40% faster rsa1024 private key operations and 10% faster rsa4096 ones, while on AMD64 it improves rsa1024 sign only by 10% and worsens rsa4096 sign by 15%. Once again, it's a reference implementation, one to be used as starting point for platform-specific assembler. Mentioned numbers apply to compiler generated code compiled with and without -DOPENSSL_BN_ASM_MONT and can vary not only from platform to platform, but even for compiler versions. Assembler vs. assembler improvement coefficients can [and are known to] differ and are to be documented elsewhere.

template for platform-specific implementation

Return value of 0 indicates that multiplication/convolution was not performed to signal the caller to fall down to alternative/original code-path.

OPENSSL_BN_ASM_MONT

!BN_MUL_COMBA

hmm... is it faster just to do a multiply?

OPENSSL_BN_ASM_MONT

!BN_MUL_COMBA

www.openssl.org/source/license.html

License

internal/cryptlib.h

bn_lcl.h

