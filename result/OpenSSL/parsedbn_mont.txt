Copyright 1995-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Details about Montgomery multiplication algorithms can be found at http://security.ece.orst.edu/publications.html, e.g. http://security.ece.orst.edu/koc/papers/j37acmon.pdf and sections 3.8 and 4.2 in http://security.ece.orst.edu/koc/papers/r01rsasw.pdf

use the faster word-based algorithm

reduce from aRR to aR

carry is stored separately

clear the top words of T

if subtraction result is real, then trick unconditional memcpy below to perform in-place "refresh" instead of actual copy.

MONT_WORD

!MONT_WORD

MONT_WORD

grab RR as a temp

Set N

Only certain BN_BITS2<=32 platforms actually make use of n0[1], and we could use the #else case (with a shorter R value) for the others. However, currently only the assembler files do know which is which.

RRi

if N mod word size == 1

Ri-- (mod double word size)

Ni = (RRi-1)/N, keep only couple of least significant words:

R

tmod = N mod word size

Ri = R^-1 mod N

RRi

if N mod word size == 1

Ri-- (mod word size)

Ni = (RRi-1)/N, keep only least significant word:

!MONT_WORD

bignum version

R = 2^ri

Ri = R^-1 mod N

RRi

Ni = (RRi-1) / N

setup RR for conversions

We don't want to serialise globally while doing our lazy-init math in BN_MONT_CTX_set. That punishes threads that are doing independent things. Instead, punish the case where more than one thread tries to lazy-init the same 'pmont', by having each do the lazy-init math work independently and only use the one from the thread that wins the race (the losers throw away the work they've done).

The locked compare-and-set, after the local work is done.

www.openssl.org/source/license.html

security.ece.orst.edu/publications.html, e.g.

security.ece.orst.edu/koc/papers/j37acmon.pdf and

security.ece.orst.edu/koc/papers/r01rsasw.pdf

License

internal/cryptlib.h

bn_lcl.h

refresh

t want to serialise globally while doing our lazy-init math in * BN_MONT_CTX_set. That punishes threads that are doing independent * things. Instead, punish the case where more than one thread tries to * lazy-init the same

, by having each do the lazy-init math work * independently and only use the one from the thread that wins the race * (the losers throw away the work they

