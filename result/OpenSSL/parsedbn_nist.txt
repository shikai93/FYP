Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

pre-computed tables are "carry-less" values of modulus(i+1)

this one is "carry-full"

two following macros are implemented under assumption that they are called in a sequence with ascending n, i.e. as they are...

BN_BITS2 != 64

just to make sure

accumulator

we need 'if (carry==0 || result>=modulus) result-=modulus;' as comparison implies subtraction, we can write 'tmp=result-modulus; if (!carry || !borrow) result=tmp;' this is what happens below, but without explicit if:-) a.

just to make sure

copy upper 256 bits of 448 bit number ...

... and right shift by 32 to obtain upper 224 bits

truncate lower part to 224 bits too

accumulator

it's a bit more complicated logic in this case. if bn_add_words yields no carry, then result has to be adjusted by unconditionally adding the modulus. but if it does, then result has to be compared to the modulus and conditionally adjusted by subtracting the latter.

otherwise it's effectively same as in BN_nist_mod_192...

just to make sure

accumulator

S1

S2

left shift

S3

S4

D1

D2

D3

D4

see BN_nist_mod_224 for explanation

just to make sure

accumulator

S1

left shift

S2

S3

S4

S5

S6

D1

D2

D3

see BN_nist_mod_224 for explanation

just to make sure

upper 521 bits, copy ...

... and right shift

MSC ARM compiler [version 2013, presumably even earlier, much earlier] miscompiles this code, but not one in #else section. See RT#3541.

lower 521 bits

www.openssl.org/source/license.html

License

bn_lcl.h

internal/cryptlib.h

carry-less

carry-full

unsupported BN_BITS2

if (carry==0 || result>=modulus) result-=modulus;

tmp=result-modulus; if (!carry || !borrow) result=tmp;

s a bit more complicated logic in this case. if bn_add_words * yields no carry, then result has to be adjusted by unconditionally * *adding* the modulus. but if it does, then result has to be * compared to the modulus and conditionally adjusted by * *subtracting* the latter. */ carry = (int)bn_add_words(r_d, r_d, _nist_p_224[-carry - 1], BN_NIST_224_TOP); mask = 0 - (PTR_SIZE_INT) carry; u.p = ((PTR_SIZE_INT) bn_sub_words & mask) | ((PTR_SIZE_INT) bn_add_words & ~mask); } else carry = 1; /* otherwise it

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFEULL,

0xFFFFFFFFFFFFFFFFULL},

0xFFFFFFFFFFFFFFFEULL,

0xFFFFFFFFFFFFFFFDULL,

0xFFFFFFFFFFFFFFFFULL},

0xFFFFFFFFFFFFFFFDULL,

0xFFFFFFFFFFFFFFFCULL,

0xFFFFFFFFFFFFFFFFULL}

0x0000000000000001ULL,

0x0000000000000002ULL,

0x0000000000000001ULL,

0xFFFFFFFFFFFFFFFEULL,

0xFFFFFFFFFFFFFFFDULL,

0xFFFFFFFFFFFFFFFFULL

0x0000000000000001ULL,

0xFFFFFFFF00000000ULL,

0xFFFFFFFFFFFFFFFFULL,

0x00000000FFFFFFFFULL},

0x0000000000000002ULL,

0xFFFFFFFE00000000ULL,

0xFFFFFFFFFFFFFFFFULL,

0x00000001FFFFFFFFULL}

0x0000000000000001ULL,

0xFFFFFFFE00000000ULL,

0xFFFFFFFFFFFFFFFFULL,

0x0000000200000000ULL,

0x0000000000000000ULL,

0xFFFFFFFFFFFFFFFEULL,

0xFFFFFFFFFFFFFFFFULL

0xFFFFFFFFFFFFFFFFULL,

0x00000000FFFFFFFFULL,

0x0000000000000000ULL,

0xFFFFFFFF00000001ULL},

0xFFFFFFFFFFFFFFFEULL,

0x00000001FFFFFFFFULL,

0x0000000000000000ULL,

0xFFFFFFFE00000002ULL},

0xFFFFFFFFFFFFFFFDULL,

0x00000002FFFFFFFFULL,

0x0000000000000000ULL,

0xFFFFFFFD00000003ULL},

0xFFFFFFFFFFFFFFFCULL,

0x00000003FFFFFFFFULL,

0x0000000000000000ULL,

0xFFFFFFFC00000004ULL},

0xFFFFFFFFFFFFFFFBULL,

0x00000004FFFFFFFFULL,

0x0000000000000000ULL,

0xFFFFFFFB00000005ULL},

0x0000000000000001ULL,

0xFFFFFFFE00000000ULL,

0xFFFFFFFFFFFFFFFFULL,

0x00000001FFFFFFFEULL,

0x00000001FFFFFFFEULL,

0x00000001FFFFFFFEULL,

0xFFFFFFFE00000001ULL,

0xFFFFFFFE00000002ULL

0x00000000FFFFFFFFULL,

0xFFFFFFFF00000000ULL,

0xFFFFFFFFFFFFFFFEULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL},

0x00000001FFFFFFFEULL,

0xFFFFFFFE00000000ULL,

0xFFFFFFFFFFFFFFFDULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL},

0x00000002FFFFFFFDULL,

0xFFFFFFFD00000000ULL,

0xFFFFFFFFFFFFFFFCULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL},

0x00000003FFFFFFFCULL,

0xFFFFFFFC00000000ULL,

0xFFFFFFFFFFFFFFFBULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL},

0x00000004FFFFFFFBULL,

0xFFFFFFFB00000000ULL,

0xFFFFFFFFFFFFFFFAULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL},

0xFFFFFFFE00000001ULL,

0x0000000200000000ULL,

0xFFFFFFFE00000000ULL,

0x0000000200000000ULL,

0x0000000000000001ULL,

0x0000000000000000ULL,

0x00000001FFFFFFFEULL,

0xFFFFFFFE00000000ULL,

0xFFFFFFFFFFFFFFFDULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0x00000000000001FFULL

0x0000000000000001ULL,

0x0000000000000000ULL,

0x0000000000000000ULL,

0x0000000000000000ULL,

0x0000000000000000ULL,

0x0000000000000000ULL,

0x0000000000000000ULL,

0x0000000000000000ULL,

0xFFFFFFFFFFFFFC00ULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0xFFFFFFFFFFFFFFFFULL,

0x000000000003FFFFULL

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFE,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF},

0xFFFFFFFE,

0xFFFFFFFF,

0xFFFFFFFD,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF},

0xFFFFFFFD,

0xFFFFFFFF,

0xFFFFFFFC,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF}

0x00000001,

0x00000000,

0x00000002,

0x00000000,

0x00000001,

0x00000000,

0xFFFFFFFE,

0xFFFFFFFF,

0xFFFFFFFD,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF

0x00000001,

0x00000000,

0x00000000,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF},

0x00000002,

0x00000000,

0x00000000,

0xFFFFFFFE,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF}

0x00000001,

0x00000000,

0x00000000,

0xFFFFFFFE,

0xFFFFFFFF,

0xFFFFFFFF,

0x00000000,

0x00000002,

0x00000000,

0x00000000,

0xFFFFFFFE,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0x00000000,

0x00000000,

0x00000000,

0x00000001,

0xFFFFFFFF},

0xFFFFFFFE,

0xFFFFFFFF,

0xFFFFFFFF,

0x00000001,

0x00000000,

0x00000000,

0x00000002,

0xFFFFFFFE},

0xFFFFFFFD,

0xFFFFFFFF,

0xFFFFFFFF,

0x00000002,

0x00000000,

0x00000000,

0x00000003,

0xFFFFFFFD},

0xFFFFFFFC,

0xFFFFFFFF,

0xFFFFFFFF,

0x00000003,

0x00000000,

0x00000000,

0x00000004,

0xFFFFFFFC},

0xFFFFFFFB,

0xFFFFFFFF,

0xFFFFFFFF,

0x00000004,

0x00000000,

0x00000000,

0x00000005,

0xFFFFFFFB},

0x00000001,

0x00000000,

0x00000000,

0xFFFFFFFE,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFE,

0x00000001,

0xFFFFFFFE,

0x00000001,

0xFFFFFFFE,

0x00000001,

0x00000001,

0xFFFFFFFE,

0x00000002,

0xFFFFFFFE

0xFFFFFFFF,

0x00000000,

0x00000000,

0xFFFFFFFF,

0xFFFFFFFE,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF},

0xFFFFFFFE,

0x00000001,

0x00000000,

0xFFFFFFFE,

0xFFFFFFFD,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF},

0xFFFFFFFD,

0x00000002,

0x00000000,

0xFFFFFFFD,

0xFFFFFFFC,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF},

0xFFFFFFFC,

0x00000003,

0x00000000,

0xFFFFFFFC,

0xFFFFFFFB,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF},

0xFFFFFFFB,

0x00000004,

0x00000000,

0xFFFFFFFB,

0xFFFFFFFA,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF},

0x00000001,

0xFFFFFFFE,

0x00000000,

0x00000002,

0x00000000,

0xFFFFFFFE,

0x00000000,

0x00000002,

0x00000001,

0x00000000,

0x00000000,

0x00000000,

0xFFFFFFFE,

0x00000001,

0x00000000,

0xFFFFFFFE,

0xFFFFFFFD,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0x000001FF

0x00000001,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0x00000000,

0xFFFFFC00,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0xFFFFFFFF,

0x0003FFFF

