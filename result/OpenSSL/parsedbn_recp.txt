Copyright 1995-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Just do the mod

We want the remainder Given input of ABCDEF / ab we need multiply ABCDEF by 3 digests of the reciprocal of ab

i := max(BN_num_bits(m), 2BN_num_bits(N))

Nr := round(2^i / N)

BN_reciprocal could have returned -1 for an error

d := |round(round(m / 2^BN_num_bits(N)) recp->Nr / 2^(i - BN_num_bits(N)))| = |round(round(m / 2^BN_num_bits(N)) round(2^i / N) / 2^(i - BN_num_bits(N)))| <= |(m / 2^BN_num_bits(N)) (2^i / N) (2^BN_num_bits(N) / 2^i)| = |m/N|

len is the expected size of the result We actually calculate with an extra word of precision, so we can do faster division if the remainder is not required.

r := 2^len / m

www.openssl.org/source/license.html

License

internal/cryptlib.h

bn_lcl.h

