Copyright 2015-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Test that explicitly setting ticket data results in it appearing in the ClientHello for a negotiated SSL/TLS version

Enable padding and make sure ClientHello is long enough to require it

Enable padding and make sure ClientHello is short enough to not need it

Enable padding and add a PSK to the ClientHello (this will also ensure the ClientHello is long enough to need padding)

Dummy ALPN protocols used to pad out the size of the ClientHello

For each test set up an SSL_CTX and SSL and see what ClientHello gets produced when we try to connect

Testing for session tickets <= TLS1.2; not relevant for 1.3

Add lots of ciphersuites so that the ClientHello is at least F5_WORKAROUND_MIN_MSG_LEN bytes long - meaning padding will be needed. Also add some dummy ALPN protocols in case we still don't have enough.

We reset the creation time so that we don't discard the session as too old.

This shouldn't succeed because we don't have a server!

Skip the record header

Skip the handshake message header

Skip client version and random

Skip session id

Skip ciphers

Skip compression

Extensions len

Loop through all extensions

Ticket data is as we expected

www.openssl.org/source/license.html

License

../ssl/packet_locl.h

testutil.h

0123456789012345678901234567890123456789012345678901234567890123456789

0123456789012345678901234567890123456789012345678901234567890123456789

Hello World!

t * have enough. */ if (currtest == TEST_ADD_PADDING && (!TEST_true(SSL_CTX_set_cipher_list(ctx, "ALL")) || !TEST_false(SSL_CTX_set_alpn_protos(ctx, (unsigned char *)alpn_prots, sizeof(alpn_prots) - 1)))) goto end; break; default: goto end; } con = SSL_new(ctx); if (!TEST_ptr(con)) goto end; if (currtest == TEST_ADD_PADDING_AND_PSK) { sessbio = BIO_new_file(sessionfile, "r"); if (!TEST_ptr(sessbio)) { TEST_info("Unable to open session.pem"); goto end; } sess = PEM_read_bio_SSL_SESSION(sessbio, NULL, NULL, NULL); if (!TEST_ptr(sess)) { TEST_info("Unable to load SSL_SESSION"); goto end; } /* * We reset the creation time so that we don

t succeed because we don

0xff

0x200

