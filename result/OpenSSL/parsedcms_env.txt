Copyright 2008-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

CMS EnvelopedData Utilities

Key Transport Recipient Info (KTRI) routines

Initialise a ktri based on passed certificate and key

Not a typo: RecipientIdentifier and SignerIdentifier are the same structure.

Add a recipient certificate using appropriate type of RecipientInfo

Initialize recipient info

Encrypt content key in key transport recipient info

Decrypt content key from KTRI

Key Encrypted Key (KEK) RecipientInfo routines

For now hard code AES key wrap info

Initialize recipient info

After this point no calls can fail

Encrypt content key in KEK recipient info

Decrypt content key in KEK recipient info

If encrypted key length is invalid don't bother

Check structures and fixup version numbers (if necessary)

Can't set version higher than 4 so if 4 or more already nothing to do.

Get BIO first to set up key

If error or no cipher end of processing

Now encrypt content key according to each RecipientInfo type

Get RecipientInfo type (if any) supported by a key (public or private). To retain compatibility with previous behaviour if the ctrl value isn't supported we assume key transport.

www.openssl.org/source/license.html

License

internal/cryptlib.h

cms_lcl.h

internal/asn1_int.h

internal/evp_int.h

t bother */ if (kekri->encryptedKey->length < 16) { CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT, CMS_R_INVALID_ENCRYPTED_KEY_LENGTH); goto err; } if (AES_set_decrypt_key(kekri->key, kekri->keylen << 3, &actx)) { CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT, CMS_R_ERROR_SETTING_KEY); goto err; } ukey = OPENSSL_malloc(kekri->encryptedKey->length - 8); if (ukey == NULL) { CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT, ERR_R_MALLOC_FAILURE); goto err; } ukeylen = AES_unwrap_key(&actx, NULL, ukey, kekri->encryptedKey->data, kekri->encryptedKey->length); if (ukeylen <= 0) { CMSerr(CMS_F_CMS_RECIPIENTINFO_KEKRI_DECRYPT, CMS_R_UNWRAP_ERROR); goto err; } ec->key = ukey; ec->keylen = ukeylen; r = 1; err: if (!r) OPENSSL_free(ukey); OPENSSL_cleanse(&actx, sizeof(actx)); return r; } int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri) { switch (ri->type) { case CMS_RECIPINFO_TRANS: return cms_RecipientInfo_ktri_decrypt(cms, ri); case CMS_RECIPINFO_KEK: return cms_RecipientInfo_kekri_decrypt(cms, ri); case CMS_RECIPINFO_PASS: return cms_RecipientInfo_pwri_crypt(cms, ri, 0); default: CMSerr(CMS_F_CMS_RECIPIENTINFO_DECRYPT, CMS_R_UNSUPPORTED_RECIPIENTINFO_TYPE); return 0; } } int CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri) { switch (ri->type) { case CMS_RECIPINFO_TRANS: return cms_RecipientInfo_ktri_encrypt(cms, ri); case CMS_RECIPINFO_AGREE: return cms_RecipientInfo_kari_encrypt(cms, ri); case CMS_RECIPINFO_KEK: return cms_RecipientInfo_kekri_encrypt(cms, ri); case CMS_RECIPINFO_PASS: return cms_RecipientInfo_pwri_crypt(cms, ri, 1); default: CMSerr(CMS_F_CMS_RECIPIENTINFO_ENCRYPT, CMS_R_UNSUPPORTED_RECIPIENT_TYPE); return 0; } } /* Check structures and fixup version numbers (if necessary) */ static void cms_env_set_originfo_version(CMS_EnvelopedData *env) { CMS_OriginatorInfo *org = env->originatorInfo; int i; if (org == NULL) return; for (i = 0; i < sk_CMS_CertificateChoices_num(org->certificates); i++) { CMS_CertificateChoices *cch; cch = sk_CMS_CertificateChoices_value(org->certificates, i); if (cch->type == CMS_CERTCHOICE_OTHER) { env->version = 4; return; } else if (cch->type == CMS_CERTCHOICE_V2ACERT) { if (env->version < 3) env->version = 3; } } for (i = 0; i < sk_CMS_RevocationInfoChoice_num(org->crls); i++) { CMS_RevocationInfoChoice *rch; rch = sk_CMS_RevocationInfoChoice_value(org->crls, i); if (rch->type == CMS_REVCHOICE_OTHER) { env->version = 4; return; } } } static void cms_env_set_version(CMS_EnvelopedData *env) { int i; CMS_RecipientInfo *ri; /* * Can

