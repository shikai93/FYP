Copyright 2002-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

This structure contains a data about supported modules. entries in this table correspond to either dynamic or static modules.

DSO of this module or NULL if static

Name of the module

Init function

Finish function

Number of successfully initialized modules

This structure contains information about modules that have been successfully initialized. There may be more than one entry for a given module.

Main function: load modules from a CONF structure

Module not found: try to load DSO

Load a module from a DSO

Look for alternative path in module section

All OK, add module

add module to list

Find a module from the list. We allow module names of the form modname.XXXX to just search for modname to allow the same module to be initialized more than once.

initialize a module

Otherwise add initialized module to list

Try to initialize module

Error occurred, exit

We've started the module so we'd better finish it

Unload any dynamic modules that have a link count of zero: i.e. have no active initialized modules. If 'all' is set then all modules are unloaded including static ones.

unload modules in reverse order

If static or in use and 'all' not set ignore it

Since we're working in reverse this is OK

unload a single module

finish and free up all modules instances

finish a module instance

Add a static module to OpenSSL

Utility functions

Return default config file name

This function takes a list separated by 'sep' and calls the callback function giving the start and length of each member optionally stripping leading and trailing whitespace. This can be used to parse comma separated lists for example.

www.openssl.org/source/license.html

License

internal/cryptlib.h

internal/conf.h

internal/dso.h

OPENSSL_init

OPENSSL_finish

openssl_conf

module=

%-8d

module=

, value=

, retcode=

path

module=

, path=

.

ve started the module so we

all

all

re working in reverse this is OK */ (void)sk_CONF_MODULE_delete(supported_modules, i); module_free(md); } if (sk_CONF_MODULE_num(supported_modules) == 0) { sk_CONF_MODULE_free(supported_modules); supported_modules = NULL; } } /* unload a single module */ static void module_free(CONF_MODULE *md) { DSO_free(md->dso); OPENSSL_free(md->name); OPENSSL_free(md); } /* finish and free up all modules instances */ void CONF_modules_finish(void) { CONF_IMODULE *imod; while (sk_CONF_IMODULE_num(initialized_modules) > 0) { imod = sk_CONF_IMODULE_pop(initialized_modules); module_finish(imod); } sk_CONF_IMODULE_free(initialized_modules); initialized_modules = NULL; } /* finish a module instance */ static void module_finish(CONF_IMODULE *imod) { if (!imod) return; if (imod->pmod->finish) imod->pmod->finish(imod); imod->pmod->links--; OPENSSL_free(imod->name); OPENSSL_free(imod->value); OPENSSL_free(imod); } /* Add a static module to OpenSSL */ int CONF_module_add(const char *name, conf_init_func *ifunc, conf_finish_func *ffunc) { if (module_add(NULL, name, ifunc, ffunc)) return 1; else return 0; } void conf_modules_free_int(void) { CONF_modules_finish(); CONF_modules_unload(1); } /* Utility functions */ const char *CONF_imodule_get_name(const CONF_IMODULE *md) { return md->name; } const char *CONF_imodule_get_value(const CONF_IMODULE *md) { return md->value; } void *CONF_imodule_get_usr_data(const CONF_IMODULE *md) { return md->usr_data; } void CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data) { md->usr_data = usr_data; } CONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md) { return md->pmod; } unsigned long CONF_imodule_get_flags(const CONF_IMODULE *md) { return md->flags; } void CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags) { md->flags = flags; } void *CONF_module_get_usr_data(CONF_MODULE *pmod) { return pmod->usr_data; } void CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data) { pmod->usr_data = usr_data; } /* Return default config file name */ char *CONF_get1_default_config_file(void) { char *file, *sep = ""; int len; file = getenv("OPENSSL_CONF"); if (file) return OPENSSL_strdup(file); len = strlen(X509_get_default_cert_area()); #ifndef OPENSSL_SYS_VMS len++; sep = "/"; #endif len += strlen(OPENSSL_CONF); file = OPENSSL_malloc(len + 1); if (file == NULL) return NULL; BIO_snprintf(file, len + 1, "%s%s%s", X509_get_default_cert_area(), sep, OPENSSL_CONF); return file; } /* * This function takes a list separated by

