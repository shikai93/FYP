Copyright 2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Decodes the base64 string |in| into |out|. A new string will be malloc'd and assigned to |out|. This will be owned by the caller. Do not provide a pre-allocated string in |out|.

Subtract padding bytes from |outlen|. Any more than 2 is malformed.

RFC6962 section 4.1 says we "MUST NOT expect this to be 0", but we can only construct SCT versions that have been defined.

Allocate, build and returns a new |ct_log| from input |pkey_base64| It returns 1 on success, 0 on decoding failure, or invalid parameter if any -1 on internal (malloc) failure

www.openssl.org/source/license.html

License

ct_locl.h

d and assigned to |out|. This will be owned by * the caller. Do not provide a pre-allocated string in |out|. */ static int ct_base64_decode(const char *in, unsigned char **out) { size_t inlen = strlen(in); int outlen, i; unsigned char *outbuf = NULL; if (inlen == 0) { *out = NULL; return 0; } outlen = (inlen / 4) * 3; outbuf = OPENSSL_malloc(outlen); if (outbuf == NULL) { CTerr(CT_F_CT_BASE64_DECODE, ERR_R_MALLOC_FAILURE); goto err; } outlen = EVP_DecodeBlock(outbuf, (unsigned char *)in, inlen); if (outlen < 0) { CTerr(CT_F_CT_BASE64_DECODE, CT_R_BASE64_DECODE_ERROR); goto err; } /* Subtract padding bytes from |outlen|. Any more than 2 is malformed. */ i = 0; while (in[--inlen] ==

MUST NOT expect this to be 0

