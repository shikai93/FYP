Copyright 2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Finds the index of the first extension with the given NID in cert. If there is more than one extension with that NID, is_duplicated is set to 1, otherwise 0 (unless it is NULL).

Modifies a certificate by deleting extensions and copying the issuer and AKID from the presigner certificate, if necessary. Returns 1 on success, 0 otherwise.

An error occurred whilst searching for the extension

Invalid certificate if they contain duplicate extensions

AKID must be present in both certificate or absent in both

Copy issuer name

Retrieve and copy AKID encoding

Should never happen

Duplicate poison extensions are present - error

If cert doesn't have a poison extension, it isn't a precert

cert isn't a precert, so we shouldn't have a presigner

See if cert has a precert SCTs extension

Duplicate SCT extensions are present - error

cert can't both contain SCTs (i.e. have an SCT extension) and be a precert (i.e. have a poison extension).

If either a poison or SCT extension is present, remove it before encoding cert. This, along with ct_x509_cert_fixup(), gets a TBSCertificate (see RFC5280) from cert, which is what the CT log signed when it produced the SCT.

Take a copy of certificate so we don't modify passed version

Reuse buffer if possible

Calculate key hash

www.openssl.org/source/license.html

License

CT is disabled

ct_locl.h

t have a poison extension, it isn

t a precert, so we shouldn

t both contain SCTs (i.e. have an SCT extension) and be a * precert (i.e. have a poison extension). */ goto err; } if (idx == -1) { idx = poison_idx; } /* * If either a poison or SCT extension is present, remove it before encoding * cert. This, along with ct_x509_cert_fixup(), gets a TBSCertificate (see * RFC5280) from cert, which is what the CT log signed when it produced the * SCT. */ if (idx >= 0) { X509_EXTENSION *ext; /* Take a copy of certificate so we don

