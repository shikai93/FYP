Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

const

With "const", gcc 2.8.1 on Solaris thinks that DES_cblock and const_DES_cblock are incompatible pointer types.

make sure things are correct size on machines with 8 byte longs

defaults to false

DES_cbc_encrypt does not update the IV! Use DES_ncbc_encrypt instead.

This is the DES encryption function that gets called by just about every other DES routine in the library. You should not use this function except to implement 'modes' of DES. I say this because the functions that call this routine do the conversion from 'char ' to long, and this needs to be done to make sure 'non-aligned' memory access do not occur. The characters are loaded 'little endian'. Data is a pointer to 2 unsigned long's and ks is the DES_key_schedule to use. enc, is non zero specifies encryption, zero if decryption.

This functions is the same as DES_encrypt1() except that the DES initial permutation (IP) and final permutation (FP) have been left out. As for DES_encrypt1(), you should not use this function. It is used by the routines in the library that implement triple DES. IP() DES_encrypt2() DES_encrypt2() DES_encrypt2() FP() is the same as DES_encrypt1() DES_encrypt1() DES_encrypt1() except faster :-).

DES_set_key (= set_key = DES_key_sched = key_sched) calls DES_set_key_checked if global variable DES_check_key is set, DES_set_key_unchecked otherwise.

www.openssl.org/source/license.html

License

C

const

modes

char *

non-aligned

little endian

