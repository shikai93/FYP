Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Things have been modified so that the initial rotate is done outside the loop. This required the DES_SPtrans values in sp.h to be rotated 1 bit to the right. One perl script later and things have a 5% speed up on a sparc2. Thanks to Richard Outerbridge <71755.204@CompuServe.COM> for pointing this out.

clear the top bits on machines with 8byte longs

shift left by 2

I don't know if it is worth the effort of loop unrolling the inner loop

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

16

15

14

13

12

11

10

9

8

7

6

5

4

3

2

1

rotate and clear the top bits on machines with 8byte longs

Things have been modified so that the initial rotate is done outside the loop. This required the DES_SPtrans values in sp.h to be rotated 1 bit to the right. One perl script later and things have a 5% speed up on a sparc2. Thanks to Richard Outerbridge <71755.204@CompuServe.COM> for pointing this out.

clear the top bits on machines with 8byte longs

I don't know if it is worth the effort of loop unrolling the inner loop

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

16

15

14

13

12

11

10

9

8

7

6

5

4

3

2

1

rotate and clear the top bits on machines with 8byte longs

DES_ncbc_encrypt

DES_DEFAULT_OPTIONS

www.openssl.org/source/license.html

License

des_locl.h

spr.h

t know if it is worth the effort of loop unrolling the inner * loop */ if (enc) { D_ENCRYPT(l, r, 0); /* 1 */ D_ENCRYPT(r, l, 2); /* 2 */ D_ENCRYPT(l, r, 4); /* 3 */ D_ENCRYPT(r, l, 6); /* 4 */ D_ENCRYPT(l, r, 8); /* 5 */ D_ENCRYPT(r, l, 10); /* 6 */ D_ENCRYPT(l, r, 12); /* 7 */ D_ENCRYPT(r, l, 14); /* 8 */ D_ENCRYPT(l, r, 16); /* 9 */ D_ENCRYPT(r, l, 18); /* 10 */ D_ENCRYPT(l, r, 20); /* 11 */ D_ENCRYPT(r, l, 22); /* 12 */ D_ENCRYPT(l, r, 24); /* 13 */ D_ENCRYPT(r, l, 26); /* 14 */ D_ENCRYPT(l, r, 28); /* 15 */ D_ENCRYPT(r, l, 30); /* 16 */ } else { D_ENCRYPT(l, r, 30); /* 16 */ D_ENCRYPT(r, l, 28); /* 15 */ D_ENCRYPT(l, r, 26); /* 14 */ D_ENCRYPT(r, l, 24); /* 13 */ D_ENCRYPT(l, r, 22); /* 12 */ D_ENCRYPT(r, l, 20); /* 11 */ D_ENCRYPT(l, r, 18); /* 10 */ D_ENCRYPT(r, l, 16); /* 9 */ D_ENCRYPT(l, r, 14); /* 8 */ D_ENCRYPT(r, l, 12); /* 7 */ D_ENCRYPT(l, r, 10); /* 6 */ D_ENCRYPT(r, l, 8); /* 5 */ D_ENCRYPT(l, r, 6); /* 4 */ D_ENCRYPT(r, l, 4); /* 3 */ D_ENCRYPT(l, r, 2); /* 2 */ D_ENCRYPT(r, l, 0); /* 1 */ } /* rotate and clear the top bits on machines with 8byte longs */ l = ROTATE(l, 3) & 0xffffffffL; r = ROTATE(r, 3) & 0xffffffffL; FP(r, l); data[0] = l; data[1] = r; l = r = t = u = 0; } void DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc) { register DES_LONG l, r, t, u; register DES_LONG *s; r = data[0]; l = data[1]; /* * Things have been modified so that the initial rotate is done outside * the loop. This required the DES_SPtrans values in sp.h to be rotated * 1 bit to the right. One perl script later and things have a 5% speed * up on a sparc2. Thanks to Richard Outerbridge * <71755.204@CompuServe.COM> for pointing this out. */ /* clear the top bits on machines with 8byte longs */ r = ROTATE(r, 29) & 0xffffffffL; l = ROTATE(l, 29) & 0xffffffffL; s = ks->ks->deslong; /* * I don

ncbc_enc.c

0xffffffffL;

0xffffffffL;

0xffffffffL;

0xffffffffL;

0xffffffffL;

0xffffffffL;

0xffffffffL;

0xffffffffL;

