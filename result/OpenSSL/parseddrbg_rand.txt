Copyright 2011-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Implementation of NIST SP 800-90A CTR DRBG.

If we didn't wrap around, we're done.

Any zero padding will have no effect on the result as we are XORing. So just process however much input we have.

Should never happen

Process a complete block using BCC algorithm of SP 800-90A 10.3.3

Handle several BCC operations for as much data as we need for K and X

Initialise BCC blocks: these have the value 0,1,2 in leftmost positions: see 10.3.1 stage 7.

Process several blocks into BCC algorithm, some possibly partial

If we have partial block handle it first

If we now have a complete block process it

Process zero or more complete blocks

Copy any remaining partial block to the temporary buffer

Initialise L||N in temporary block

NB keylen is at most 32 bytes

Set up key K

X follows key K

NB the no-df Update in SP800-90A specifies a constant input length of seedlen, however other uses of this algorithm pad the input with zeroes if necessary and have up to two parameters XORed together, so we handle both cases in this function instead.

ks is already setup for correct key

If keylen longer than 128 bits need extra encrypt

If 192 bit key part of V is on end of K

If no input reuse existing derived value

If this a reuse input in1len != 0

This means we reuse derived value

Use K as temp space as it will be updated

This can't happen, but silence the compiler warning.

df initialisation

Set key schedule for df_key

Nonce not used

www.openssl.org/source/license.html

License

rand_lcl.h

internal/thread_once.h

t wrap around, we

0x80;

0xff;

0xff;

0xff;

0xff;

0xff);

0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,

0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,

0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,

0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f

