Copyright 2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html



The low-level handle type used to refer to a loaded shared library

Standard dlopen uses a (void ). Win32 uses a HANDLE. VMS doesn't use anything but will need to cache the filename for use in the dso_bind handler. All in all, let each method control its own destiny. "Handles" and such go in a STACK.

For use by applications etc ... use this for your bits'n'pieces, don't touch meth_data!

If this callback function pointer is set to non-NULL, then it will be used in DSO_load() in place of meth->dso_name_converter. NB: This should normally set using DSO_set_name_converter().

If this callback function pointer is set to non-NULL, then it will be used in DSO_load() in place of meth->dso_merger. NB: This should normally set using DSO_set_merger().

This is populated with (a copy of) the platform-independent filename used for this DSO.

This is populated with (a copy of) the translated filename by which the DSO was actually loaded. It is NULL iff the DSO is not currently loaded. NB: This is here because the filename translation process may involve a callback being invoked more than once not only to convert to a platform-specific form, but also to try different filenames in the process of trying to perform a load. As such, this variable can be used to indicate (a) whether this DSO structure corresponds to a loaded library or not, and (b) the filename with which it was actually loaded.

Loads a shared library, NB: new DSO_METHODs must ensure that a successful load populates the loaded_filename field, and likewise a successful unload OPENSSL_frees and NULLs it out.

Unloads a shared library

Binds a function - assumes a return type of DSO_FUNC_TYPE. This should be cast to the real function prototype by the caller. Platforms that don't have compatible representations for different prototypes (this is possible within ANSI C) are highly unlikely to have shared libraries at all, let alone a DSO_METHOD implemented for them.

The generic (yuck) "ctrl()" function. NB: Negative return values (rather than zero) indicate errors.

The default DSO_METHOD-specific function for converting filenames to a canonical native form.

The default DSO_METHOD-specific function for converting filenames to a canonical native form.

[De]Initialisation handlers.

Return pathname of the module containing location

Perform global symbol lookup, i.e. among all modules

www.openssl.org/source/license.html

License

internal/cryptlib.h

internal/dso.h

internal/dso_conf.h

internal/refcount.h

t use * anything but will need to cache the filename for use in the dso_bind * handler. All in all, let each method control its own destiny. * "Handles" and such go in a STACK. */ STACK_OF(void) *meth_data; CRYPTO_REF_COUNT references; int flags; /* * For use by applications etc ... use this for your bits

pieces, don

ctrl()

