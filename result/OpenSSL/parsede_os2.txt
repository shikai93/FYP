Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Detect operating systems. This probably needs completing. The result is that at least one OPENSSL_SYS_os macro should be defined. However, if none is defined, Unix is assumed.

--------------------- Microsoft operating systems ----------------------

Note that MSDOS actually denotes 32-bit environments running on top of MS-DOS, such as DJGPP one.

For 32 bit environment, there seems to be the CygWin environment and then all the others that try to do the same thing Microsoft does...

UEFI lives here because it might be built with a Microsoft toolchain and we need to avoid the false positive match on Windows.

Anything that tries to look like Microsoft is "Windows"

DLL settings. This part is a bit tough, because it's up to the application implementor how he or she will link the application, so it requires some macro to be used.

This is used when building OpenSSL to indicate that DLL linkage should be used

------------------------------- OpenVMS --------------------------------

-------------------------------- Unix ----------------------------------

-------------------------------- VOS -----------------------------------

That's it for OS-specific stuff

Specials for I/O an exit

declared in unistd.h

OPENSSL_EXTERN is normally used to declare a symbol with possible extra attributes to handle its presence in a shared library. OPENSSL_EXPORT is used to define a symbol with extra possible attributes to make it visible in a shared library. Care needs to be taken when a header file is used both to declare and define symbols. Basically, for any library that exports some global variables, the following code must be present in the header file that declares them, before OPENSSL_EXTERN is used: #ifdef SOME_BUILD_FLAG_MACRO # undef OPENSSL_EXTERN # define OPENSSL_EXTERN OPENSSL_EXPORT #endif The default is to have OPENSSL_EXPORT and OPENSSL_EXTERN have some generally sensible values.

Macros to allow global variables to be reached through function calls when required (if a shared library version requires it, for example. The way it's done allows definitions like this: // in foobar.c OPENSSL_IMPLEMENT_GLOBAL(int,foobar,0) // in foobar.h OPENSSL_DECLARE_GLOBAL(int,foobar); #define foobar OPENSSL_GLOBAL_REF(foobar)

Standard integer types

minimally required typdefs for systems not supporting inttypes.h or stdint.h: currently just older VC++

ossl_inline: portable inline definition usable in public headers

just use inline

Visual Studio: inline is available in C++ only, however __inline is available for C, see http://msdn.microsoft.com/en-us/library/z8y1yy88.aspx

www.openssl.org/source/license.html

in foobar.c

in foobar.h

msdn.microsoft.com/en-us/library/z8y1yy88.aspx

License

C

Windows

s up to the * application implementor how he or she will link the application, so it * requires some macro to be used. */ # ifdef OPENSSL_SYS_WINDOWS # ifndef OPENSSL_OPT_WINDLL # if defined(_WINDLL) /* This is used when building OpenSSL to * indicate that DLL linkage should be used */ # define OPENSSL_OPT_WINDLL # endif # endif # endif /* ------------------------------- OpenVMS -------------------------------- */ # if defined(__VMS) || defined(VMS) || defined(OPENSSL_SYS_VMS) # if !defined(OPENSSL_SYS_VMS) # undef OPENSSL_SYS_UNIX # endif # define OPENSSL_SYS_VMS # if defined(__DECC) # define OPENSSL_SYS_VMS_DECC # elif defined(__DECCXX) # define OPENSSL_SYS_VMS_DECC # define OPENSSL_SYS_VMS_DECCXX # else # define OPENSSL_SYS_VMS_NODECC # endif # endif /* -------------------------------- Unix ---------------------------------- */ # ifdef OPENSSL_SYS_UNIX # if defined(linux) || defined(__linux__) && !defined(OPENSSL_SYS_LINUX) # define OPENSSL_SYS_LINUX # endif # if defined(_AIX) && !defined(OPENSSL_SYS_AIX) # define OPENSSL_SYS_AIX # endif # endif /* -------------------------------- VOS ----------------------------------- */ # if defined(__VOS__) && !defined(OPENSSL_SYS_VOS) # define OPENSSL_SYS_VOS # ifdef __HPPA__ # define OPENSSL_SYS_VOS_HPPA # endif # ifdef __IA32__ # define OPENSSL_SYS_VOS_IA32 # endif # endif /** * That

