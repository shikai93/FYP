Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

www.openssl.org/source/license.html

License

apps.h

compressed

uncompressed

hybrid

named_curve

explicit

help

-

Display this summary

in

s

Input file

inform

f

Input format - DER or PEM

out

>

Output file

outform

F

Output format - DER or PEM

noout

-

Don't print key out

text

-

Print the key

param_out

-

Print the elliptic curve parameters

pubin

-

Expect a public key in input file

pubout

-

Output public key, not private

no_public

-

exclude public key from private key

check

-

check key consistency

passin

s

Input file pass phrase source

passout

s

Output file pass phrase source

param_enc

s

Specifies the way the ec parameters are encoded

conv_form

s

Specifies the point conversion form



-

Any supported cipher

engine

s

Use engine, possibly a hardware device

%s: Use -help for summary.\n

Error getting passwords\n

r

read EC key\n

Public Key

Private Key

unable to load Key\n

EC Key valid.\n

EC Key Invalid!\n

writing EC key\n

unable to write private key\n

Copyright 2002-2016 The OpenSSL Project Authors. All Rights Reserved. Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Enum for the point conversion form as defined in X9.62 (ECDSA) for the encoding of a elliptic curve point (x,y)

the point is encoded as z||x, where the octet z specifies which solution of the quadratic equation y is

the point is encoded as z||x||y, where z is the octet 0x04

the point is encoded as z||x||y, where the octet z specifies which solution of the quadratic equation y is



EC_METHODs for curves over GF(p)



Returns the basic GFp ec methods which provides the basis for the optimized methods. \return EC_METHOD object

Returns GFp methods using montgomery multiplication. \return EC_METHOD object

Returns GFp methods using optimized methods for NIST recommended curves \return EC_METHOD object

Returns 64-bit optimized methods for nistp224 \return EC_METHOD object

Returns 64-bit optimized methods for nistp256 \return EC_METHOD object

Returns 64-bit optimized methods for nistp521 \return EC_METHOD object



EC_METHOD for curves over GF(2^m)



Returns the basic GF2m ec method \return EC_METHOD object



EC_GROUP functions



Creates a new EC_GROUP object \param meth EC_METHOD to use \return newly created EC_GROUP object or NULL in case of an error.

Frees a EC_GROUP object \param group EC_GROUP object to be freed.

Clears and frees a EC_GROUP object \param group EC_GROUP object to be cleared and freed.

Copies EC_GROUP objects. Note: both EC_GROUPs must use the same EC_METHOD. \param dst destination EC_GROUP object \param src source EC_GROUP object \return 1 on success and 0 if an error occurred.

Creates a new EC_GROUP object and copies the copies the content form src to the newly created EC_KEY object \param src source EC_GROUP object \return newly created EC_GROUP object or NULL in case of an error.

Returns the EC_METHOD of the EC_GROUP object. \param group EC_GROUP object \return EC_METHOD used in this EC_GROUP object.

Returns the field type of the EC_METHOD. \param meth EC_METHOD object \return NID of the underlying field type OID.

Sets the generator and it's order/cofactor of a EC_GROUP object. \param group EC_GROUP object \param generator EC_POINT object with the generator. \param order the order of the group generated by the generator. \param cofactor the index of the sub-group generated by the generator in the group of all points on the elliptic curve. \return 1 on success and 0 if an error occurred

Returns the generator of a EC_GROUP object. \param group EC_GROUP object \return the currently used generator (possibly NULL).

Returns the montgomery data for order(Generator) \param group EC_GROUP object \return the currently used montgomery data (possibly NULL).

Gets the order of a EC_GROUP \param group EC_GROUP object \param order BIGNUM to which the order is copied \param ctx unused \return 1 on success and 0 if an error occurred

Gets the order of an EC_GROUP \param group EC_GROUP object \return the group order

Gets the number of bits of the order of an EC_GROUP \param group EC_GROUP object \return number of bits of group order.

Gets the cofactor of a EC_GROUP \param group EC_GROUP object \param cofactor BIGNUM to which the cofactor is copied \param ctx unused \return 1 on success and 0 if an error occurred

Gets the cofactor of an EC_GROUP \param group EC_GROUP object \return the group cofactor

Sets the name of a EC_GROUP object \param group EC_GROUP object \param nid NID of the curve name OID

Returns the curve name of a EC_GROUP object \param group EC_GROUP object \return NID of the curve name OID or 0 if not set.

Sets the parameter of a ec over GFp defined by y^2 = x^3 + ax + b \param group EC_GROUP object \param p BIGNUM with the prime number \param a BIGNUM with parameter a of the equation \param b BIGNUM with parameter b of the equation \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Gets the parameter of the ec over GFp defined by y^2 = x^3 + ax + b \param group EC_GROUP object \param p BIGNUM for the prime number \param a BIGNUM for parameter a of the equation \param b BIGNUM for parameter b of the equation \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Sets the parameter of a ec over GF2m defined by y^2 + xy = x^3 + ax^2 + b \param group EC_GROUP object \param p BIGNUM with the polynomial defining the underlying field \param a BIGNUM with parameter a of the equation \param b BIGNUM with parameter b of the equation \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Gets the parameter of the ec over GF2m defined by y^2 + xy = x^3 + ax^2 + b \param group EC_GROUP object \param p BIGNUM for the polynomial defining the underlying field \param a BIGNUM for parameter a of the equation \param b BIGNUM for parameter b of the equation \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Returns the number of bits needed to represent a field element \param group EC_GROUP object \return number of bits needed to represent a field element

Checks whether the parameter in the EC_GROUP define a valid ec group \param group EC_GROUP object \param ctx BN_CTX object (optional) \return 1 if group is a valid ec group and 0 otherwise

Checks whether the discriminant of the elliptic curve is zero or not \param group EC_GROUP object \param ctx BN_CTX object (optional) \return 1 if the discriminant is not zero and 0 otherwise

Compares two EC_GROUP objects \param a first EC_GROUP object \param b second EC_GROUP object \param ctx BN_CTX object (optional) \return 0 if the groups are equal, 1 if not, or -1 on error

EC_GROUP_new_GF() calls EC_GROUP_new() and EC_GROUP_set_GF() after choosing an appropriate EC_METHOD

Creates a new EC_GROUP object with the specified parameters defined over GFp (defined by the equation y^2 = x^3 + ax + b) \param p BIGNUM with the prime number \param a BIGNUM with the parameter a of the equation \param b BIGNUM with the parameter b of the equation \param ctx BN_CTX object (optional) \return newly created EC_GROUP object with the specified parameters

Creates a new EC_GROUP object with the specified parameters defined over GF2m (defined by the equation y^2 + xy = x^3 + ax^2 + b) \param p BIGNUM with the polynomial defining the underlying field \param a BIGNUM with the parameter a of the equation \param b BIGNUM with the parameter b of the equation \param ctx BN_CTX object (optional) \return newly created EC_GROUP object with the specified parameters

Creates a EC_GROUP object with a curve specified by a NID \param nid NID of the OID of the curve name \return newly created EC_GROUP object with specified curve or NULL if an error occurred

Creates a new EC_GROUP object from an ECPARAMETERS object \param params pointer to the ECPARAMETERS object \return newly created EC_GROUP object with specified curve or NULL if an error occurred

Creates an ECPARAMETERS object for the the given EC_GROUP object. \param group pointer to the EC_GROUP object \param params pointer to an existing ECPARAMETERS object or NULL \return pointer to the new ECPARAMETERS object or NULL if an error occurred.

Creates a new EC_GROUP object from an ECPKPARAMETERS object \param params pointer to an existing ECPKPARAMETERS object, or NULL \return newly created EC_GROUP object with specified curve, or NULL if an error occurred

Creates an ECPKPARAMETERS object for the the given EC_GROUP object. \param group pointer to the EC_GROUP object \param params pointer to an existing ECPKPARAMETERS object or NULL \return pointer to the new ECPKPARAMETERS object or NULL if an error occurred.



handling of internal curves



EC_builtin_curves(EC_builtin_curve r, size_t size) returns number of all available curves or zero if a error occurred. In case r is not zero, nitems EC_builtin_curve structures are filled with the data of the first nitems internal groups



EC_POINT functions



Creates a new EC_POINT object for the specified EC_GROUP \param group EC_GROUP the underlying EC_GROUP object \return newly created EC_POINT object or NULL if an error occurred

Frees a EC_POINT object \param point EC_POINT object to be freed

Clears and frees a EC_POINT object \param point EC_POINT object to be cleared and freed

Copies EC_POINT object \param dst destination EC_POINT object \param src source EC_POINT object \return 1 on success and 0 if an error occurred

Creates a new EC_POINT object and copies the content of the supplied EC_POINT \param src source EC_POINT object \param group underlying the EC_GROUP object \return newly created EC_POINT object or NULL if an error occurred

Returns the EC_METHOD used in EC_POINT object \param point EC_POINT object \return the EC_METHOD used

Sets a point to infinity (neutral element) \param group underlying EC_GROUP object \param point EC_POINT to set to infinity \return 1 on success and 0 if an error occurred

Sets the jacobian projective coordinates of a EC_POINT over GFp \param group underlying EC_GROUP object \param p EC_POINT object \param x BIGNUM with the x-coordinate \param y BIGNUM with the y-coordinate \param z BIGNUM with the z-coordinate \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Gets the jacobian projective coordinates of a EC_POINT over GFp \param group underlying EC_GROUP object \param p EC_POINT object \param x BIGNUM for the x-coordinate \param y BIGNUM for the y-coordinate \param z BIGNUM for the z-coordinate \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Sets the affine coordinates of a EC_POINT over GFp \param group underlying EC_GROUP object \param p EC_POINT object \param x BIGNUM with the x-coordinate \param y BIGNUM with the y-coordinate \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Gets the affine coordinates of a EC_POINT over GFp \param group underlying EC_GROUP object \param p EC_POINT object \param x BIGNUM for the x-coordinate \param y BIGNUM for the y-coordinate \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Sets the x9.62 compressed coordinates of a EC_POINT over GFp \param group underlying EC_GROUP object \param p EC_POINT object \param x BIGNUM with x-coordinate \param y_bit integer with the y-Bit (either 0 or 1) \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Sets the affine coordinates of a EC_POINT over GF2m \param group underlying EC_GROUP object \param p EC_POINT object \param x BIGNUM with the x-coordinate \param y BIGNUM with the y-coordinate \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Gets the affine coordinates of a EC_POINT over GF2m \param group underlying EC_GROUP object \param p EC_POINT object \param x BIGNUM for the x-coordinate \param y BIGNUM for the y-coordinate \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Sets the x9.62 compressed coordinates of a EC_POINT over GF2m \param group underlying EC_GROUP object \param p EC_POINT object \param x BIGNUM with x-coordinate \param y_bit integer with the y-Bit (either 0 or 1) \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Encodes a EC_POINT object to a octet string \param group underlying EC_GROUP object \param p EC_POINT object \param form point conversion form \param buf memory buffer for the result. If NULL the function returns required buffer size. \param len length of the memory buffer \param ctx BN_CTX object (optional) \return the length of the encoded octet string or 0 if an error occurred

Decodes a EC_POINT from a octet string \param group underlying EC_GROUP object \param p EC_POINT object \param buf memory buffer with the encoded ec point \param len length of the encoded ec point \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Encodes an EC_POINT object to an allocated octet string \param group underlying EC_GROUP object \param point EC_POINT object \param form point conversion form \param pbuf returns pointer to allocated buffer \param ctx BN_CTX object (optional) \return the length of the encoded octet string or 0 if an error occurred

other interfaces to point2oct/oct2point:



functions for doing EC_POINT arithmetic



Computes the sum of two EC_POINT \param group underlying EC_GROUP object \param r EC_POINT object for the result (r = a + b) \param a EC_POINT object with the first summand \param b EC_POINT object with the second summand \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Computes the double of a EC_POINT \param group underlying EC_GROUP object \param r EC_POINT object for the result (r = 2 a) \param a EC_POINT object \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Computes the inverse of a EC_POINT \param group underlying EC_GROUP object \param a EC_POINT object to be inverted (it's used for the result as well) \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Checks whether the point is the neutral element of the group \param group the underlying EC_GROUP object \param p EC_POINT object \return 1 if the point is the neutral element and 0 otherwise

Checks whether the point is on the curve \param group underlying EC_GROUP object \param point EC_POINT object to check \param ctx BN_CTX object (optional) \return 1 if the point is on the curve, 0 if not, or -1 on error

Compares two EC_POINTs \param group underlying EC_GROUP object \param a first EC_POINT object \param b second EC_POINT object \param ctx BN_CTX object (optional) \return 1 if the points are not equal, 0 if they are, or -1 on error

Computes r = generator n + sum_{i=0}^{num-1} p[i] m[i] \param group underlying EC_GROUP object \param r EC_POINT object for the result \param n BIGNUM with the multiplier for the group generator (optional) \param num number further summands \param p array of size num of EC_POINT objects \param m array of size num of BIGNUM objects \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Computes r = generator n + q m \param group underlying EC_GROUP object \param r EC_POINT object for the result \param n BIGNUM with the multiplier for the group generator (optional) \param q EC_POINT object with the first factor of the second summand \param m BIGNUM with the second factor of the second summand \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Stores multiples of generator for faster point multiplication \param group EC_GROUP object \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Reports whether a precomputation has been done \param group EC_GROUP object \return 1 if a pre-computation has been done and 0 otherwise



ASN1 stuff



EC_GROUP_get_basis_type() returns the NID of the basis type used to represent the field elements



EC_KEY functions



some values for the encoding_flag

some values for the flags field

Creates a new EC_KEY object. \return EC_KEY object or NULL if an error occurred.

Creates a new EC_KEY object using a named curve as underlying EC_GROUP object. \param nid NID of the named curve. \return EC_KEY object or NULL if an error occurred.

Frees a EC_KEY object. \param key EC_KEY object to be freed.

Copies a EC_KEY object. \param dst destination EC_KEY object \param src src EC_KEY object \return dst or NULL if an error occurred.

Creates a new EC_KEY object and copies the content from src to it. \param src the source EC_KEY object \return newly created EC_KEY object or NULL if an error occurred.

Increases the internal reference count of a EC_KEY object. \param key EC_KEY object \return 1 on success and 0 if an error occurred.

Returns the ENGINE object of a EC_KEY object \param key EC_KEY object \return the ENGINE object (possibly NULL).

Returns the EC_GROUP object of a EC_KEY object \param key EC_KEY object \return the EC_GROUP object (possibly NULL).

Sets the EC_GROUP of a EC_KEY object. \param key EC_KEY object \param group EC_GROUP to use in the EC_KEY object (note: the EC_KEY object will use an own copy of the EC_GROUP). \return 1 on success and 0 if an error occurred.

Returns the private key of a EC_KEY object. \param key EC_KEY object \return a BIGNUM with the private key (possibly NULL).

Sets the private key of a EC_KEY object. \param key EC_KEY object \param prv BIGNUM with the private key (note: the EC_KEY object will use an own copy of the BIGNUM). \return 1 on success and 0 if an error occurred.

Returns the public key of a EC_KEY object. \param key the EC_KEY object \return a EC_POINT object with the public key (possibly NULL)

Sets the public key of a EC_KEY object. \param key EC_KEY object \param pub EC_POINT object with the public key (note: the EC_KEY object will use an own copy of the EC_POINT object). \return 1 on success and 0 if an error occurred.

wrapper functions for the underlying EC_GROUP object

Creates a table of pre-computed multiples of the generator to accelerate further EC_KEY operations. \param key EC_KEY object \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred.

Creates a new ec private (and optional a new public) key. \param key EC_KEY object \return 1 on success and 0 if an error occurred.

Verifies that a private and/or public key is valid. \param key the EC_KEY object \return 1 on success and 0 otherwise.

Indicates if an EC_KEY can be used for signing. \param eckey the EC_KEY object \return 1 if can can sign and 0 otherwise.

Sets a public key from affine coordinates performing necessary NIST PKV tests. \param key the EC_KEY object \param x public key x coordinate \param y public key y coordinate \return 1 on success and 0 otherwise.

Encodes an EC_KEY public key to an allocated octet string \param key key to encode \param form point conversion form \param pbuf returns pointer to allocated buffer \param ctx BN_CTX object (optional) \return the length of the encoded octet string or 0 if an error occurred

Decodes a EC_KEY public key from a octet string \param key key to decode \param buf memory buffer with the encoded ec point \param len length of the encoded ec point \param ctx BN_CTX object (optional) \return 1 on success and 0 if an error occurred

Decodes an EC_KEY private key from an octet string \param key key to decode \param buf memory buffer with the encoded private key \param len length of the encoded key \return 1 on success and 0 if an error occurred

Encodes a EC_KEY private key to an octet string \param key key to encode \param buf memory buffer for the result. If NULL the function returns required buffer size. \param len length of the memory buffer \return the length of the encoded octet string or 0 if an error occurred

Encodes an EC_KEY private key to an allocated octet string \param eckey key to encode \param pbuf returns pointer to allocated buffer \return the length of the encoded octet string or 0 if an error occurred



de- and encoding functions for SEC1 ECPrivateKey



Decodes a private key from a memory buffer. \param key a pointer to a EC_KEY object which should be used (or NULL) \param in pointer to memory with the DER encoded private key \param len length of the DER encoded private key \return the decoded private key or NULL if an error occurred.

Encodes a private key object and stores the result in a buffer. \param key the EC_KEY object to encode \param out the buffer for the result (if NULL the function returns number of bytes needed). \return 1 on success and 0 if an error occurred.



de- and encoding functions for EC parameters



Decodes ec parameter from a memory buffer. \param key a pointer to a EC_KEY object which should be used (or NULL) \param in pointer to memory with the DER encoded ec parameters \param len length of the DER encoded ec parameters \return a EC_KEY object with the decoded parameters or NULL if an error occurred.

Encodes ec parameter and stores the result in a buffer. \param key the EC_KEY object with ec parameters to encode \param out the buffer for the result (if NULL the function returns number of bytes needed). \return 1 on success and 0 if an error occurred.



de- and encoding functions for EC public key

(octet string, not DER -- hence 'o2i' and 'i2o')



Decodes a ec public key from a octet string. \param key a pointer to a EC_KEY object which should be used \param in memory buffer with the encoded public key \param len length of the encoded public key \return EC_KEY object with decoded public key or NULL if an error occurred.

Encodes a ec public key in an octet string. \param key the EC_KEY object with the public key \param out the buffer for the result (if NULL the function returns number of bytes needed). \return 1 on success and 0 if an error occurred

Prints out the ec parameters on human readable form. \param bp BIO object to which the information is printed \param key EC_KEY object \return 1 on success and 0 if an error occurred

Prints out the contents of a EC_KEY object \param bp BIO object to which the information is printed \param key EC_KEY object \param off line offset \return 1 on success and 0 if an error occurred

Prints out the ec parameters on human readable form. \param fp file descriptor to which the information is printed \param key EC_KEY object \return 1 on success and 0 if an error occurred

Prints out the contents of a EC_KEY object \param fp file descriptor to which the information is printed \param key EC_KEY object \param off line offset \return 1 on success and 0 if an error occurred

Allocates and initialize a ECDSA_SIG structure \return pointer to a ECDSA_SIG structure or NULL if an error occurred

frees a ECDSA_SIG structure \param sig pointer to the ECDSA_SIG structure

DER encode content of ECDSA_SIG object (note: this function modifies pp (pp += length of the DER encoded signature)). \param sig pointer to the ECDSA_SIG object \param pp pointer to a unsigned char pointer for the output or NULL \return the length of the DER encoded ECDSA_SIG object or 0

Decodes a DER encoded ECDSA signature (note: this function changes pp (pp += len)). \param sig pointer to ECDSA_SIG pointer (may be NULL) \param pp memory buffer with the DER encoded signature \param len length of the buffer \return pointer to the decoded ECDSA_SIG structure (or NULL)

Accessor for r and s fields of ECDSA_SIG \param sig pointer to ECDSA_SIG pointer \param pr pointer to BIGNUM pointer for r (may be NULL) \param ps pointer to BIGNUM pointer for s (may be NULL)

Setter for r and s fields of ECDSA_SIG \param sig pointer to ECDSA_SIG pointer \param r pointer to BIGNUM for r (may be NULL) \param s pointer to BIGNUM for s (may be NULL)

Computes the ECDSA signature of the given hash value using the supplied private key and returns the created signature. \param dgst pointer to the hash value \param dgst_len length of the hash value \param eckey EC_KEY object containing a private EC key \return pointer to a ECDSA_SIG structure or NULL if an error occurred

Computes ECDSA signature of a given hash value using the supplied private key (note: sig must point to ECDSA_size(eckey) bytes of memory). \param dgst pointer to the hash value to sign \param dgstlen length of the hash value \param kinv BIGNUM with a pre-computed inverse k (optional) \param rp BIGNUM with a pre-computed rp value (optional), see ECDSA_sign_setup \param eckey EC_KEY object containing a private EC key \return pointer to a ECDSA_SIG structure or NULL if an error occurred

Verifies that the supplied signature is a valid ECDSA signature of the supplied hash value using the supplied public key. \param dgst pointer to the hash value \param dgst_len length of the hash value \param sig ECDSA_SIG structure \param eckey EC_KEY object containing a public EC key \return 1 if the signature is valid, 0 if the signature is invalid and -1 on error

Precompute parts of the signing operation \param eckey EC_KEY object containing a private EC key \param ctx BN_CTX object (optional) \param kinv BIGNUM pointer for the inverse of k \param rp BIGNUM pointer for x coordinate of k generator \return 1 on success and 0 otherwise

Computes ECDSA signature of a given hash value using the supplied private key (note: sig must point to ECDSA_size(eckey) bytes of memory). \param type this parameter is ignored \param dgst pointer to the hash value to sign \param dgstlen length of the hash value \param sig memory for the DER encoded created signature \param siglen pointer to the length of the returned signature \param eckey EC_KEY object containing a private EC key \return 1 on success and 0 otherwise

Computes ECDSA signature of a given hash value using the supplied private key (note: sig must point to ECDSA_size(eckey) bytes of memory). \param type this parameter is ignored \param dgst pointer to the hash value to sign \param dgstlen length of the hash value \param sig buffer to hold the DER encoded signature \param siglen pointer to the length of the returned signature \param kinv BIGNUM with a pre-computed inverse k (optional) \param rp BIGNUM with a pre-computed rp value (optional), see ECDSA_sign_setup \param eckey EC_KEY object containing a private EC key \return 1 on success and 0 otherwise

Verifies that the given signature is valid ECDSA signature of the supplied hash value using the specified public key. \param type this parameter is ignored \param dgst pointer to the hash value \param dgstlen length of the hash value \param sig pointer to the DER encoded signature \param siglen length of the DER encoded signature \param eckey EC_KEY object containing a public EC key \return 1 if the signature is valid, 0 if the signature is invalid and -1 on error

Returns the maximum length of the DER encoded signature \param eckey EC_KEY object \return numbers of bytes required for the DER encoded signature



EC_KEY_METHOD constructors, destructors, writers and accessors



KDF types

www.openssl.org/source/license.html

License

C

s order/cofactor of a EC_GROUP object. * \param group EC_GROUP object * \param generator EC_POINT object with the generator. * \param order the order of the group generated by the generator. * \param cofactor the index of the sub-group generated by the generator * in the group of all points on the elliptic curve. * \return 1 on success and 0 if an error occurred */ int EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator, const BIGNUM *order, const BIGNUM *cofactor); /** Returns the generator of a EC_GROUP object. * \param group EC_GROUP object * \return the currently used generator (possibly NULL). */ const EC_POINT *EC_GROUP_get0_generator(const EC_GROUP *group); /** Returns the montgomery data for order(Generator) * \param group EC_GROUP object * \return the currently used montgomery data (possibly NULL). */ BN_MONT_CTX *EC_GROUP_get_mont_data(const EC_GROUP *group); /** Gets the order of a EC_GROUP * \param group EC_GROUP object * \param order BIGNUM to which the order is copied * \param ctx unused * \return 1 on success and 0 if an error occurred */ int EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx); /** Gets the order of an EC_GROUP * \param group EC_GROUP object * \return the group order */ const BIGNUM *EC_GROUP_get0_order(const EC_GROUP *group); /** Gets the number of bits of the order of an EC_GROUP * \param group EC_GROUP object * \return number of bits of group order. */ int EC_GROUP_order_bits(const EC_GROUP *group); /** Gets the cofactor of a EC_GROUP * \param group EC_GROUP object * \param cofactor BIGNUM to which the cofactor is copied * \param ctx unused * \return 1 on success and 0 if an error occurred */ int EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor, BN_CTX *ctx); /** Gets the cofactor of an EC_GROUP * \param group EC_GROUP object * \return the group cofactor */ const BIGNUM *EC_GROUP_get0_cofactor(const EC_GROUP *group); /** Sets the name of a EC_GROUP object * \param group EC_GROUP object * \param nid NID of the curve name OID */ void EC_GROUP_set_curve_name(EC_GROUP *group, int nid); /** Returns the curve name of a EC_GROUP object * \param group EC_GROUP object * \return NID of the curve name OID or 0 if not set. */ int EC_GROUP_get_curve_name(const EC_GROUP *group); void EC_GROUP_set_asn1_flag(EC_GROUP *group, int flag); int EC_GROUP_get_asn1_flag(const EC_GROUP *group); void EC_GROUP_set_point_conversion_form(EC_GROUP *group, point_conversion_form_t form); point_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP *); unsigned char *EC_GROUP_get0_seed(const EC_GROUP *x); size_t EC_GROUP_get_seed_len(const EC_GROUP *); size_t EC_GROUP_set_seed(EC_GROUP *, const unsigned char *, size_t len); /** Sets the parameter of a ec over GFp defined by y^2 = x^3 + a*x + b * \param group EC_GROUP object * \param p BIGNUM with the prime number * \param a BIGNUM with parameter a of the equation * \param b BIGNUM with parameter b of the equation * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_GROUP_set_curve_GFp(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx); /** Gets the parameter of the ec over GFp defined by y^2 = x^3 + a*x + b * \param group EC_GROUP object * \param p BIGNUM for the prime number * \param a BIGNUM for parameter a of the equation * \param b BIGNUM for parameter b of the equation * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_GROUP_get_curve_GFp(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx); # ifndef OPENSSL_NO_EC2M /** Sets the parameter of a ec over GF2m defined by y^2 + x*y = x^3 + a*x^2 + b * \param group EC_GROUP object * \param p BIGNUM with the polynomial defining the underlying field * \param a BIGNUM with parameter a of the equation * \param b BIGNUM with parameter b of the equation * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_GROUP_set_curve_GF2m(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx); /** Gets the parameter of the ec over GF2m defined by y^2 + x*y = x^3 + a*x^2 + b * \param group EC_GROUP object * \param p BIGNUM for the polynomial defining the underlying field * \param a BIGNUM for parameter a of the equation * \param b BIGNUM for parameter b of the equation * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_GROUP_get_curve_GF2m(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *ctx); # endif /** Returns the number of bits needed to represent a field element * \param group EC_GROUP object * \return number of bits needed to represent a field element */ int EC_GROUP_get_degree(const EC_GROUP *group); /** Checks whether the parameter in the EC_GROUP define a valid ec group * \param group EC_GROUP object * \param ctx BN_CTX object (optional) * \return 1 if group is a valid ec group and 0 otherwise */ int EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx); /** Checks whether the discriminant of the elliptic curve is zero or not * \param group EC_GROUP object * \param ctx BN_CTX object (optional) * \return 1 if the discriminant is not zero and 0 otherwise */ int EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx); /** Compares two EC_GROUP objects * \param a first EC_GROUP object * \param b second EC_GROUP object * \param ctx BN_CTX object (optional) * \return 0 if the groups are equal, 1 if not, or -1 on error */ int EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx); /* * EC_GROUP_new_GF*() calls EC_GROUP_new() and EC_GROUP_set_GF*() after * choosing an appropriate EC_METHOD */ /** Creates a new EC_GROUP object with the specified parameters defined * over GFp (defined by the equation y^2 = x^3 + a*x + b) * \param p BIGNUM with the prime number * \param a BIGNUM with the parameter a of the equation * \param b BIGNUM with the parameter b of the equation * \param ctx BN_CTX object (optional) * \return newly created EC_GROUP object with the specified parameters */ EC_GROUP *EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx); # ifndef OPENSSL_NO_EC2M /** Creates a new EC_GROUP object with the specified parameters defined * over GF2m (defined by the equation y^2 + x*y = x^3 + a*x^2 + b) * \param p BIGNUM with the polynomial defining the underlying field * \param a BIGNUM with the parameter a of the equation * \param b BIGNUM with the parameter b of the equation * \param ctx BN_CTX object (optional) * \return newly created EC_GROUP object with the specified parameters */ EC_GROUP *EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx); # endif /** Creates a EC_GROUP object with a curve specified by a NID * \param nid NID of the OID of the curve name * \return newly created EC_GROUP object with specified curve or NULL * if an error occurred */ EC_GROUP *EC_GROUP_new_by_curve_name(int nid); /** Creates a new EC_GROUP object from an ECPARAMETERS object * \param params pointer to the ECPARAMETERS object * \return newly created EC_GROUP object with specified curve or NULL * if an error occurred */ EC_GROUP *EC_GROUP_new_from_ecparameters(const ECPARAMETERS *params); /** Creates an ECPARAMETERS object for the the given EC_GROUP object. * \param group pointer to the EC_GROUP object * \param params pointer to an existing ECPARAMETERS object or NULL * \return pointer to the new ECPARAMETERS object or NULL * if an error occurred. */ ECPARAMETERS *EC_GROUP_get_ecparameters(const EC_GROUP *group, ECPARAMETERS *params); /** Creates a new EC_GROUP object from an ECPKPARAMETERS object * \param params pointer to an existing ECPKPARAMETERS object, or NULL * \return newly created EC_GROUP object with specified curve, or NULL * if an error occurred */ EC_GROUP *EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS *params); /** Creates an ECPKPARAMETERS object for the the given EC_GROUP object. * \param group pointer to the EC_GROUP object * \param params pointer to an existing ECPKPARAMETERS object or NULL * \return pointer to the new ECPKPARAMETERS object or NULL * if an error occurred. */ ECPKPARAMETERS *EC_GROUP_get_ecpkparameters(const EC_GROUP *group, ECPKPARAMETERS *params); /********************************************************************/ /* handling of internal curves */ /********************************************************************/ typedef struct { int nid; const char *comment; } EC_builtin_curve; /* * EC_builtin_curves(EC_builtin_curve *r, size_t size) returns number of all * available curves or zero if a error occurred. In case r is not zero, * nitems EC_builtin_curve structures are filled with the data of the first * nitems internal groups */ size_t EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems); const char *EC_curve_nid2nist(int nid); int EC_curve_nist2nid(const char *name); /********************************************************************/ /* EC_POINT functions */ /********************************************************************/ /** Creates a new EC_POINT object for the specified EC_GROUP * \param group EC_GROUP the underlying EC_GROUP object * \return newly created EC_POINT object or NULL if an error occurred */ EC_POINT *EC_POINT_new(const EC_GROUP *group); /** Frees a EC_POINT object * \param point EC_POINT object to be freed */ void EC_POINT_free(EC_POINT *point); /** Clears and frees a EC_POINT object * \param point EC_POINT object to be cleared and freed */ void EC_POINT_clear_free(EC_POINT *point); /** Copies EC_POINT object * \param dst destination EC_POINT object * \param src source EC_POINT object * \return 1 on success and 0 if an error occurred */ int EC_POINT_copy(EC_POINT *dst, const EC_POINT *src); /** Creates a new EC_POINT object and copies the content of the supplied * EC_POINT * \param src source EC_POINT object * \param group underlying the EC_GROUP object * \return newly created EC_POINT object or NULL if an error occurred */ EC_POINT *EC_POINT_dup(const EC_POINT *src, const EC_GROUP *group); /** Returns the EC_METHOD used in EC_POINT object * \param point EC_POINT object * \return the EC_METHOD used */ const EC_METHOD *EC_POINT_method_of(const EC_POINT *point); /** Sets a point to infinity (neutral element) * \param group underlying EC_GROUP object * \param point EC_POINT to set to infinity * \return 1 on success and 0 if an error occurred */ int EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point); /** Sets the jacobian projective coordinates of a EC_POINT over GFp * \param group underlying EC_GROUP object * \param p EC_POINT object * \param x BIGNUM with the x-coordinate * \param y BIGNUM with the y-coordinate * \param z BIGNUM with the z-coordinate * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, const BIGNUM *z, BN_CTX *ctx); /** Gets the jacobian projective coordinates of a EC_POINT over GFp * \param group underlying EC_GROUP object * \param p EC_POINT object * \param x BIGNUM for the x-coordinate * \param y BIGNUM for the y-coordinate * \param z BIGNUM for the z-coordinate * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BIGNUM *z, BN_CTX *ctx); /** Sets the affine coordinates of a EC_POINT over GFp * \param group underlying EC_GROUP object * \param p EC_POINT object * \param x BIGNUM with the x-coordinate * \param y BIGNUM with the y-coordinate * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, BN_CTX *ctx); /** Gets the affine coordinates of a EC_POINT over GFp * \param group underlying EC_GROUP object * \param p EC_POINT object * \param x BIGNUM for the x-coordinate * \param y BIGNUM for the y-coordinate * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx); /** Sets the x9.62 compressed coordinates of a EC_POINT over GFp * \param group underlying EC_GROUP object * \param p EC_POINT object * \param x BIGNUM with x-coordinate * \param y_bit integer with the y-Bit (either 0 or 1) * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, int y_bit, BN_CTX *ctx); # ifndef OPENSSL_NO_EC2M /** Sets the affine coordinates of a EC_POINT over GF2m * \param group underlying EC_GROUP object * \param p EC_POINT object * \param x BIGNUM with the x-coordinate * \param y BIGNUM with the y-coordinate * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, const BIGNUM *y, BN_CTX *ctx); /** Gets the affine coordinates of a EC_POINT over GF2m * \param group underlying EC_GROUP object * \param p EC_POINT object * \param x BIGNUM for the x-coordinate * \param y BIGNUM for the y-coordinate * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *group, const EC_POINT *p, BIGNUM *x, BIGNUM *y, BN_CTX *ctx); /** Sets the x9.62 compressed coordinates of a EC_POINT over GF2m * \param group underlying EC_GROUP object * \param p EC_POINT object * \param x BIGNUM with x-coordinate * \param y_bit integer with the y-Bit (either 0 or 1) * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *group, EC_POINT *p, const BIGNUM *x, int y_bit, BN_CTX *ctx); # endif /** Encodes a EC_POINT object to a octet string * \param group underlying EC_GROUP object * \param p EC_POINT object * \param form point conversion form * \param buf memory buffer for the result. If NULL the function returns * required buffer size. * \param len length of the memory buffer * \param ctx BN_CTX object (optional) * \return the length of the encoded octet string or 0 if an error occurred */ size_t EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *p, point_conversion_form_t form, unsigned char *buf, size_t len, BN_CTX *ctx); /** Decodes a EC_POINT from a octet string * \param group underlying EC_GROUP object * \param p EC_POINT object * \param buf memory buffer with the encoded ec point * \param len length of the encoded ec point * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *p, const unsigned char *buf, size_t len, BN_CTX *ctx); /** Encodes an EC_POINT object to an allocated octet string * \param group underlying EC_GROUP object * \param point EC_POINT object * \param form point conversion form * \param pbuf returns pointer to allocated buffer * \param ctx BN_CTX object (optional) * \return the length of the encoded octet string or 0 if an error occurred */ size_t EC_POINT_point2buf(const EC_GROUP *group, const EC_POINT *point, point_conversion_form_t form, unsigned char **pbuf, BN_CTX *ctx); /* other interfaces to point2oct/oct2point: */ BIGNUM *EC_POINT_point2bn(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BIGNUM *, BN_CTX *); EC_POINT *EC_POINT_bn2point(const EC_GROUP *, const BIGNUM *, EC_POINT *, BN_CTX *); char *EC_POINT_point2hex(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BN_CTX *); EC_POINT *EC_POINT_hex2point(const EC_GROUP *, const char *, EC_POINT *, BN_CTX *); /********************************************************************/ /* functions for doing EC_POINT arithmetic */ /********************************************************************/ /** Computes the sum of two EC_POINT * \param group underlying EC_GROUP object * \param r EC_POINT object for the result (r = a + b) * \param a EC_POINT object with the first summand * \param b EC_POINT object with the second summand * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_POINT_add(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a, const EC_POINT *b, BN_CTX *ctx); /** Computes the double of a EC_POINT * \param group underlying EC_GROUP object * \param r EC_POINT object for the result (r = 2 * a) * \param a EC_POINT object * \param ctx BN_CTX object (optional) * \return 1 on success and 0 if an error occurred */ int EC_POINT_dbl(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a, BN_CTX *ctx); /** Computes the inverse of a EC_POINT * \param group underlying EC_GROUP object * \param a EC_POINT object to be inverted (it

o2i

i2o

0x10100000L

0x04

0x000

0x001

0x001

0x002

0x1

0x2

0x1000

0x520

