Copyright 2010-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Copyright 2011 Google Inc. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

A 64-bit implementation of the NIST P-224 elliptic curve point multiplication Inspired by Daniel J. Bernstein's public domain nistp224 implementation and Adam Langley's public domain 64-bit C implementation of curve25519

even with gcc, the typedef won't work for 32-bit platforms

nonstandard; implemented by gcc on 64-bit platforms



INTERNAL REPRESENTATION OF FIELD ELEMENTS Field elements are represented as a_0 + 2^56a_1 + 2^112a_2 + 2^168a_3 using 64-bit coefficients called 'limbs', and sometimes (for multiplication results) as b_0 + 2^56b_1 + 2^112b_2 + 2^168b_3 + 2^224b_4 + 2^280b_5 + 2^336b_6 using 128-bit coefficients called 'widelimbs'. A 4-limb representation is an 'felem'; a 7-widelimb representation is a 'widefelem'. Even within felems, bits of adjacent limbs overlap, and we don't always reduce the representations: we ensure that inputs to each felem multiplication satisfy a_i < 2^60, so outputs satisfy b_i < 42^602^60, and fit into a 128-bit word without overflow. The coefficients are then again partially reduced to obtain an felem satisfying a_i < 2^57. We only reduce to the unique minimal representation at the end of the computation.

Field element represented as a byte arrary. 288 = 224 bits is also the group order size for the elliptic curve, and we also use this type for scalars for point multiplication.

p

a

b

x

y

Precomputed multiples of the standard generator Points are given in coordinates (X, Y, Z) where Z normally is 1 (0 for the point at infinity). For each field element, slice a_0 is word 0, etc. The table has 2 16 elements, starting with the following: index | bits | point ------+---------+------------------------------ 0 | 0 0 0 0 | 0G 1 | 0 0 0 1 | 1G 2 | 0 0 1 0 | 2^56G 3 | 0 0 1 1 | (2^56 + 1)G 4 | 0 1 0 0 | 2^112G 5 | 0 1 0 1 | (2^112 + 1)G 6 | 0 1 1 0 | (2^112 + 2^56)G 7 | 0 1 1 1 | (2^112 + 2^56 + 1)G 8 | 1 0 0 0 | 2^168G 9 | 1 0 0 1 | (2^168 + 1)G 10 | 1 0 1 0 | (2^168 + 2^56)G 11 | 1 0 1 1 | (2^168 + 2^56 + 1)G 12 | 1 1 0 0 | (2^168 + 2^112)G 13 | 1 1 0 1 | (2^168 + 2^112 + 1)G 14 | 1 1 1 0 | (2^168 + 2^112 + 2^56)G 15 | 1 1 1 1 | (2^168 + 2^112 + 2^56 + 1)G followed by a copy of this with each element multiplied by 2^28. The reason for this is so that we can clock bits into four different locations when doing simple scalar multiplies against the base point, and then another four locations using the second 16 elements.

Precomputation for the group generator.

point_set_compressed_coordinates

point2oct

oct2point

field_div

field_encode

field_decode

field_set_to_one

set private

keycopy

keyfinish

Helper functions to convert field elements to/from internal representation

To preserve endianness when using BN_bn2bin and BN_bin2bn

From OpenSSL BIGNUM to internal representation

BN_bn2bin eats leading zeroes

From internal representation to OpenSSL BIGNUM



FIELD OPERATIONS Field operations, using the internal representation of field elements. NB! These operations are specific to our point multiplication and cannot be expected to be correct in general - e.g., multiplication with a large scalar will cause an overflow.

Sum two field elements: out += in

Get negative value: out = -in

Assumes in[i] < 2^57

Set to 0 mod 2^224-2^96+1 to ensure out > in

Subtract field elements: out -= in

Assumes in[i] < 2^57

Add 0 mod 2^224-2^96+1 to ensure out > in

Subtract in unreduced 128-bit mode: out -= in

Assumes in[i] < 2^119

Add 0 mod 2^224-2^96+1 to ensure out > in

Subtract in mixed mode: out128 -= in64

in[i] < 2^63

Add 0 mod 2^224-2^96+1 to ensure out > in

Multiply a field element by a scalar: out = out scalar The scalars we actually use are small, so results fit without overflow

Multiply an unreduced field element by a scalar: out = out scalar The scalars we actually use are small, so results fit without overflow

Square a field element: out = in^2

Multiply two field elements: out = in1 in2

Reduce seven 128-bit coefficients to four 64-bit coefficients. Requires in[i] < 2^126, ensures out[0] < 2^56, out[1] < 2^56, out[2] < 2^56, out[3] <= 2^56 + 2^16

Add 0 mod 2^224-2^96+1 to ensure all differences are positive

Eliminate in[4], in[5], in[6]

Carry 2 -> 3 -> 4

Now output[2] < 2^56, output[3] < 2^56, output[4] < 2^72

Eliminate output[4]

output[2] < 2^56 + 2^56 = 2^57

Carry 0 -> 1 -> 2 -> 3

output[2] < 2^57 + 2^72

output[3] <= 2^56 + 2^16

out[0] < 2^56, out[1] < 2^56, out[2] < 2^56, out[3] <= 2^56 + 2^16 (due to final carry), so out < 2p

Reduce to unique minimal representation. Requires 0 <= in < 2p (always call felem_reduce first)

0 <= in < 2p, p = 2^224 - 2^96 + 1

if in > p , reduce in = in - 2^224 + 2^96 - 1

Case 1: a = 1 iff in >= 2^224

Case 2: a = 0 iff p <= in < 2^224, i.e., the high 128 bits are all 1 and the lower part is non-zero

turn a into an all-one mask (if a = 0) or an all-zero mask

subtract 2^224 - 2^96 + 1 if a is all-one

eliminate negative coefficients: if tmp[0] is negative, tmp[1] must be non-zero, so we only need one step

carry 1 -> 2 -> 3

Now 0 <= out < p

Zero-check: returns 1 if input is 0, and 0 otherwise. We know that field elements are reduced to in < 2^225, so we only need to check three cases: 0, 2^224 - 2^96 + 1, and 2^225 - 2^97 + 2

Invert a field element

Computation chain copied from djb's code

2

2^2 - 1

2^3 - 2

2^3 - 1

2^4 - 2

2^5 - 4

2^6 - 8

2^6 - 1

2^7 - 2

2^12 - 2^6

2^12 - 1

2^13 - 2

2^24 - 2^12

2^24 - 1

2^25 - 2

2^48 - 2^24

2^48 - 1

2^49 - 2

2^96 - 2^48

2^96 - 1

2^97 - 2

2^120 - 2^24

2^120 - 1

2^126 - 2^6

2^126 - 1

2^127 - 2

2^127 - 1

2^224 - 2^97

2^224 - 2^96 - 1

Copy in constant time: if icopy == 1, copy in to out, if icopy == 0, copy out to itself.

icopy is a (64-bit) 0 or 1, so copy is either all-zero or all-one



ELLIPTIC CURVE POINT OPERATIONS Points are represented in Jacobian projective coordinates: (X, Y, Z) corresponds to the affine point (X/Z^2, Y/Z^3), or to the point at infinity if Z == 0.

Double an elliptic curve point: (X', Y', Z') = 2 (X, Y, Z), where X' = (3 (X - Z^2) (X + Z^2))^2 - 8 X Y^2 Y' = 3 (X - Z^2) (X + Z^2) (4 X Y^2 - X') - 8 Y^2 Z' = (Y + Z)^2 - Y^2 - Z^2 = 2 Y Z Outputs can equal corresponding inputs, i.e., x_out == x_in is allowed, while x_out == y_in is not (maybe this works, but it's not tested).

delta = z^2

gamma = y^2

beta = xgamma

alpha = 3(x-delta)(x+delta)

ftmp[i] < 2^57 + 2^58 + 2 < 2^59

ftmp2[i] < 2^57 + 2^57 = 2^58

ftmp2[i] < 3 2^58 < 2^60

tmp[i] < 2^60 2^59 4 = 2^121

x' = alpha^2 - 8beta

tmp[i] < 4 2^57 2^57 = 2^116

ftmp[i] < 8 2^57 = 2^60

tmp[i] < 2^116 + 2^64 + 8 < 2^117

z' = (y + z)^2 - gamma - delta

delta[i] < 2^57 + 2^57 = 2^58

ftmp[i] < 2^57 + 2^57 = 2^58

tmp[i] < 4 2^58 2^58 = 2^118

tmp[i] < 2^118 + 2^64 + 8 < 2^119

y' = alpha(4beta - x') - 8gamma^2

beta[i] < 4 2^57 = 2^59

beta[i] < 2^59 + 2^58 + 2 < 2^60

tmp[i] < 4 2^57 2^60 = 2^119

tmp2[i] < 4 2^57 2^57 = 2^116

tmp2[i] < 8 2^116 = 2^119

tmp[i] < 2^119 + 2^120 < 2^121

Add two elliptic curve points: (X_1, Y_1, Z_1) + (X_2, Y_2, Z_2) = (X_3, Y_3, Z_3), where X_3 = (Z_1^3 Y_2 - Z_2^3 Y_1)^2 - (Z_1^2 X_2 - Z_2^2 X_1)^3 - 2 Z_2^2 X_1 (Z_1^2 X_2 - Z_2^2 X_1)^2 Y_3 = (Z_1^3 Y_2 - Z_2^3 Y_1) (Z_2^2 X_1 (Z_1^2 X_2 - Z_2^2 X_1)^2 - X_3) - Z_2^3 Y_1 (Z_1^2 X_2 - Z_2^2 X_1)^3 Z_3 = (Z_1^2 X_2 - Z_2^2 X_1) (Z_1 Z_2) This runs faster if 'mixed' is set, which requires Z_2 = 1 or Z_2 = 0.

This function is not entirely constant-time: it includes a branch for checking whether the two input points are equal, (while not equal to the point at infinity). This case never happens during single point multiplication, so there is no timing leak for ECDH or ECDSA signing.

ftmp2 = z2^2

ftmp4 = z2^3

ftmp4 = z2^3y1

ftmp2 = z2^2x1

We'll assume z2 = 1 (special case z2 = 0 is handled later)

ftmp4 = z2^3y1

ftmp2 = z2^2x1

ftmp = z1^2

ftmp3 = z1^3

tmp = z1^3y2

tmp[i] < 4 2^57 2^57 = 2^116

ftmp3 = z1^3y2 - z2^3y1

tmp[i] < 2^116 + 2^64 + 8 < 2^117

tmp = z1^2x2

tmp[i] < 4 2^57 2^57 = 2^116

ftmp = z1^2x2 - z2^2x1

tmp[i] < 2^116 + 2^64 + 8 < 2^117

the formulae are incorrect if the points are equal so we check for this and do doubling if this happens

In affine coordinates, (X_1, Y_1) == (X_2, Y_2)

ftmp5 = z1z2

special case z2 = 0 is handled later

z_out = (z1^2x2 - z2^2x1)(z1z2)

ftmp = (z1^2x2 - z2^2x1)^2

ftmp5 = (z1^2x2 - z2^2x1)^3

ftmp2 = z2^2x1(z1^2x2 - z2^2x1)^2

tmp = z2^3y1(z1^2x2 - z2^2x1)^3

tmp[i] < 4 2^57 2^57 = 2^116

tmp2 = (z1^3y2 - z2^3y1)^2

tmp2[i] < 4 2^57 2^57 < 2^116

tmp2 = (z1^3y2 - z2^3y1)^2 - (z1^2x2 - z2^2x1)^3

tmp2[i] < 2^116 + 2^64 + 8 < 2^117

ftmp5 = 2z2^2x1(z1^2x2 - z2^2x1)^2

ftmp5[i] < 2 2^57 = 2^58

x_out = (z1^3y2 - z2^3y1)^2 - (z1^2x2 - z2^2x1)^3 - 2z2^2x1(z1^2x2 - z2^2x1)^2

tmp2[i] < 2^117 + 2^64 + 8 < 2^118

ftmp2 = z2^2x1(z1^2x2 - z2^2x1)^2 - x_out

ftmp2[i] < 2^57 + 2^58 + 2 < 2^59

tmp2 = (z1^3y2 - z2^3y1)(z2^2x1(z1^2x2 - z2^2x1)^2 - x_out)

tmp2[i] < 4 2^57 2^59 = 2^118

y_out = (z1^3y2 - z2^3y1)(z2^2x1(z1^2x2 - z2^2x1)^2 - x_out) - z2^3y1(z1^2x2 - z2^2x1)^3

tmp2[i] < 2^118 + 2^120 < 2^121

the result (x_out, y_out, z_out) is incorrect if one of the inputs is the point at infinity, so we need to check for this separately

if point 1 is at infinity, copy point 2 to output, and vice versa

select_point selects the |idx|th point from a precomputation table and copies it to out. The pre_comp array argument should be size of |size| argument

get_bit returns the |i|th bit in |in|

Interleaved point multiplication using precomputed point multiples: The small point multiples 0P, 1P, ..., 16P are in pre_comp[], the scalars in scalars[]. If g_scalar is non-NULL, we also add this multiple of the generator, using certain (large) precomputed multiples in g_pre_comp. Output point (X, Y, Z) is stored in x_out, y_out, z_out

set nq to the point at infinity

Loop over all scalars msb-to-lsb, interleaving additions of multiples of the generator (two in each of the last 28 rounds) and additions of other points multiples (every 5th round).

save two point operations in the first round

double

add multiples of the generator

first, look 28 bits upwards

select the point to add, in constant time

value 1 below is argument for "mixed"

second, look at the current position

select the point to add, in constant time

mixed

do other additions every 5 doublings

loop over all scalars

select the point to add or subtract

(X, -Y, Z) is the negative point



FUNCTIONS TO MANAGE PRECOMPUTATION



OPENSSL EC_METHOD FUNCTIONS

Takes the Jacobian coordinates (X, Y, Z) of a point and returns (X', Y') = (X/Z^2, Y/Z^3)

num

num+1

Runs in constant time, unless an input is the point at infinity (which normally shouldn't happen).

Computes scalargenerator + \sum scalars[i]points[i], ignoring NULL values Result is stored in r (r can equal one of the inputs).

we have precomputation, try to use it

try to use the standard precomputation

get the generator from precomputation

precomputation matches generator

we don't have valid precomputation: treat the generator as a random point

unless we precompute multiples for just one or two points, converting those into affine form is time well spent

we treat NULL scalars as 0, and NULL points as points at infinity, i.e., they contribute nothing to the linear combination

the generator

the i^th point

reduce scalar to 0 <= scalar < 2^224

this is an unusual input, and we don't guarantee constant-timeness

precompute multiples

the scalar for the generator

reduce scalar to 0 <= scalar < 2^224

this is an unusual input, and we don't guarantee constant-timeness

do the multiplication with generator precomputation

do the multiplication without generator precomputation

reduce the output to its unique minimal representation

throw away old precomputation

get the generator

if the generator is the standard one, use built-in precomputation

compute 2^56G, 2^112G, 2^168G for the first table, 2^28G, 2^84G, 2^140G, 2^196G for the second one

g_pre_comp[i][0] is the point at infinity

the remaining multiples

2^56G + 2^112G resp. 2^84G + 2^140G

2^56G + 2^168G resp. 2^84G + 2^196G

2^112G + 2^168G resp. 2^140G + 2^196G

2^56G + 2^112G + 2^168G resp. 2^84G + 2^140G + 2^196G

odd multiples: add G resp. 2^28G

www.openssl.org/source/license.html

www.apache.org/licenses/LICENSE-2.0

License

License

AS IS

s public domain nistp224 implementation * and Adam Langley

ec_lcl.h

t work for 32-bit platforms */ typedef __uint128_t uint128_t; /* nonstandard; implemented by gcc on 64-bit * platforms */ # else # error "Need GCC 3.1 or later to define type uint128_t" # endif typedef uint8_t u8; typedef uint64_t u64; typedef int64_t s64; /******************************************************************************/ /*- * INTERNAL REPRESENTATION OF FIELD ELEMENTS * * Field elements are represented as a_0 + 2^56*a_1 + 2^112*a_2 + 2^168*a_3 * using 64-bit coefficients called

, * and sometimes (for multiplication results) as * b_0 + 2^56*b_1 + 2^112*b_2 + 2^168*b_3 + 2^224*b_4 + 2^280*b_5 + 2^336*b_6 * using 128-bit coefficients called

. * A 4-limb representation is an

; * a 7-widelimb representation is a

. * Even within felems, bits of adjacent limbs overlap, and we don

s code */ static void felem_inv(felem out, const felem in) { felem ftmp, ftmp2, ftmp3, ftmp4; widefelem tmp; unsigned i; felem_square(tmp, in); felem_reduce(ftmp, tmp); /* 2 */ felem_mul(tmp, in, ftmp); felem_reduce(ftmp, tmp); /* 2^2 - 1 */ felem_square(tmp, ftmp); felem_reduce(ftmp, tmp); /* 2^3 - 2 */ felem_mul(tmp, in, ftmp); felem_reduce(ftmp, tmp); /* 2^3 - 1 */ felem_square(tmp, ftmp); felem_reduce(ftmp2, tmp); /* 2^4 - 2 */ felem_square(tmp, ftmp2); felem_reduce(ftmp2, tmp); /* 2^5 - 4 */ felem_square(tmp, ftmp2); felem_reduce(ftmp2, tmp); /* 2^6 - 8 */ felem_mul(tmp, ftmp2, ftmp); felem_reduce(ftmp, tmp); /* 2^6 - 1 */ felem_square(tmp, ftmp); felem_reduce(ftmp2, tmp); /* 2^7 - 2 */ for (i = 0; i < 5; ++i) { /* 2^12 - 2^6 */ felem_square(tmp, ftmp2); felem_reduce(ftmp2, tmp); } felem_mul(tmp, ftmp2, ftmp); felem_reduce(ftmp2, tmp); /* 2^12 - 1 */ felem_square(tmp, ftmp2); felem_reduce(ftmp3, tmp); /* 2^13 - 2 */ for (i = 0; i < 11; ++i) { /* 2^24 - 2^12 */ felem_square(tmp, ftmp3); felem_reduce(ftmp3, tmp); } felem_mul(tmp, ftmp3, ftmp2); felem_reduce(ftmp2, tmp); /* 2^24 - 1 */ felem_square(tmp, ftmp2); felem_reduce(ftmp3, tmp); /* 2^25 - 2 */ for (i = 0; i < 23; ++i) { /* 2^48 - 2^24 */ felem_square(tmp, ftmp3); felem_reduce(ftmp3, tmp); } felem_mul(tmp, ftmp3, ftmp2); felem_reduce(ftmp3, tmp); /* 2^48 - 1 */ felem_square(tmp, ftmp3); felem_reduce(ftmp4, tmp); /* 2^49 - 2 */ for (i = 0; i < 47; ++i) { /* 2^96 - 2^48 */ felem_square(tmp, ftmp4); felem_reduce(ftmp4, tmp); } felem_mul(tmp, ftmp3, ftmp4); felem_reduce(ftmp3, tmp); /* 2^96 - 1 */ felem_square(tmp, ftmp3); felem_reduce(ftmp4, tmp); /* 2^97 - 2 */ for (i = 0; i < 23; ++i) { /* 2^120 - 2^24 */ felem_square(tmp, ftmp4); felem_reduce(ftmp4, tmp); } felem_mul(tmp, ftmp2, ftmp4); felem_reduce(ftmp2, tmp); /* 2^120 - 1 */ for (i = 0; i < 6; ++i) { /* 2^126 - 2^6 */ felem_square(tmp, ftmp2); felem_reduce(ftmp2, tmp); } felem_mul(tmp, ftmp2, ftmp); felem_reduce(ftmp, tmp); /* 2^126 - 1 */ felem_square(tmp, ftmp); felem_reduce(ftmp, tmp); /* 2^127 - 2 */ felem_mul(tmp, ftmp, in); felem_reduce(ftmp, tmp); /* 2^127 - 1 */ for (i = 0; i < 97; ++i) { /* 2^224 - 2^97 */ felem_square(tmp, ftmp); felem_reduce(ftmp, tmp); } felem_mul(tmp, ftmp, ftmp3); felem_reduce(out, tmp); /* 2^224 - 2^96 - 1 */ } /* * Copy in constant time: if icopy == 1, copy in to out, if icopy == 0, copy * out to itself. */ static void copy_conditional(felem out, const felem in, limb icopy) { unsigned i; /* * icopy is a (64-bit) 0 or 1, so copy is either all-zero or all-one */ const limb copy = -icopy; for (i = 0; i < 4; ++i) { const limb tmp = copy & (in[i] ^ out[i]); out[i] ^= tmp; } } /******************************************************************************/ /*- * ELLIPTIC CURVE POINT OPERATIONS * * Points are represented in Jacobian projective coordinates: * (X, Y, Z) corresponds to the affine point (X/Z^2, Y/Z^3), * or to the point at infinity if Z == 0. * */ /*- * Double an elliptic curve point: * (X

, Z

= (3 * (X - Z^2) * (X + Z^2))^2 - 8 * X * Y^2 * Y

) - 8 * Y^2 * Z

s not tested). */ static void point_double(felem x_out, felem y_out, felem z_out, const felem x_in, const felem y_in, const felem z_in) { widefelem tmp, tmp2; felem delta, gamma, beta, alpha, ftmp, ftmp2; felem_assign(ftmp, x_in); felem_assign(ftmp2, x_in); /* delta = z^2 */ felem_square(tmp, z_in); felem_reduce(delta, tmp); /* gamma = y^2 */ felem_square(tmp, y_in); felem_reduce(gamma, tmp); /* beta = x*gamma */ felem_mul(tmp, x_in, gamma); felem_reduce(beta, tmp); /* alpha = 3*(x-delta)*(x+delta) */ felem_diff(ftmp, delta); /* ftmp[i] < 2^57 + 2^58 + 2 < 2^59 */ felem_sum(ftmp2, delta); /* ftmp2[i] < 2^57 + 2^57 = 2^58 */ felem_scalar(ftmp2, 3); /* ftmp2[i] < 3 * 2^58 < 2^60 */ felem_mul(tmp, ftmp, ftmp2); /* tmp[i] < 2^60 * 2^59 * 4 = 2^121 */ felem_reduce(alpha, tmp); /* x

= (y + z)^2 - gamma - delta */ felem_sum(delta, gamma); /* delta[i] < 2^57 + 2^57 = 2^58 */ felem_assign(ftmp, y_in); felem_sum(ftmp, z_in); /* ftmp[i] < 2^57 + 2^57 = 2^58 */ felem_square(tmp, ftmp); /* tmp[i] < 4 * 2^58 * 2^58 = 2^118 */ felem_diff_128_64(tmp, delta); /* tmp[i] < 2^118 + 2^64 + 8 < 2^119 */ felem_reduce(z_out, tmp); /* y

) - 8*gamma^2 */ felem_scalar(beta, 4); /* beta[i] < 4 * 2^57 = 2^59 */ felem_diff(beta, x_out); /* beta[i] < 2^59 + 2^58 + 2 < 2^60 */ felem_mul(tmp, alpha, beta); /* tmp[i] < 4 * 2^57 * 2^60 = 2^119 */ felem_square(tmp2, gamma); /* tmp2[i] < 4 * 2^57 * 2^57 = 2^116 */ widefelem_scalar(tmp2, 8); /* tmp2[i] < 8 * 2^116 = 2^119 */ widefelem_diff(tmp, tmp2); /* tmp[i] < 2^119 + 2^120 < 2^121 */ felem_reduce(y_out, tmp); } /*- * Add two elliptic curve points: * (X_1, Y_1, Z_1) + (X_2, Y_2, Z_2) = (X_3, Y_3, Z_3), where * X_3 = (Z_1^3 * Y_2 - Z_2^3 * Y_1)^2 - (Z_1^2 * X_2 - Z_2^2 * X_1)^3 - * 2 * Z_2^2 * X_1 * (Z_1^2 * X_2 - Z_2^2 * X_1)^2 * Y_3 = (Z_1^3 * Y_2 - Z_2^3 * Y_1) * (Z_2^2 * X_1 * (Z_1^2 * X_2 - Z_2^2 * X_1)^2 - X_3) - * Z_2^3 * Y_1 * (Z_1^2 * X_2 - Z_2^2 * X_1)^3 * Z_3 = (Z_1^2 * X_2 - Z_2^2 * X_1) * (Z_1 * Z_2) * * This runs faster if

is set, which requires Z_2 = 1 or Z_2 = 0. */ /* * This function is not entirely constant-time: it includes a branch for * checking whether the two input points are equal, (while not equal to the * point at infinity). This case never happens during single point * multiplication, so there is no timing leak for ECDH or ECDSA signing. */ static void point_add(felem x3, felem y3, felem z3, const felem x1, const felem y1, const felem z1, const int mixed, const felem x2, const felem y2, const felem z2) { felem ftmp, ftmp2, ftmp3, ftmp4, ftmp5, x_out, y_out, z_out; widefelem tmp, tmp2; limb z1_is_zero, z2_is_zero, x_equal, y_equal; if (!mixed) { /* ftmp2 = z2^2 */ felem_square(tmp, z2); felem_reduce(ftmp2, tmp); /* ftmp4 = z2^3 */ felem_mul(tmp, ftmp2, z2); felem_reduce(ftmp4, tmp); /* ftmp4 = z2^3*y1 */ felem_mul(tmp2, ftmp4, y1); felem_reduce(ftmp4, tmp2); /* ftmp2 = z2^2*x1 */ felem_mul(tmp2, ftmp2, x1); felem_reduce(ftmp2, tmp2); } else { /* * We

mixed

EC_nistp224

, Y

t happen). */ ec_GFp_nistp_points_make_affine_internal(num, points, sizeof(felem), tmp_felems, (void (*)(void *))felem_one, (int (*)(const void *)) felem_is_zero_int, (void (*)(void *, const void *)) felem_assign, (void (*)(void *, const void *)) felem_square_reduce, (void (*) (void *, const void *, const void *)) felem_mul_reduce, (void (*)(void *, const void *)) felem_inv, (void (*)(void *, const void *)) felem_contract); } /* * Computes scalar*generator + \sum scalars[i]*points[i], ignoring NULL * values Result is stored in r (r can equal one of the inputs). */ int ec_GFp_nistp224_points_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *scalar, size_t num, const EC_POINT *points[], const BIGNUM *scalars[], BN_CTX *ctx) { int ret = 0; int j; unsigned i; int mixed = 0; BN_CTX *new_ctx = NULL; BIGNUM *x, *y, *z, *tmp_scalar; felem_bytearray g_secret; felem_bytearray *secrets = NULL; felem (*pre_comp)[17][3] = NULL; felem *tmp_felems = NULL; felem_bytearray tmp; unsigned num_bytes; int have_pre_comp = 0; size_t num_points = num; felem x_in, y_in, z_in, x_out, y_out, z_out; NISTP224_PRE_COMP *pre = NULL; const felem(*g_pre_comp)[16][3] = NULL; EC_POINT *generator = NULL; const EC_POINT *p = NULL; const BIGNUM *p_scalar = NULL; if (ctx == NULL) if ((ctx = new_ctx = BN_CTX_new()) == NULL) return 0; BN_CTX_start(ctx); x = BN_CTX_get(ctx); y = BN_CTX_get(ctx); z = BN_CTX_get(ctx); tmp_scalar = BN_CTX_get(ctx); if (tmp_scalar == NULL) goto err; if (scalar != NULL) { pre = group->pre_comp.nistp224; if (pre) /* we have precomputation, try to use it */ g_pre_comp = (const felem(*)[16][3])pre->g_pre_comp; else /* try to use the standard precomputation */ g_pre_comp = &gmul[0]; generator = EC_POINT_new(group); if (generator == NULL) goto err; /* get the generator from precomputation */ if (!felem_to_BN(x, g_pre_comp[0][1][0]) || !felem_to_BN(y, g_pre_comp[0][1][1]) || !felem_to_BN(z, g_pre_comp[0][1][2])) { ECerr(EC_F_EC_GFP_NISTP224_POINTS_MUL, ERR_R_BN_LIB); goto err; } if (!EC_POINT_set_Jprojective_coordinates_GFp(group, generator, x, y, z, ctx)) goto err; if (0 == EC_POINT_cmp(group, generator, group->generator, ctx)) /* precomputation matches generator */ have_pre_comp = 1; else /* * we don

t guarantee * constant-timeness */ if (!BN_nnmod(tmp_scalar, p_scalar, group->order, ctx)) { ECerr(EC_F_EC_GFP_NISTP224_POINTS_MUL, ERR_R_BN_LIB); goto err; } num_bytes = BN_bn2bin(tmp_scalar, tmp); } else num_bytes = BN_bn2bin(p_scalar, tmp); flip_endian(secrets[i], tmp, num_bytes); /* precompute multiples */ if ((!BN_to_felem(x_out, p->X)) || (!BN_to_felem(y_out, p->Y)) || (!BN_to_felem(z_out, p->Z))) goto err; felem_assign(pre_comp[i][1][0], x_out); felem_assign(pre_comp[i][1][1], y_out); felem_assign(pre_comp[i][1][2], z_out); for (j = 2; j <= 16; ++j) { if (j & 1) { point_add(pre_comp[i][j][0], pre_comp[i][j][1], pre_comp[i][j][2], pre_comp[i][1][0], pre_comp[i][1][1], pre_comp[i][1][2], 0, pre_comp[i][j - 1][0], pre_comp[i][j - 1][1], pre_comp[i][j - 1][2]); } else { point_double(pre_comp[i][j][0], pre_comp[i][j][1], pre_comp[i][j][2], pre_comp[i][j / 2][0], pre_comp[i][j / 2][1], pre_comp[i][j / 2][2]); } } } } if (mixed) make_points_affine(num_points * 17, pre_comp[0], tmp_felems); } /* the scalar for the generator */ if ((scalar != NULL) && (have_pre_comp)) { memset(g_secret, 0, sizeof(g_secret)); /* reduce scalar to 0 <= scalar < 2^224 */ if ((BN_num_bits(scalar) > 224) || (BN_is_negative(scalar))) { /* * this is an unusual input, and we don

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0x00,

0x00,

0x00,

0x00,

0x00,

0x00,

0x00,

0x00,

0x00,

0x00,

0x00,

0x01},

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFE,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFF,

0xFE},

0xB4,

0x05,

0x0A,

0x85,

0x0C,

0x04,

0xB3,

0xAB,

0xF5,

0x41,

0x32,

0x56,

0x50,

0x44,

0xB0,

0xB7,

0xD7,

0xBF,

0xD8,

0xBA,

0x27,

0x0B,

0x39,

0x43,

0x23,

0x55,

0xFF,

0xB4},

0xB7,

0x0E,

0x0C,

0xBD,

0x6B,

0xB4,

0xBF,

0x7F,

0x32,

0x13,

0x90,

0xB9,

0x4A,

0x03,

0xC1,

0xD3,

0x56,

0xC2,

0x11,

0x22,

0x34,

0x32,

0x80,

0xD6,

0x11,

0x5C,

0x1D,

0x21},

0xbd,

0x37,

0x63,

0x88,

0xb5,

0xf7,

0x23,

0xfb,

0x4c,

0x22,

0xdf,

0xe6,

0xcd,

0x43,

0x75,

0xa0,

0x5a,

0x07,

0x47,

0x64,

0x44,

0xd5,

0x81,

0x99,

0x85,

0x00,

0x7e,

0x34}

0x3280d6115c1d21,

0xc1d356c2112234,

0x7f321390b94a03,

0xb70e0cbd6bb4bf},

0xd5819985007e34,

0x75a05a07476444,

0xfb4c22dfe6cd43,

0xbd376388b5f723},

0xfd9675666ebbe9,

0xbca7664d40ce5e,

0x2242df8d8a2a43,

0x1f49bbb0f99bc5},

0x29e0b892dc9c43,

0xece8608436e662,

0xdc858f185310d0,

0x9812dd4eb8d321},

0x6d3e678d5d8eb8,

0x559eed1cb362f1,

0x16e9a3bbce8a3f,

0xeedcccd8c2a748},

0xf19f90ed50266d,

0xabf2b4bf65f9df,

0x313865468fafec,

0x5cb379ba910a17},

0x0641966cab26e3,

0x91fb2991fab0a0,

0xefec27a4e13a0b,

0x0499aa8a5f8ebe},

0x7510407766af5d,

0x84d929610d5450,

0x81d77aae82f706,

0x6916f6d4338c5b},

0xea95ac3b1f15c6,

0x086000905e82d4,

0xdd323ae4d1c8b1,

0x932b56be7685a3},

0x9ef93dea25dbbf,

0x41665960f390f0,

0xfdec76dbe2a8a7,

0x523e80f019062a},

0x822fdd26732c73,

0xa01c83531b5d0f,

0x363f37347c1ba4,

0xc391b45c84725c},

0xbbd5e1b2d6ad24,

0xddfbcde19dfaec,

0xc393da7e222a7f,

0x1efb7890ede244},

0x4c9e90ca217da1,

0xd11beca79159bb,

0xff8d33c2c98b7c,

0x2610b39409f849},

0x44d1352ac64da0,

0xcdbb7b2c46b4fb,

0x966c079b753c89,

0xfe67e4e820b112},

0xe28cae2df5312d,

0xc71b61d16f5c6e,

0x79b7619a3e7c4c,

0x05c73240899b47},

0x9f7f6382c73e3a,

0x18615165c56bda,

0x641fab2116fd56,

0x72855882b08394},

0x0469182f161c09,

0x74a98ca8d00fb5,

0xb89da93489a3e0,

0x41c98768fb0c1d},

0xe5ea05fb32da81,

0x3dce9ffbca6855,

0x1cfe2d3fbf59e6,

0x0e5e03408738a7},

0xdab22b2333e87f,

0x4430137a5dd2f6,

0xe03ab9f738beb8,

0xcb0c5d0dc34f24},

0x764a7df0c8fda5,

0x185ba5c3fa2044,

0x9281d688bcbe50,

0xc40331df893881},

0xb89530796f0f60,

0xade92bd26909a3,

0x1a0c83fb4884da,

0x1765bf22a5a984},

0x772a9ee75db09e,

0x23bc6c67cec16f,

0x4c1edba8b14e2f,

0xe2a215d9611369},

0x571e509fb5efb3,

0xade88696410552,

0xc8ae85fada74fe,

0x6c7e4be83bbde3},

0xff9f51160f4652,

0xb47ce2495a6539,

0xa2946c53b582f4,

0x286d2db3ee9a60},

0x40bbd5081a44af,

0x0995183b13926c,

0xbcefba6f47f6d0,

0x215619e9cc0057},

0x8bc94d3b0df45e,

0xf11c54a3694f6f,

0x8631b93cdfe8b5,

0xe7e3f4b0982db9},

0xb17048ab3e1c7b,

0xac38f36ff8a1d8,

0x1c29819435d2c6,

0xc813132f4c07e9},

0x2891425503b11f,

0x08781030579fea,

0xf5426ba5cc9674,

0x1e28ebf18562bc},

0x9f31997cc864eb,

0x06cd91d28b5e4c,

0xff17036691a973,

0xf1aef351497c58},

0xdd1f2d600564ff,

0xdead073b1402db,

0x74a684435bd693,

0xeea7471f962558},

0x9665266dddf554,

0x9613d78b60ef2d,

0xce27a34cdba417,

0xd35ab74d6afc31},

0x85ccdd22deb15e,

0x2137e5783a6aab,

0xa141cffd8c93c6,

0x355a1830e90f2d},

0x1a494eadaade65,

0xd6da4da77fe53c,

0xe7992996abec86,

0x65c3553c6090e3},

0xfa610b1fb09346,

0xf1c6540b8a4aaf,

0xc51a13ccd3cbab,

0x02995b1b18c28a},

0x7874568e7295ef,

0x86b419fbe38d04,

0xdc0690a7550d9a,

0xd3966a44beac33},

0x2b7280ec29132f,

0xbeaa3b6a032df3,

0xdc7dd88ae41200,

0xd25e2513e3a100},

0x924857eb2efafd,

0xac2bce41223190,

0x8edaa1445553fc,

0x825800fd3562d5},

0x8d79148ea96621,

0x23a01c3dd9ed8d,

0xaf8b219f9416b5,

0xd8db0cc277daea},

0x76a9c3b1a700f0,

0xe9acd29bc7e691,

0x69212d1a6b0327,

0x6322e97fe154be},

0x469fc5465d62aa,

0x8d41ed18883b05,

0x1f8eae66c52b88,

0xe4fcbe9325be51},

0x825fdf583cac16,

0x020b857c7b023a,

0x683c17744b0165,

0x14ffd0a2daf2f1},

0x323b36184218f9,

0x4944ec4e3b47d4,

0xc15b3080841acf,

0x0bced4b01a28bb},

0x92ac22230df5c4,

0x52f33b4063eda8,

0xcb3f19870c0c93,

0x40064f2ba65233},

0xfe16f0924f8992,

0x012da25af5b517,

0x1a57bb24f723a6,

0x06f8bc76760def},

0x4a7084f7817cb9,

0xbcab0738ee9a78,

0x3ec11e11d9c326,

0xdc0fe90e0f1aae},

0xcf639ea5f98390,

0x5c350aa22ffb74,

0x9afae98a4047b7,

0x956ec2d617fc45},

0x4306d648c1be6a,

0x9247cd8bc9a462,

0xf5595e377d2f2e,

0xbd1c3caff1a52e},

0x045e14472409d0,

0x29f3e17078f773,

0x745a602b2d4f7d,

0x191837685cdfbb},

0x5b6ee254a8cb79,

0x4953433f5e7026,

0xe21faeb1d1def4,

0xc4c225785c09de},

0x307ce7bba1e518,

0x31b125b1036db8,

0x47e91868839e8f,

0xc765866e33b9f3},

0x3bfece24f96906,

0x4794da641e5093,

0xde5df64f95db26,

0x297ecd89714b05},

0x701bd3ebb2c3aa,

0x7073b4f53cb1d5,

0x13c5665658af16,

0x9895089d66fe58},

0x0fef05f78c4790,

0x2d773633b05d2e,

0x94229c3a951c94,

0xbbbd70df4911bb},

0xb2c6963d2c1168,

0x105f47a72b0d73,

0x9fdf6111614080,

0x7b7e94b39e67b0},

0xad1a7d6efbe2b3,

0xf012482c0da69d,

0x6b3bdf12438345,

0x40d7558d7aa4d9},

0x8a09fffb5c6d3d,

0x9a356e5d9ffd38,

0x5973f15f4f9b1c,

0xdcd5f59f63c3ea},

0xacf39f4c5ca7ab,

0x4c8071cc5fd737,

0xc64e3602cd1184,

0x0acd4644c9abba},

0x6c011a36d8bf6e,

0xfecd87ba24e32a,

0x19f6f56574fad8,

0x050b204ced9405},

0xed4f1cae7d9a96,

0x5ceef7ad94c40a,

0x778e4a3bf3ef9b,

0x7405783dc3b55e},

0x32477c61b6e8c6,

0xb46a97570f018b,

0x91176d0a7e95d1,

0x3df90fbc4c7d0e},

0x00ffffffffffffff;

0x00ffffffffffffff;

0x00ffffffffffffff;

0xffff)

0xffff)

0xffff)

0x00ffffffffffffff;

0x00ffffffffffffff;

0xffff)

0x00ffffffffffffff;

0x00ffffffffffffff;

0x00ffffffffffffff;

0x00ffffffffffffff;

0x000000ffffffffff))

0x000000ffffffffff))

0x00ffffffffffffff;

0xffffffffffffffff;

0xffffffffffffffff;

0xffffffffffffffff)

0x000000ffffffffff;

0x00ffffffffffffff;

0x00ffffffffffffff;

0x00ffff0000000000)

0x00ffffffffffffff)

0x00ffffffffffffff);

0x00fffe0000000000)

0x00ffffffffffffff)

0x01ffffffffffffff);

