Copyright 2001-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Initialise a engine type for use (or up its functional reference count if it's already in use). This version is only used internally.

This is the first functional reference and the engine requires initialisation so we do it now.

OK, we return a functional reference which is also a structural reference.

Free a functional reference to a engine type. This version is only used internally.

Reduce the functional reference count here so if it's the terminating case, we can release the lock safely and call the finish() handler without risk of a race. We get a race if we leave the count until after and something else is calling "finish" at the same time - there's a chance that both threads will together take the count from 2 to 0 without either calling finish().

Release the structural reference too

The API (locked) version of "init"

The API (locked) version of "finish"

www.openssl.org/source/license.html

License

e_os.h

eng_int.h

s already in use). This version is only used internally. */ int engine_unlocked_init(ENGINE *e) { int to_return = 1; if ((e->funct_ref == 0) && e->init) /* * This is the first functional reference and the engine requires * initialisation so we do it now. */ to_return = e->init(e); if (to_return) { /* * OK, we return a functional reference which is also a structural * reference. */ e->struct_ref++; e->funct_ref++; engine_ref_debug(e, 0, 1); engine_ref_debug(e, 1, 1); } return to_return; } /* * Free a functional reference to a engine type. This version is only used * internally. */ int engine_unlocked_finish(ENGINE *e, int unlock_for_handlers) { int to_return = 1; /* * Reduce the functional reference count here so if it

finish

init

finish

