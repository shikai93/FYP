Copyright 2001-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Utility functions related to sending OCSP requests and extracting relevant information from the response.

Add an OCSP_CERTID to an OCSP request. Return new OCSP_ONEREQ pointer: useful if we want to add extensions.

do not free on error

Set requestorName from an X509_NAME structure

Add a certificate to an OCSP request

Sign an OCSP request set the requestorName to the subject name of an optional signers certificate and include one or more optional certificates in the request. Behaves like PKCS7_sign().

Get response status

Extract basic response from OCSP_RESPONSE or NULL if no basic response present.

Return number of OCSP_SINGLERESP responses present in a basic response.

Extract an OCSP_SINGLERESP response with a given index

Look single response matching a given certificate ID

Extract status information from an OCSP_SINGLERESP structure. Note: the revtime and reason values are only set if the certificate status is revoked. Returns numerical value of status.

This function combines the previous ones: look up a certificate ID and if found extract status information. Return 0 is successful.

Maybe check for multiple responses and give an error?

Check validity of thisUpdate and nextUpdate fields. It is possible that the request will take a few seconds to process and/or the time won't be totally accurate. Therefore to avoid rejecting otherwise valid time we allow the times to be within 'nsec' of the current time. Also to avoid accepting very old responses without a nextUpdate field an optional maxage parameter specifies the maximum age the thisUpdate field can be.

Check thisUpdate is valid and not more than nsec in the future

If maxsec specified check thisUpdate is not more than maxsec in the past

Check nextUpdate is valid and not more than nsec in the past

Also don't allow nextUpdate to precede thisUpdate

www.openssl.org/source/license.html

License

internal/cryptlib.h

ocsp_lcl.h

t be * totally accurate. Therefore to avoid rejecting otherwise valid time we * allow the times to be within

of the current time. Also to avoid * accepting very old responses without a nextUpdate field an optional maxage * parameter specifies the maximum age the thisUpdate field can be. */ int OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd, ASN1_GENERALIZEDTIME *nextupd, long nsec, long maxsec) { int ret = 1; time_t t_now, t_tmp; time(&t_now); /* Check thisUpdate is valid and not more than nsec in the future */ if (!ASN1_GENERALIZEDTIME_check(thisupd)) { OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY, OCSP_R_ERROR_IN_THISUPDATE_FIELD); ret = 0; } else { t_tmp = t_now + nsec; if (X509_cmp_time(thisupd, &t_tmp) > 0) { OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY, OCSP_R_STATUS_NOT_YET_VALID); ret = 0; } /* * If maxsec specified check thisUpdate is not more than maxsec in * the past */ if (maxsec >= 0) { t_tmp = t_now - maxsec; if (X509_cmp_time(thisupd, &t_tmp) < 0) { OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY, OCSP_R_STATUS_TOO_OLD); ret = 0; } } } if (!nextupd) return ret; /* Check nextUpdate is valid and not more than nsec in the past */ if (!ASN1_GENERALIZEDTIME_check(nextupd)) { OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY, OCSP_R_ERROR_IN_NEXTUPDATE_FIELD); ret = 0; } else { t_tmp = t_now - nsec; if (X509_cmp_time(nextupd, &t_tmp) < 0) { OCSPerr(OCSP_F_OCSP_CHECK_VALIDITY, OCSP_R_STATUS_EXPIRED); ret = 0; } } /* Also don

