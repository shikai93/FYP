Copyright 2001-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Stateful OCSP request code, supporting non-blocking I/O

Opaque OCSP request status structure

Current I/O state

Line buffer

Line buffer length

BIO to perform I/O with

Memory BIO response is built into

ASN1 length of response

Maximum length of response

OCSP states

If set no reading should be performed

Error condition

First line being read

MIME headers being read

OCSP initial header (tag + length) being read

OCSP content octets being read

First call: ready to start I/O

Request being sent

Request being flushed

Completed

Headers set, no final \r\n included

Parse the HTTP response. This will look like this: "HTTP/1.0 200 OK". We need to obtain the numeric code and (optional) informational message.

Skip to first white space (passed protocol info)

Skip past white space to start of response code

Find end of response code: first whitespace after start of code

Set end of response code and start of message

Attempt to parse numeric code

Skip over any leading white space in message

Finally zap any trailing white space in message (include CRLF)

We know q has a non white space character so this is OK

Write data to memory BIO

Last operation was adding headers: need a final \r\n

fall thru

fall thru

fall thru

Attempt to read a line in

Due to &%^$" memory BIO behaviour with BIO_gets we have to check there's a complete line in there before calling BIO_gets or we'll just get a partial read.

Don't allow excessive lines

First line

Look for blank line: end of headers

Fall thru

Now reading ASN1 header: can read at least 2 bytes which is enough for ASN1 SEQUENCE header and either length field or at least the length of the length field.

Check it is an ASN1 SEQUENCE

Check out length field

If MSB set on initial length octet we can now always read 6 octets: make sure we have them.

Not NDEF or excessive length

Fall thru

Blocking OCSP request handler: now a special case of non-blocking I/O

www.openssl.org/source/license.html

License

e_os.h

internal/ctype.h

Content-Type: application/ocsp-request\r\n

Content-Length: %d\r\n\r\n

%s %s HTTP/1.0\r\n

/

:

\r\n

POST

HTTP/1.0 200 OK

Code=

Code=

,Reason=

\r\n

s a complete line in there before calling BIO_gets or we

\n

t allow excessive lines */ if (n == rctx->iobuflen) { rctx->state = OHS_ERROR; return 0; } /* First line */ if (rctx->state == OHS_FIRSTLINE) { if (parse_http_line1((char *)rctx->iobuf)) { rctx->state = OHS_HEADERS; goto next_line; } else { rctx->state = OHS_ERROR; return 0; } } else { /* Look for blank line: end of headers */ for (p = rctx->iobuf; *p; p++) { if ((*p !=

) && (*p !=

0x1000

0x80)

0x7F;

