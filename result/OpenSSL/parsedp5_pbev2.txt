Copyright 1999-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

PKCS#5 v2.0 password based encryption structures

Return an algorithm identifier for a PKCS#5 v2.0 PBE algorithm: yes I know this is horrible! Extended version to allow application supplied PRF NID and IV.

Setup the AlgorithmIdentifier for the encryption scheme

Create random IV

Dummy cipherinit to just setup the IV, and PRF

If prf NID unspecified see if cipher has a preference. An error is OK here: just means use default PRF.

If its RC2 then we'd better setup the key length

Setup keyfunc

Now set up top level AlgorithmIdentifier

Encode PBE2PARAM into parameter

Note 'scheme' is freed as part of pbe2

If have a key len set it up

prf can stay NULL if we are using hmacWithSHA1

Finally setup the keyfunc structure

Encode PBKDF2PARAM into parameter of pbe2

www.openssl.org/source/license.html

License

internal/cryptlib.h

d better setup the key length */ if (alg_nid == NID_rc2_cbc) keylen = EVP_CIPHER_key_length(cipher); else keylen = -1; /* Setup keyfunc */ X509_ALGOR_free(pbe2->keyfunc); pbe2->keyfunc = PKCS5_pbkdf2_set(iter, salt, saltlen, prf_nid, keylen); if (!pbe2->keyfunc) goto merr; /* Now set up top level AlgorithmIdentifier */ if ((ret = X509_ALGOR_new()) == NULL) goto merr; ret->algorithm = OBJ_nid2obj(NID_pbes2); /* Encode PBE2PARAM into parameter */ if (!ASN1_TYPE_pack_sequence(ASN1_ITEM_rptr(PBE2PARAM), pbe2, &ret->parameter)) goto merr; PBE2PARAM_free(pbe2); pbe2 = NULL; return ret; merr: ASN1err(ASN1_F_PKCS5_PBE2_SET_IV, ERR_R_MALLOC_FAILURE); err: EVP_CIPHER_CTX_free(ctx); PBE2PARAM_free(pbe2); /* Note

