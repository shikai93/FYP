Copyright 1995-2017 The OpenSSL Project Authors. All Rights Reserved. Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Signalling cipher suite value from RFC 5746 (TLS_EMPTY_RENEGOTIATION_INFO_SCSV)

Signalling cipher suite value from draft-ietf-tls-downgrade-scsv-00 (TLS_FALLBACK_SCSV)

a bundle of RFC standard cipher names, generated from ssl3_ciphers[]

This next block of six "EDH" labels is for backward compatibility with older versions of OpenSSL. New code should use the six "DHE" labels above instead:

Some will argue that this increases memory footprint, but it's not actually true. Point is that malloc has to return at least 64-bit aligned pointers, meaning that allocating 5 bytes wastes 3 bytes in either case. Suggested pre-gaping simply moves these wasted bytes from the end of allocated region to its front, but makes data payload aligned, which improves performance:-)

This is the maximum MAC (digest) size used by the SSL library. Currently maximum of 20 is used by SHA1, but we reserve for future extension for 512-bit hashes.

Maximum block size used in all ciphersuites. Currently 16 for AES.

Maximum plaintext length: defined by SSL/TLS standards

Maximum compression overhead: defined by SSL/TLS standards

The standards give a maximum encryption overhead of 1024 bytes. In practice the value is lower than this. The overhead is the maximum number of padding bytes (256) plus the mac size.

OpenSSL currently only uses a padding length of at most one block so the send overhead is smaller.

If compression isn't used don't include the compression overhead

Pseudo content types to indicate additional parameters

Pseudo content types for SSL/TLS header info

fatal

fatal

fatal

fatal

fatal

SSL3_CT_NUMBER is used to size arrays and it must be large enough to contain all of the cert types defined either for SSLv3 and TLSv1.

No longer used as of OpenSSL 1.1.1

Removed from OpenSSL 1.1.0

Set if we encrypt then mac instead of usual mac then encrypt

Set if extended master secret extension received from peer

Dummy message type for handling CCS like a normal handshake message

These are used when changing over to a new cipher

www.openssl.org/source/license.html

License

C

TLS_RSA_WITH_NULL_MD5

TLS_RSA_WITH_NULL_SHA

TLS_RSA_WITH_3DES_EDE_CBC_SHA

TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA

TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA

TLS_DH_anon_WITH_3DES_EDE_CBC_SHA

TLS_RSA_WITH_IDEA_CBC_SHA

TLS_RSA_WITH_RC4_128_MD5

TLS_RSA_WITH_RC4_128_SHA

TLS_DH_anon_WITH_RC4_128_MD5

NULL-MD5

NULL-SHA

EXP-RC4-MD5

RC4-MD5

RC4-SHA

EXP-RC2-CBC-MD5

IDEA-CBC-SHA

EXP-DES-CBC-SHA

DES-CBC-SHA

DES-CBC3-SHA

EXP-DH-DSS-DES-CBC-SHA

DH-DSS-DES-CBC-SHA

DH-DSS-DES-CBC3-SHA

EXP-DH-RSA-DES-CBC-SHA

DH-RSA-DES-CBC-SHA

DH-RSA-DES-CBC3-SHA

EXP-DHE-DSS-DES-CBC-SHA

DHE-DSS-DES-CBC-SHA

DHE-DSS-DES-CBC3-SHA

EXP-DHE-RSA-DES-CBC-SHA

DHE-RSA-DES-CBC-SHA

DHE-RSA-DES-CBC3-SHA

EDH

DHE

EXP-EDH-DSS-DES-CBC-SHA

EDH-DSS-DES-CBC-SHA

EDH-DSS-DES-CBC3-SHA

EXP-EDH-RSA-DES-CBC-SHA

EDH-RSA-DES-CBC-SHA

EDH-RSA-DES-CBC3-SHA

EXP-ADH-RC4-MD5

ADH-RC4-MD5

EXP-ADH-DES-CBC-SHA

ADH-DES-CBC-SHA

ADH-DES-CBC3-SHA

s not * actually true. Point is that malloc has to return at least 64-bit aligned * pointers, meaning that allocating 5 bytes wastes 3 bytes in either case. * Suggested pre-gaping simply moves these wasted bytes from the end of * allocated region to its front, but makes data payload aligned, which * improves performance:-) */ # define SSL3_ALIGN_PAYLOAD 8 # else # if (SSL3_ALIGN_PAYLOAD&(SSL3_ALIGN_PAYLOAD-1))!=0 # error "insane SSL3_ALIGN_PAYLOAD" # undef SSL3_ALIGN_PAYLOAD # endif # endif /* * This is the maximum MAC (digest) size used by the SSL library. Currently * maximum of 20 is used by SHA1, but we reserve for future extension for * 512-bit hashes. */ # define SSL3_RT_MAX_MD_SIZE 64 /* * Maximum block size used in all ciphersuites. Currently 16 for AES. */ # define SSL_RT_MAX_CIPHER_BLOCK_SIZE 16 # define SSL3_RT_MAX_EXTRA (16384) /* Maximum plaintext length: defined by SSL/TLS standards */ # define SSL3_RT_MAX_PLAIN_LENGTH 16384 /* Maximum compression overhead: defined by SSL/TLS standards */ # define SSL3_RT_MAX_COMPRESSED_OVERHEAD 1024 /* * The standards give a maximum encryption overhead of 1024 bytes. In * practice the value is lower than this. The overhead is the maximum number * of padding bytes (256) plus the mac size. */ # define SSL3_RT_MAX_ENCRYPTED_OVERHEAD (256 + SSL3_RT_MAX_MD_SIZE) # define SSL3_RT_MAX_TLS13_ENCRYPTED_OVERHEAD 256 /* * OpenSSL currently only uses a padding length of at most one block so the * send overhead is smaller. */ # define SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD \ (SSL_RT_MAX_CIPHER_BLOCK_SIZE + SSL3_RT_MAX_MD_SIZE) /* If compression isn

\x43\x4C\x4E\x54

\x53\x52\x56\x52

0x030000FF

0x03005600

0x03000001

0x03000002

0x03000003

0x03000004

0x03000005

0x03000006

0x03000007

0x03000008

0x03000009

0x0300000A

0x0300000B

0x0300000C

0x0300000D

0x0300000E

0x0300000F

0x03000010

0x03000011

0x03000012

0x03000013

0x03000014

0x03000015

0x03000016

0x03000017

0x03000018

0x03000019

0x0300001A

0x0300001B

0x0300

0x03

0x00

0x1000

0x1)

0x2)

0x3)

0x4)

0x0000

0x0100

0x5)

0x6)

0x7)

0x8)

0x100

0x101

0x0001

0x0

0x0010

0x0100

0x0200

0x0400

0x0101

0x001

0x002

0x010

0x020

0x040

0x080

0x100

