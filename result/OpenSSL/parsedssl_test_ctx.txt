Copyright 2016-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Default set to be as small as possible to exercise fragmentation.

True enums and other test configuration values that map to an int.

ExpectedResult

ExpectedClientAlert / ExpectedServerAlert

ExpectedProtocol

VerifyCallback

ServerName

ServerNameCallback

SessionTicketExpected

CompressionExpected

Method

NPN and ALPN options

SRP options

Handshake mode

Renegotiation Ciphersuites

KeyUpdateType

CT Validation

CertStatus

ApplicationData

MaxFragmentSize

Expected key and signature types

Expected signing hash

Known test options and their corresponding parse methods.

Top-level options.

Nested client options.

Nested server options.

The return code is checked by caller

Subsections

www.openssl.org/source/license.html

License

../e_os.h

internal/nelem.h

ssl_test_ctx.h

testutil.h

Yes

No

parse_boolean given: '%s'

InvalidValue

Success

ServerFail

ClientFail

InternalError

UnknownCA

HandshakeFailure

UnrecognizedName

BadCertificate

NoApplicationProtocol

TLSv1.3

TLSv1.2

TLSv1.1

TLSv1

SSLv3

DTLSv1

DTLSv1.2

None

AcceptAll

RejectAll

None

server1

server2

invalid

None

IgnoreMismatch

RejectMismatch

EarlyIgnoreMismatch

EarlyRejectMismatch

EarlyNoV12

Ignore

Yes

No

TLS

DTLS

Simple

Resume

RenegotiateServer

RenegotiateClient

KeyUpdateServer

KeyUpdateClient

KeyUpdateRequested

KeyUpdateNotRequested

None

Permissive

Strict

None

GoodResponse

BadResponse

empty

ExpectedResult

ExpectedClientAlert

ExpectedServerAlert

ExpectedProtocol

ExpectedServerName

SessionTicketExpected

CompressionExpected

Method

ExpectedNPNProtocol

ExpectedALPNProtocol

HandshakeMode

KeyUpdateType

ResumptionExpected

ApplicationData

MaxFragmentSize

ExpectedTmpKeyType

ExpectedServerCertType

ExpectedServerSignHash

ExpectedServerSignType

ExpectedServerCANames

ExpectedClientCertType

ExpectedClientSignHash

ExpectedClientSignType

ExpectedClientCANames

UseSCTP

VerifyCallback

ServerName

NPNProtocols

ALPNProtocols

CTValidation

RenegotiateCiphers

SRPUser

SRPPassword

ServerNameCallback

NPNProtocols

ALPNProtocols

BrokenSessionTicket

CertStatus

SRPUser

SRPPassword

Bad value %s for option %s

Unknown test option: %s

Bad value %s for option %s

Unknown test option: %s

client

server

server2

resume-client

resume-server

resume-server2

Bad value %s for option %s

Unknown test option: %s

Copyright 2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Default

Couldn't test resumption/renegotiation: original handshake failed.

Default

Default

Default

Default

Special test

Default

Default

Default

Default

Default

Server/client settings that aren't supported by the SSL CONF library, such as callbacks.

One of a number of predefined custom callbacks.

One of a number of predefined server names use by the client

Supported NPN and ALPN protocols. A comma-separated list.

Ciphersuites to set on a renegotiation

SNI callback (server-side).

Supported NPN and ALPN protocols. A comma-separated list.

Whether to set a broken session ticket callback.

Should we send a CertStatus message?

An SRP user known to the server.

Global test configuration. Does not change between handshakes.

Whether the server/client CTX should use DTLS or TLS.

Whether to test a resumed/renegotiated handshake.

How much application data to exchange (default is 256 bytes). Both peers will send |app_data_size| bytes interleaved.

Maximum send fragment size.

KeyUpdate type

Extra server/client configurations. Per-handshake.

First handshake.

Resumed handshake.

Test expectations. These apply to the LAST handshake.

Defaults to SUCCESS.

Alerts. 0 if no expectation.

See ssl.h for alert codes.

Alert sent by the client / received by the server.

Alert sent by the server / received by the client.

Negotiated protocol version. 0 if no expectation.

See ssl.h for protocol versions.

The expected SNI context to use. We test server-side that the server switched to the expected context. Set by the callback upon success, so if the callback wasn't called or terminated with an alert, the servername will match with SSL_TEST_SERVERNAME_NONE. Note: in the event that the servername was accepted, the client should also receive an empty SNI extension back but we have no way of probing client-side via the API that this was the case.

The expected NPN/ALPN protocol to negotiate.

Whether the second handshake is resumed or a full handshake (boolean).

Expected temporary key type

Expected server certificate key type

Expected server signing hash

Expected server signature type

Expected server CA names

Expected client certificate key type

Expected client signing hash

Expected client signature type

Expected CA names for client auth

Whether to use SCTP for the transport

Load the test case context from |conf|. See test/README.ssltest.md for details on the conf file format.

HEADER_SSL_TEST_CTX_H

www.openssl.org/source/license.html

License

t test resumption/renegotiation: original handshake failed. */ SSL_TEST_FIRST_HANDSHAKE_FAILED } ssl_test_result_t; typedef enum { SSL_TEST_VERIFY_NONE = 0, /* Default */ SSL_TEST_VERIFY_ACCEPT_ALL, SSL_TEST_VERIFY_REJECT_ALL } ssl_verify_callback_t; typedef enum { SSL_TEST_SERVERNAME_NONE = 0, /* Default */ SSL_TEST_SERVERNAME_SERVER1, SSL_TEST_SERVERNAME_SERVER2, SSL_TEST_SERVERNAME_INVALID } ssl_servername_t; typedef enum { SSL_TEST_SERVERNAME_CB_NONE = 0, /* Default */ SSL_TEST_SERVERNAME_IGNORE_MISMATCH, SSL_TEST_SERVERNAME_REJECT_MISMATCH, SSL_TEST_SERVERNAME_EARLY_IGNORE_MISMATCH, SSL_TEST_SERVERNAME_EARLY_REJECT_MISMATCH, SSL_TEST_SERVERNAME_EARLY_NO_V12 } ssl_servername_callback_t; typedef enum { SSL_TEST_SESSION_TICKET_IGNORE = 0, /* Default */ SSL_TEST_SESSION_TICKET_YES, SSL_TEST_SESSION_TICKET_NO, SSL_TEST_SESSION_TICKET_BROKEN /* Special test */ } ssl_session_ticket_t; typedef enum { SSL_TEST_COMPRESSION_NO = 0, /* Default */ SSL_TEST_COMPRESSION_YES } ssl_compression_t; typedef enum { SSL_TEST_METHOD_TLS = 0, /* Default */ SSL_TEST_METHOD_DTLS } ssl_test_method_t; typedef enum { SSL_TEST_HANDSHAKE_SIMPLE = 0, /* Default */ SSL_TEST_HANDSHAKE_RESUME, SSL_TEST_HANDSHAKE_RENEG_SERVER, SSL_TEST_HANDSHAKE_RENEG_CLIENT, SSL_TEST_HANDSHAKE_KEY_UPDATE_SERVER, SSL_TEST_HANDSHAKE_KEY_UPDATE_CLIENT } ssl_handshake_mode_t; typedef enum { SSL_TEST_CT_VALIDATION_NONE = 0, /* Default */ SSL_TEST_CT_VALIDATION_PERMISSIVE, SSL_TEST_CT_VALIDATION_STRICT } ssl_ct_validation_t; typedef enum { SSL_TEST_CERT_STATUS_NONE = 0, /* Default */ SSL_TEST_CERT_STATUS_GOOD_RESPONSE, SSL_TEST_CERT_STATUS_BAD_RESPONSE } ssl_cert_status_t; /* * Server/client settings that aren

