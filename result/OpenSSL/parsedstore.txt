Copyright 2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

www.openssl.org/source/license.html

License

Copyright 2016-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

The main OSSL_STORE functions. ------------------------------ These allow applications to open a channel to a resource with supported data (keys, certs, crls, ...), read the data a piece at a time and decide what to do with it, and finally close.

Typedef for the OSSL_STORE_INFO post processing callback. This can be used to massage the given OSSL_STORE_INFO, or to drop it entirely (by returning NULL).

Open a channel given a URI. The given UI method will be used any time the loader needs extra input, for example when a password or pin is needed, and will be passed the same user data every time it's needed in this context. Returns a context reference which represents the channel to communicate through.

Control / fine tune the OSSL_STORE channel. |cmd| determines what is to be done, and depends on the underlying loader (use OSSL_STORE_get0_scheme to determine which loader is used), except for common commands (see below). Each command takes different arguments.

args

Common ctrl commands that different loaders may choose to support.

int on = 0 or 1; STORE_ctrl(ctx, STORE_C_USE_SECMEM, &on);

Where custom commands start

Read one data item (a key, a cert, a CRL) that is supported by the OSSL_STORE functionality, given a context. Returns a OSSL_STORE_INFO pointer, from which OpenSSL typed data can be extracted with OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT(), ... NULL is returned on error, which may include that the data found at the URI can't be figured out for certain or is ambiguous.

Check if end of data (end of file) is reached Returns 1 on end, 0 otherwise.

Check if an error occured Returns 1 if it did, 0 otherwise.

Close the channel Returns 1 on success, 0 on error.

Extracting OpenSSL types from and creating new OSSL_STORE_INFOs ---------------------------------------------------------------

Types of data that can be ossl_stored in a OSSL_STORE_INFO. OSSL_STORE_INFO_NAME is typically found when getting a listing of available "files" / "tokens" / what have you.

char

EVP_PKEY

EVP_PKEY

X509

X509_CRL

Functions to generate OSSL_STORE_INFOs, one function for each type we support having in them, as well as a generic constructor. In all cases, ownership of the object is transfered to the OSSL_STORE_INFO and will therefore be freed when the OSSL_STORE_INFO is freed.

Functions to try to extract data from a OSSL_STORE_INFO.

Free the OSSL_STORE_INFO

Function to register a loader for the given URI scheme. ------------------------------------------------------- The loader receives all the main components of an URI except for the scheme.

struct ossl_store_loader_ctx_st is defined differently by each loader

Functions to list STORE loaders -------------------------------

Error strings

www.openssl.org/source/license.html

License

C

s needed in this context. * * Returns a context reference which represents the channel to communicate * through. */ OSSL_STORE_CTX *OSSL_STORE_open(const char *uri, const UI_METHOD *ui_method, void *ui_data, OSSL_STORE_post_process_info_fn post_process, void *post_process_data); /* * Control / fine tune the OSSL_STORE channel. |cmd| determines what is to be * done, and depends on the underlying loader (use OSSL_STORE_get0_scheme to * determine which loader is used), except for common commands (see below). * Each command takes different arguments. */ int OSSL_STORE_ctrl(OSSL_STORE_CTX *ctx, int cmd, ... /* args */); /* * Common ctrl commands that different loaders may choose to support. */ /* int on = 0 or 1; STORE_ctrl(ctx, STORE_C_USE_SECMEM, &on); */ # define OSSL_STORE_C_USE_SECMEM 1 /* Where custom commands start */ # define OSSL_STORE_C_CUSTOM_START 100 /* * Read one data item (a key, a cert, a CRL) that is supported by the OSSL_STORE * functionality, given a context. * Returns a OSSL_STORE_INFO pointer, from which OpenSSL typed data can be * extracted with OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT(), ... * NULL is returned on error, which may include that the data found at the URI * can

files

tokens

