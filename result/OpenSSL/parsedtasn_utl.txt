Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Utility functions for manipulating fields and offsets

Add 'offset' to 'addr'

Given an ASN1_ITEM CHOICE type return the selector value

Given an ASN1_ITEM CHOICE type set the selector value, return old value.

Do atomic reference counting. The value 'op' decides what to do. If it is +1 then the count is incremented. If |op| is 0, lock is initialised and count is set to 1. If |op| is -1, count is decremented and the return value is the current reference count or 0 if no reference count is active. It returns -1 on initialisation error. Used by ASN1_SEQUENCE construct of X509, X509_REQ, X509_CRL objects

failed

Given an ASN1_TEMPLATE get a pointer to a field

NOTE for BOOLEAN types the field is just a plain int so we can't return int , so settle for (int ).

Handle ANY DEFINED BY template, find the selector, look up the relevant ASN1_TEMPLATE in the table and return it.

Else ANY DEFINED BY ... get the table

Get the selector field

Check if NULL

Convert type to a long: NB: don't check for NID_undef here because it might be a legitimate value in the table

Let application callback translate value

Try to find matching entry in table Maybe should check application types first to allow application override? Might also be useful to have a flag which indicates table is sorted and we can do a binary search. For now stick to a linear search.

FIXME: need to search application table too

No match, return default type

FIXME: should log the value or OID of unsupported type

www.openssl.org/source/license.html

License

internal/cryptlib.h

internal/refcount.h

asn1_locl.h

offset

addr

op

%p:%4d:%s\n

t * return int **, so settle for (int *). */ return pvaltmp; } /* * Handle ANY DEFINED BY template, find the selector, look up the relevant * ASN1_TEMPLATE in the table and return it. */ const ASN1_TEMPLATE *asn1_do_adb(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt, int nullerr) { const ASN1_ADB *adb; const ASN1_ADB_TABLE *atbl; long selector; ASN1_VALUE **sfld; int i; if (!(tt->flags & ASN1_TFLG_ADB_MASK)) return tt; /* Else ANY DEFINED BY ... get the table */ adb = ASN1_ADB_ptr(tt->item); /* Get the selector field */ sfld = offset2ptr(*pval, adb->offset); /* Check if NULL */ if (*sfld == NULL) { if (!adb->null_tt) goto err; return adb->null_tt; } /* * Convert type to a long: NB: don

