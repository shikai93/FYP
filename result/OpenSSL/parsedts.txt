Copyright 2006-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Request nonce length, in bits (must be a multiple of 8).

Name of config entry that defines the OID file.

Is |EXACTLY_ONE| of three pointers set?

Query related functions.

Reply related functions.

Verify related functions.

This command is so complex, special help is needed.

Input is ContentInfo instead of TimeStampResp.

Output is ContentInfo instead of TimeStampResp.

Check parameter consistency and execute the appropriate function.

Configuration file-related function definitions.

Query-related method definitions.

Build query object.

Setting nonce if requested.

Find the first non-zero byte and creating ASN1_INTEGER object.

Reply-related method definitions.

Write response.

Reads a PKCS7 token and adds default 'granted' status info to it.

Ownership is lost.

Ownership is lost.

Verify-related method definitions.

Add the signature verification flag and arguments.

Initialising the X509_STORE object.

Loading untrusted certificates.

ndef OPENSSL_NO_TS

www.openssl.org/source/license.html

License

apps.h

oid_file

help

-

Display this summary

config

<

Configuration file

section

s

Section to use within config file

query

-

Generate a TS query

data

<

File to hash

digest

s

Digest (as a hex string)

tspolicy

s

Policy OID to use

no_nonce

-

Do not include a nonce

cert

-

Put cert request into query

in

<

Input file

token_in

-

Input is a PKCS#7 file

out

>

Output file

token_out

-

Output is a PKCS#7 file

text

-

Output text (not DER)

reply

-

Generate a TS reply

queryfile

<

File containing a TS query

passin

s

Input file pass phrase source

inkey

s

File with private key for reply

signer

s

Signer certificate file

chain

<

File with signer CA chain

verify

-

Verify a TS response

CApath

/

Path to trusted CA files

CAfile

<

File with trusted CA certs

untrusted

<

File with untrusted certs



-

Any supported digest

engine

s

Use engine, possibly a hardware device

-

\nOptions specific to 'ts -verify': \n

-

\n

Typical uses:

ts -query [-rand file...] [-config file] [-data file]

[-digest hexstring] [-tspolicy oid] [-no_nonce] [-cert]

[-in file] [-out file] [-text]

or

ts -reply [-config file] [-section tsa_section]

[-queryfile file] [-passin password]

[-signer tsa_cert.pem] [-inkey private_key.pem]

[-chain certs_file.pem] [-tspolicy oid]

[-in file] [-token_in] [-out file] [-token_out]

[-text] [-engine id]

[-text]

or

ts -verify -CApath dir -CAfile file.pem -untrusted file.pem

[-data file] [-digest hexstring]

[-queryfile file] -in file [-token_in]

[[options specific to 'ts -verify']]

%s: Use -help for summary.\n

%s\n

Error getting password.\n

cannot convert %s to OID\n

Using configuration from %s\n

r

r

r

w

w

sha1

could not create query\n

digest buffer

bad digest, %d bytes

must be specified\n

nonce buffer

could not create nonce\n

rb

Response has been generated.\n

Response is not generated.\n

w

w

granted

rb

Error during serial number

generation.

r

Warning: could not open file %s for

reading, using serial number: 1\n

unable to load number from %s\n

w

\n

could not save serial number to %s\n

rb

Verification:

OK\n

FAILED\n

rb

invalid digest string\n

rb

memory allocation failure\n

Error loading directory %s\n

memory allocation failure\n

Error loading file %s\n

Copyright 2006-2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Possible values for status.

Possible values for failure_info.

Function declarations for TS_REQ defined in ts/ts_req_print.c

Function declarations for TS_RESP defined in ts/ts_resp_utils.c

Caller loses ownership of PKCS7 and TS_TST_INFO objects.

Declarations related to response generation, defined in ts/ts_resp_sign.c.

Optional flags for response generation.

Don't include the TSA name in response.

Set ordering to true in response.

Include the signer certificate and the other specified certificates in the ESS signing certificate attribute beside the PKCS7 signed data. Only the signer certificates is included by default.

Forward declaration.

This must return a unique number less than 160 bits long.

This must return the seconds and microseconds since Jan 1, 1970 in the sec and usec variables allocated by the caller. Return non-zero for success and zero for failure.

This must process the given extension. It can modify the TS_TST_INFO object of the context. Return values: !0 (processed), 0 (error, it must set the status info/failure info of the response).

Creates a response context that can be used for generating responses.

This parameter must be set.

This parameter must be set.

This parameter must be set.

No additional certs are included in the response by default.

Adds a new acceptable policy, only the default policy is accepted by default.

Adds a new acceptable message digest. Note that no message digests are accepted by default. The md argument is shared with the caller.

Accuracy is not included by default.

Clock precision digits, i.e. the number of decimal digits: '0' means sec, '3' msec, '6' usec, and so on. Default is 0.

At most we accept usec precision.

Maximum status message length

No flags are set by default.

Default callback always returns a constant.

Default callback uses the gettimeofday() and gmtime() system calls.

Default callback rejects all extensions. The extension callback is called when the TS_TST_INFO object is already set up and not signed yet.

FIXME: extension handling is not tested yet.

The following methods can be used in the callbacks.

Sets the status info only if it is still TS_STATUS_GRANTED.

The get methods below can be used in the extension callback.

Creates the signed TS_TST_INFO and puts it in TS_RESP. In case of errors it sets the status info properly. Returns NULL only in case of memory allocation/fatal error.

Declarations related to response verification, they are defined in ts/ts_resp_verify.c.

Context structure for the generic verify method.

Verify the signer's certificate and the signature of the response.

Verify the version number of the response.

Verify if the policy supplied by the user matches the policy of the TSA.

Verify the message imprint provided by the user. This flag should not be specified with TS_VFY_DATA.

Verify the message imprint computed by the verify method from the user provided data and the MD algorithm of the response. This flag should not be specified with TS_VFY_IMPRINT.

Verify the nonce value.

Verify if the TSA name field matches the signer certificate.

Verify if the TSA name field equals to the user provided name.

You can use the following convenience constants.

Declarations related to response verification context,

If ctx is NULL, it allocates and returns a new object, otherwise it returns ctx. It initialises all the members as follows: flags = TS_VFY_ALL_IMPRINT & ~(TS_VFY_TSA_NAME | TS_VFY_SIGNATURE) certs = NULL store = NULL policy = policy from the request or NULL if absent (in this case TS_VFY_POLICY is cleared from flags as well) md_alg = MD algorithm from request imprint, imprint_len = imprint from request data = NULL nonce, nonce_len = nonce from the request or NULL if absent (in this case TS_VFY_NONCE is cleared from flags as well) tsa_name = NULL Important: after calling this method TS_VFY_SIGNATURE should be added!

Function declarations for TS_RESP defined in ts/ts_resp_print.c

Common utility functions defined in ts/ts_lib.c

Function declarations for handling configuration options, defined in ts/ts_conf.c

www.openssl.org/source/license.html

License

C

t include the TSA name in response. */ # define TS_TSA_NAME 0x01 /* Set ordering to true in response. */ # define TS_ORDERING 0x02 /* * Include the signer certificate and the other specified certificates in * the ESS signing certificate attribute beside the PKCS7 signed data. * Only the signer certificates is included by default. */ # define TS_ESS_CERT_ID_CHAIN 0x04 /* Forward declaration. */ struct TS_resp_ctx; /* This must return a unique number less than 160 bits long. */ typedef ASN1_INTEGER *(*TS_serial_cb) (struct TS_resp_ctx *, void *); /* * This must return the seconds and microseconds since Jan 1, 1970 in the sec * and usec variables allocated by the caller. Return non-zero for success * and zero for failure. */ typedef int (*TS_time_cb) (struct TS_resp_ctx *, void *, long *sec, long *usec); /* * This must process the given extension. It can modify the TS_TST_INFO * object of the context. Return values: !0 (processed), 0 (error, it must * set the status info/failure info of the response). */ typedef int (*TS_extension_cb) (struct TS_resp_ctx *, X509_EXTENSION *, void *); typedef struct TS_resp_ctx TS_RESP_CTX; DEFINE_STACK_OF_CONST(EVP_MD) /* Creates a response context that can be used for generating responses. */ TS_RESP_CTX *TS_RESP_CTX_new(void); void TS_RESP_CTX_free(TS_RESP_CTX *ctx); /* This parameter must be set. */ int TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer); /* This parameter must be set. */ int TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key); int TS_RESP_CTX_set_signer_digest(TS_RESP_CTX *ctx, const EVP_MD *signer_digest); int TS_RESP_CTX_set_ess_cert_id_digest(TS_RESP_CTX *ctx, const EVP_MD *md); /* This parameter must be set. */ int TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *def_policy); /* No additional certs are included in the response by default. */ int TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, STACK_OF(X509) *certs); /* * Adds a new acceptable policy, only the default policy is accepted by * default. */ int TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *policy); /* * Adds a new acceptable message digest. Note that no message digests are * accepted by default. The md argument is shared with the caller. */ int TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md); /* Accuracy is not included by default. */ int TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx, int secs, int millis, int micros); /* * Clock precision digits, i.e. the number of decimal digits:

means sec, *

msec,

usec, and so on. Default is 0. */ int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx, unsigned clock_precision_digits); /* At most we accept usec precision. */ # define TS_MAX_CLOCK_PRECISION_DIGITS 6 /* Maximum status message length */ # define TS_MAX_STATUS_LENGTH (1024 * 1024) /* No flags are set by default. */ void TS_RESP_CTX_add_flags(TS_RESP_CTX *ctx, int flags); /* Default callback always returns a constant. */ void TS_RESP_CTX_set_serial_cb(TS_RESP_CTX *ctx, TS_serial_cb cb, void *data); /* Default callback uses the gettimeofday() and gmtime() system calls. */ void TS_RESP_CTX_set_time_cb(TS_RESP_CTX *ctx, TS_time_cb cb, void *data); /* * Default callback rejects all extensions. The extension callback is called * when the TS_TST_INFO object is already set up and not signed yet. */ /* FIXME: extension handling is not tested yet. */ void TS_RESP_CTX_set_extension_cb(TS_RESP_CTX *ctx, TS_extension_cb cb, void *data); /* The following methods can be used in the callbacks. */ int TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx, int status, const char *text); /* Sets the status info only if it is still TS_STATUS_GRANTED. */ int TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx, int status, const char *text); int TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure); /* The get methods below can be used in the extension callback. */ TS_REQ *TS_RESP_CTX_get_request(TS_RESP_CTX *ctx); TS_TST_INFO *TS_RESP_CTX_get_tst_info(TS_RESP_CTX *ctx); /* * Creates the signed TS_TST_INFO and puts it in TS_RESP. * In case of errors it sets the status info properly. * Returns NULL only in case of memory allocation/fatal error. */ TS_RESP *TS_RESP_create_response(TS_RESP_CTX *ctx, BIO *req_bio); /* * Declarations related to response verification, * they are defined in ts/ts_resp_verify.c. */ int TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs, X509_STORE *store, X509 **signer_out); /* Context structure for the generic verify method. */ /* Verify the signer

0x01

0x02

0x04

