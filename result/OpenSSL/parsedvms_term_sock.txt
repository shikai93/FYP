Copyright 2016 The OpenSSL Project Authors. All Rights Reserved. Copyright 2016 VMS Software, Inc. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

On VMS, you need to define this to get the declaration of fileno(). The value 2 is to make sure no function defined in POSIX-2 is left undefined.

Copied from IOSBDEF.H for Alpha

Final I/O status

16-bit byte count variant

16-bit byte count

32-bit device dependent info

32-bit pid

32-bit byte count variant

32-bit byte count (unaligned)

16-bit device dependent info

Final GETxxI status

Final $Registry status

Reserved field

#if !defined(__VAXC)

End of IOSBDEF

Socket Pair Timeout Value (must be 0-59 seconds)

Socket Pair Timeout Block which is passed to timeout AST

--------------------------------------------------------------------------



--------------------------------------------------------------------------

Create the terminal socket

Process the terminal input

Delete the terminal socket

--------------------------------------------------------------------------



--------------------------------------------------------------------------

Process the requested function code

Create a socket pair

Assign a channel to the terminal device

Queue an async IO to the terminal device

Return the input side of the socket pair

Cancel any pending IO on the terminal channel

Deassign the terminal channel

Close the terminal socket pair

Return the initialized socket

Invalid function code

Return success

--------------------------------------------------------------------------



--------------------------------------------------------------------------

Create a socket

Initialize the socket information

Bind the socket to the local IP

Get the socket name so we can save the port number

Setup a listen for the socket

Get the binary (64-bit) time of the specified timeout value

Assign another channel to the TCP/IP device for the accept. This is the channel that ends up being connected to.

Get the channel of the first socket for the accept

Perform the accept using $QIO so we can do this asynchronously

Create the second socket to do the connect

Setup the Socket Pair Timeout Block

Before we block on the connect, set a timer that can cancel I/O on our two sockets if it never connects.

Now issue the connect

Wait for the asynch $QIO to finish. Note that if the I/O was aborted (SS$_ABORT), then we probably canceled it from the AST routine - so log a timeout.

Here we're successfully connected, so cancel the timer, convert the I/O channel to a socket fd, close the listener socket and return the connected pair.

--------------------------------------------------------------------------



--------------------------------------------------------------------------

Cancel the connect()

Cancel the accept()

--------------------------------------------------------------------------



--------------------------------------------------------------------------

Terminate the terminal buffer

Send the data read from the terminal device throught the socket pair

Queue another async IO to the terminal device

Return status

--------------------------------------------------------------------------



--------------------------------------------------------------------------

Get the process pid

Convert the current time into local time

Format the message buffer

Get any variable arguments and add them to the print of the message buffer

Flush standard error output

www.openssl.org/source/license.html

License

vms_term_sock.h

Enter 'q' or 'Q' to quit ...

Q

Waiting on terminal I/O ...\n

\0

Received terminal I/O [%s]

SYS$COMMAND

TerminalSocket: CreateSocketPair () - %08X

TerminalSocket: SYS$ASSIGN () - %08X

TerminalSocket: SYS$QIO () - %08X

TerminalSocket: SYS$CANCEL () - %08X

TerminalSocket: SYS$DASSGN () - %08X

TerminalSocket: Invalid Function Code - %d

127.0.0.1

TCPIP$DEVICE

CreateSocketPair: socket () - %d

CreateSocketPair: bind () - %d

CreateSocketPair: getsockname () - %d

0 0:0:%02d.00

CreateSocketPair: SYS$BINTIM () - %08X

CreateSocketPair: SYS$ASSIGN () - %08X

CreateSocketPair: SYS$QIO () - %08X

CreateSocketPair: socket () - %d

CreateSocketPair: SYS$SETIMR () - %08X

CreateSocketPair: connect () - %d

CreateSocketPair: SYS$QIO(iosb) timeout

CreateSocketPair: SYS$QIO(iosb) - %d

re successfully connected, so cancel the timer, convert the ** I/O channel to a socket fd, close the listener socket and return the ** connected pair. */ sys$cantim (&sptb, 0); close (SockDesc1) ; SocketPair[0] = SockDesc2 ; SocketPair[1] = socket_fd (TcpDeviceChan); return (0) ; } /*----------------------------------------------------------------------------*/ /* */ /*----------------------------------------------------------------------------*/ static void SocketPairTimeoutAst (int astparm) { SPTB *sptb = (SPTB *) astparm; sys$cancel (sptb->SockChan2); /* Cancel the connect() */ sys$cancel (sptb->SockChan1); /* Cancel the accept() */ return; } /*----------------------------------------------------------------------------*/ /* */ /*----------------------------------------------------------------------------*/ static int TerminalDeviceAst (int astparm) { int status; /* ** Terminate the terminal buffer */ TerminalDeviceBuff[TerminalDeviceIosb.iosb$w_bcnt] =

\n

Jan

Feb

Mar

Apr

May

Jun

Jul

Aug

Sep

Oct

Nov

Dec

%02d-%s-%04d %02d:%02d:%02d [%08X] %s\n

Copyright 2016 The OpenSSL Project Authors. All Rights Reserved. Copyright 2016 VMS Software, Inc. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Terminal Socket Function Codes

Terminal Socket Status Codes

Terminal Socket Prototype

www.openssl.org/source/license.html

License

