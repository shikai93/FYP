Copyright 2016-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Closing a top level WPACKET should fail

Finishing a top level WPACKET should succeed

Can't call close or finish on a WPACKET that's already finished.

Now try with a one byte length prefix

And a longer length prefix

Putting more bytes in than fit for the size of the length prefix should fail

Test initialising from a fixed size buffer

Adding 3 bytes should succeed

Adding 1 more byte should fail

Finishing the top level WPACKET should succeed

Initialise with 1 len byte

Adding 2 bytes should succeed

Adding 1 more byte should fail

No previous lenbytes set so we should be ok to set the max possible max size

We should be able to set it smaller too

And setting it bigger again should be ok

Should fail because we already consumed 1 byte with the length

Max size can't be bigger than biggest that will fit in lenbytes

It can be the same as the maximum possible size

Or it can be less

Should fail because packet is already filled

You can't put in more bytes than max size

Can't finish because we have a sub packet

Sub packet is closed so can't close again

Now a top level so finish should succeed

Single sub-packet with length prefix

Nested sub-packets with length prefixes

Sequential sub-packets with length prefixes

Nested sub-packets with lengths filled before finish

Set packet to be non-zero length

Should fail because of zero length

Repeat above test in a sub-packet

Should fail because of zero length

Set packet to abandon non-zero length

Repeat above test but only abandon a sub-packet

And repeat with a non empty sub-packet

Repeat with WPACKET_sub_allocate_bytes

Repeat with WPACKET_sub_memcpy()

www.openssl.org/source/license.html

License

../ssl/packet_locl.h

testutil.h

t call close or finish on a WPACKET that

t be bigger than biggest that will fit in * lenbytes */ || !TEST_false(WPACKET_set_max_size(&pkt, 0x0101)) /* It can be the same as the maximum possible size */ || !TEST_true(WPACKET_set_max_size(&pkt, 0x0100)) /* Or it can be less */ || !TEST_true(WPACKET_set_max_size(&pkt, 0x01)) /* Should fail because packet is already filled */ || !TEST_false(WPACKET_put_bytes_u8(&pkt, 0xff)) /* You can

t finish because we have a sub packet */ || !TEST_false(WPACKET_finish(&pkt)) || !TEST_true(WPACKET_close(&pkt)) /* Sub packet is closed so can

0xff

0x01,

0xff

0x00,

0x00,

0x00,

0x01,

0xff

0x03,

0xff,

0x01,

0xff

0x01,

0xff,

0x01,

0xff

0x00

0x02,

0xfe,

0xff

0x03,

0x02,

0xfe,

0xff

0xff,

0xff,

0xff

0xff))

0xff))

0xff))

0xff),

0xffffff))

0xff))

0xfeff))

0xff))

0x0101))

0x0100))

0x01))

0xff))

0x02))

0xff))

0xff))

0xff))

0xff))

0xff))

0xff))

0xff))

0xff))

0xff))

0xff))

0xff))

0xff))

0xff))

0xfe;

0xff;

0xfe;

0xff;

0xfe,

0xff

