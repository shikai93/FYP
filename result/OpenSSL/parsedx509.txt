Copyright 1995-2017 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

n" " Subject: ", X509_get_subject_name(x), get_nameopt()); print_name(out, " Issuer: ", X509_get_issuer_name(x), get_nameopt()); BIO_puts(out, "

should be in the library

NOTE: this certificate can/should be self signed, unless it was a certificate request in which case it is not.

version 3 certificate

it is ok to use a self signed certificate This case will catch both the initial ok == 0 and the final ok == 1 calls to this function

BAD we should have gotten an error. Normally if everything worked X509_STORE_CTX_get_error(ctx) will still be set to DEPTH_ZERO_SELF_....

self sign

version 3 certificate

found

parse comma separated ext name string

check if this ext is what we want

push the extension into a new stack

www.openssl.org/source/license.html

License

apps.h

.srl

help

-

Display this summary

inform

f

Input format - default PEM (one of DER, NET or PEM)

in

<

Input file - default stdin

outform

f

Output format - default PEM (one of DER, NET or PEM)

out

>

Output file - default stdout

keyform

F

Private key format - default PEM

passin

s

Private key password/pass-phrase source

serial

-

Print serial number value

subject_hash

-

Print subject hash value

issuer_hash

-

Print issuer hash value

hash

-

Synonym for -subject_hash

subject

-

Print subject DN

issuer

-

Print issuer DN

email

-

Print email address(es)

startdate

-

Set notBefore field

enddate

-

Set notAfter field

purpose

-

Print out certificate purposes

dates

-

Both Before and After dates

modulus

-

Print the RSA key modulus

pubkey

-

Output the public key

fingerprint

-

Print the certificate fingerprint

alias

-

Output certificate alias

noout

-

No output, just status

nocert

-

No certificate output

ocspid

-

Print OCSP hash values for the subject name and public key

ocsp_uri

-

Print OCSP Responder URL(s)

trustout

-

Output a trusted certificate

clrtrust

-

Clear all trusted purposes

clrext

-

Clear all certificate extensions

addtrust

s

Trust certificate for a given purpose

addreject

s

Reject certificate for a given purpose

setalias

s

Set certificate alias

days

n

How long till expiry of a signed certificate - def 30 days

checkend

M

Check whether the cert expires in the next arg seconds

Exit 1 if so, 0 if not

signkey

<

Self sign cert with arg

x509toreq

-

Output a certification request object

req

-

Input is a certificate request, sign and output

CA

<

Set the CA certificate, must be PEM format

CAkey

s

The CA key, must be PEM format; if not in CAfile

CAcreateserial

-

Create serial number file if it does not exist

CAserial

s

Serial file

set_serial

s

Serial number to use

text

-

Print the certificate in text form

ext

s

Print various X509V3 extensions

C

-

Print out C code forms

extfile

<

File with X509V3 extensions to add

extensions

s

Section from config file to use

nameopt

s

Various certificate name options

certopt

s

Various certificate text options

checkhost

s

Check certificate matches host

checkemail

s

Check certificate matches email

checkip

s

Check certificate matches ipaddr

CAform

F

CA format - default PEM

CAkeyform

F

CA key format - default PEM

sigopt

s

Signature parameter in n:v form

force_pubkey

<

Force the Key to put inside certificate

next_serial

-

Increment current certificate serial number

clrreject

-

Clears all the prohibited or rejected uses of the certificate

badsig

-

Corrupt last byte of certificate signature (for test)



-

Any supported digest

subject_hash_old

-

Print old-style (MD5) issuer hash value

issuer_hash_old

-

Print old-style (MD5) subject hash value

engine

s

Use engine, possibly a hardware device

preserve_dates

-

preserve existing dates when signing

%s: Use -help for summary.\n

Serial number supplied twice\n

%s: Invalid trust object value %s\n

%s: Invalid reject object value %s\n

%s: checkend time out of range %s\n

%s: Unknown parameter %s\n

w

Error getting password\n

Forced key

need to specify a CAkey if using the CA command\n

default

extensions

default

Error Loading extension section %s\n

We need a private key to sign with\n

r

error unpacking public key\n

Signature verification error\n

Signature did not match the certificate request\n

Signature ok\n

subject=

Certificate

CA Certificate

2.99999.3

SET.ex3

SET x509v3 extension 3

issuer=

subject=

serial=

\n

\n

%s\n

%s\n

<No Alias>\n

%08lx\n

%08lx\n

%08lx\n

%08lx\n

Certificate purposes:\n

Modulus=unavailable\n

Modulus=

Wrong Algorithm type

\n

Error getting public key\n

/*\n

* Subject:

* Issuer:

*/\n

x509 name buffer

the_subject_name

the_public_key

the_certificate

notBefore=

\n

notAfter=

\n

out of memory\n

%s Fingerprint=

%02X%c

\n

:

Getting Private key\n

Private key

Getting CA Private Key\n

CA Private Key

Getting request Private Key\n

no request key file specified\n

request key

Generating certificate request\n

Certificate will expire\n

Certificate will not expire\n

bad output format specified for outfile\n

unable to write certificate\n

.

serial# buffer

add_word failure\n

Error obtaining CA X509 public key\n

Error initialising X509 store\n

CA certificate and CA private key do not match\n

error with certificate to be certified - should be self signed\n

error with certificate - error %d at depth %d\n%s\n

%s%s :

CA



Yes\n

No\n

Yes (WARNING code=%d)\n

,

\0

\0

No extensions in certificate\n

Invalid extension names: %s\n

UNDEF

No extensions matched with %s\n

Copyright 2016 The OpenSSL Project Authors. All Rights Reserved. Licensed under the OpenSSL licenses, (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.openssl.org/source/license.html or in the file LICENSE in the source distribution.

This will load and print the public key as well as extensions

www.openssl.org/source/license.html

License

fuzzer.h

rand.inc

Copyright 1995-2016 The OpenSSL Project Authors. All Rights Reserved. Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved Licensed under the OpenSSL license (the "License"). You may not use this file except in compliance with the License. You can obtain a copy in the file LICENSE in the source distribution or at https://www.openssl.org/source/license.html

Flags for X509_get_signature_info()

Signature info is valid

Signature is suitable for TLS use

X509_ALGOR

This is used for a table of trust checking functions

standard trust ids

Only valid in purpose settings

Keep these up to date!

trust_flags values

No compat trust if self-signed, preempts "DO_SS"

Compat trust if no explicit accepted trust EKUs

Accept "anyEKU" as a wildcard trust OID

check_trust return codes

Flags for X509_print_ex()

Flags specific to X509_NAME_print_ex()

The field separator information

Traditional; use old X509_NAME_print

RFC2253 ,+

,+ spaced: more readable

;+ spaced

One line per field

Reverse DN order

How the field name is shown

Object short name

Object long name

Always use OIDs

No field names

Put spaces round '='

This determines if we dump fields we don't recognise: RFC2253 requires this.

Align field names to 20 characters

Complete set of RFC2253 flags

readable oneline form

readable multiline form

The PKCS#8 data types

encrypted pub key

When decrypted, the following will not be NULL

used to encrypt and decrypt

true if we should auto free key_data

expanded version of 'enc_algor'

The next 2 structures and their 8 routines were sent to me by Pat Richard <patr@x509.com> and are used to manipulate Netscapes spki structures - useful if you are writing a CA web page

challenge sent in atlas >= PR2

signed public key and challenge

Netscape certificate sequence structure

Unused (and iv length is wrong) typedef struct CBCParameter_st { unsigned char iv[8]; } CBC_PARAM;

Password based encryption structure

Password based encryption V2 structures

Usually OCTET STRING but could be anything



This one is only used so that a binary form can output, as in i2d_X509_NAME(X509_get_X509_PUBKEY(x), &buf)

NOTE: you should be passing -1, not 0 as lastpos. The functions that use lastpos, search after that position on.

lookup a cert from a X509 STACK

PKCS#8 utilities

www.openssl.org/source/license.html

License

C

DO_SS

anyEKU

=

t recognise: RFC2253 requires * this. */ # define XN_FLAG_DUMP_UNKNOWN_FIELDS (1 << 24) # define XN_FLAG_FN_ALIGN (1 << 25)/* Align field names to 20 * characters */ /* Complete set of RFC2253 flags */ # define XN_FLAG_RFC2253 (ASN1_STRFLGS_RFC2253 | \ XN_FLAG_SEP_COMMA_PLUS | \ XN_FLAG_DN_REV | \ XN_FLAG_FN_SN | \ XN_FLAG_DUMP_UNKNOWN_FIELDS) /* readable oneline form */ # define XN_FLAG_ONELINE (ASN1_STRFLGS_RFC2253 | \ ASN1_STRFLGS_ESC_QUOTE | \ XN_FLAG_SEP_CPLUS_SPC | \ XN_FLAG_SPC_EQ | \ XN_FLAG_FN_SN) /* readable multiline form */ # define XN_FLAG_MULTILINE (ASN1_STRFLGS_ESC_CTRL | \ ASN1_STRFLGS_ESC_MSB | \ XN_FLAG_SEP_MULTILINE | \ XN_FLAG_SPC_EQ | \ XN_FLAG_FN_LN | \ XN_FLAG_FN_ALIGN) DEFINE_STACK_OF(X509_REVOKED) typedef struct X509_crl_info_st X509_CRL_INFO; DEFINE_STACK_OF(X509_CRL) typedef struct private_key_st { int version; /* The PKCS#8 data types */ X509_ALGOR *enc_algor; ASN1_OCTET_STRING *enc_pkey; /* encrypted pub key */ /* When decrypted, the following will not be NULL */ EVP_PKEY *dec_pkey; /* used to encrypt and decrypt */ int key_length; char *key_data; int key_free; /* true if we should auto free key_data */ /* expanded version of

C

0x10100000L

0x1

0x2

0x0080

0x0040

0x0020

0x0010

0x0008

0x0004

0x0002

0x0001

0x8000

0xffff

0x8000

0x0001

0xf

0x3

0x10100000L

0x10100000L

